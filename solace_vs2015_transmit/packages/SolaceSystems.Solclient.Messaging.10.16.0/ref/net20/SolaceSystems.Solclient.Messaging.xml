<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SolaceSystems.Solclient.Messaging</name>
    </assembly>
    <members>
        <member name="T:SolaceSystems.Solclient.Messaging.AuthenticationSchemes">
            <summary>
            Possible authentication schemes that can be used when connecting and authenticating with the appliance.
            <br>
            
            </br>
            This property specifies the authentication scheme. Default: <see cref="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.BASIC"/>.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.BASIC">
            <summary>
            Basic authentication is the default scheme that is implicitly used by the API prior to the 
            introduction of the <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.AuthenticationScheme"/> property.
            In this scheme, the API will use basic authentiction which sends the <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.UserName"/>
            and <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Password"/> to the appliance for authentication. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.CLIENT_CERTIFICATE">
            <summary>
            Client certificate is an authentication scheme where the API will send the client certificate
            (see <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientCertificateFile"/>,
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientCertificate"/>, and optionally,
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.UserName"/>) to the appliance. Based on the user's VPN
            configuration, the appliance will use the client user name embeded
            in the client certificate (in the CN field) or the one specified by the client application.
            <br>
            For more info see <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.AuthenticationScheme"/>
            </br>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.GSS_KRB">
            <summary>
            GSS Kerberos is an authentication scheme where the API will use kerberos single sign on to authenticate
            with the appliance.
            <br>
            For more info see <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.AuthenticationScheme"/>
            </br>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.OAUTH2">
            <summary>
            OAUTH 2.0 authentication with a token.
            Covers OpenId Connect and OAuth 2.0
            OpenId Connect parameters:  OpenId Connect ID Token, OAuth Access Token (optional)
            OAuth 2.0 parameters:  OAuth Access Token, OAuth Issuer Identifier (optional)
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IProperties">
            <summary>
            Super interface for all properties.
            This interface is used in builder/factory design patterns.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IProperties.Clear">
            <summary>
            Clears the properties.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IProperties.Count">
            <summary>
            Returns the number of properties.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.BaseProperties">
            <summary>
            An abstract base class for all properties in the API. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.BaseProperties.EMPTY_STR">
            <summary>
            Represents an empty string.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.SetCCSMPProperty(System.String,System.String)">
            <summary>
            Sets a property to be passed directly to CCSMP. Properties set in this manner
            will always override properties set using the shortcut properties, regardless
            of order.
            </summary>
            <param name="key">Name of property in CCSMP</param>
            <param name="value">Value of the property, or null to unset</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.GetPropertyNames">
            <summary>
            Returns an array of property names.
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.SetReferencePropertyValue(System.String,System.Object)">
            <summary>
            Associates a property key with a property value.
            The value will not be marked for serialization.
            </summary>
            <param name="key">Property key</param>
            <param name="value">Property value</param>   
            <returns>Object value of the property</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.SetPropertyValue(System.String,System.Object)">
            <summary>
            Associates a property key with a property value.
            </summary>
            <param name="key">Property key</param>
            <param name="value">Property value</param>   
            <returns>Object value of the property</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.GetPropertyValue(System.String)">
            <summary>
            Gets the property value associated with the given key.
            </summary>
            <param name="key">Property key</param>
            <returns>Object value of the property</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.RemoveProperty(System.String)">
            <summary>
            internal method to remove property from property map
            </summary>
            <param name="key">key of property to remove</param>
            <returns> true, found and removed, false, not found</returns>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.BaseProperties.Count">
            <summary>
            Returns the count of properties.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.Clear">
            <summary>
            Removes all properties.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance. 
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.BaseProperties.InternalLock">
            <summary>
            Internal state lock
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.Collapse">
            <summary>
            Collapse prepares the Properties instance for marshalling into C# interop
            layer. BaseProperties member m_referenceMap should contain properties that
            do not (or perhaps should not) have a bytewise serialization or a proper 
            string representation. And thus m_referenceMap are exempt from the property
            marshalling.
            </summary>
            <returns>
            A dictionary of the property keys and values to be marshalled for interop.
            </returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true, if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BaseProperties.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ContextProperties">
            <summary>
            Defines Context properties. 
            It is passed in to the ContextFactory's CreateContext method.   
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextProperties.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ContextProperties.PROPERTY">
            <summary>
            An enum list of Context properties.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextProperties.PROPERTY.MaxSessions">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.ContextProperties.MaxSessions"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextProperties.PROPERTY.MaxFlows">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.ContextProperties.MaxFlows"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextProperties.PROPERTY.TimerResolutionInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.ContextProperties.TimerResolutionInMsecs"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextProperties.MaxSessions">
            <summary>
            The maximum number of sessions allowed within a context.
            Default: 1
            <p>This property is obsolete, setting MaxSessions no longer has any effect on the maximum number of sessions allowed per context.</p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextProperties.MaxFlows">
            <summary>
            The maximum number of flows supported across all sessions in the context.
            Default: 100.
            <p>This property is obsolete, setting MaxFlows no longer has any effect on the maximum number of flows allowed per context.</p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextProperties.CreateThread">
            <summary>
            Internal, when true, the API creates and starts the context thread.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextProperties.TimerResolutionInMsecs">
            <summary>
            The internal timer resolution (in milliseconds). Valid range is >= 10. See <see cref="T:SolaceSystems.Solclient.Messaging.TimerTask"/> for more details
            on the usage of this property.
            Default: 50.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextProperties.InterThreadProtocol">
            <summary>
            Internal, when true, the API creates and starts the context thread.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextProperties.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextProperties.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new ContextProperties instance given a dictionary of key/value strings - Reserved for future use
            </summary>
            <param name="dictionary">Reserved for future use</param>
            <returns>Returns new ContextProperties instance given a dictionary of key/value strings - Reserved for future use</returns>
            <exception cref="T:System.FormatException">
            </exception>
            <exception cref="T:System.OverflowException">
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextProperties.ToDictionary">
            <summary>
            Returns a new IDictionary instance.
            </summary>
            <returns>Returns a new IDictionary instance</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextProperties.FromDictionaryWithPrefix(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Creates  a new ContextProperties instance given a dictionary of key/value strings - Reserved for future use
            </summary>
            <param name="dictionary">Reserved for future use</param>
            <param name="prefix">The prefix to prepend to the property name (using '.' as a separator). If null is passed in, "ContextProperties" is assumed.</param>
            <returns>Return a new ContextProperties instance given a dictionary of key/value strings - Reserved for future use</returns>
            <exception cref="T:System.FormatException">
            </exception>
            <exception cref="T:System.OverflowException">
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextProperties.ToDictionaryWithPrefix(System.String)">
            <summary>
            Returns a new IDictionary instance
            </summary>
            <param name="prefix">The prefix that was passed in to <see cref="M:SolaceSystems.Solclient.Messaging.ContextProperties.FromDictionaryWithPrefix(System.Collections.Generic.IDictionary{System.String,System.String},System.String)"/></param>. 
            <returns>Returns a new IDictionary</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SessionProperties">
            <summary>
            Session initialization properties.
            <p>
            Some Session Properties can also be set as environment variables.  If a session property 
            can be set as an environment variable, the API will only look for that environment variable
            if the property is not specified in the sesssion property list passed to
            <see cref="M:SolaceSystems.Solclient.Messaging.IContext.CreateSession(SolaceSystems.Solclient.Messaging.SessionProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.SessionEventArgs})"/>
            </p>
            <p>
             The names of the environment variables are based on the native library property names. 
             </p>
             <p>
             The following environment variables are recognized:
             <list type="">
             <item>SOLCLIENT_SESSION_PROP_PASSWORD <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Password"/></item>
             <item>SOLCLIENT_SESSION_PROP_HOST <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/></item>
             <item>SOLCLIENT_SESSION_PROP_GD_RECONNECT_FAIL_ACTION <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GdReconnectFailAction"/>
                The acceptable strings for this environment variable are also based on the underlying native library:
                <list type="number">
                <item>"SOLCLIENT_SESSION_PROP_GD_RECONNECT_FAIL_ACTION_AUTO_RETRY" 
                    (<see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.GuaranteedDeliveryReconnectFailAction.AUTO_RETRY"/>)</item>
                <item>"SOLCLIENT_SESSION_PROP_GD_RECONNECT_FAIL_ACTION_DISCONNECT" 
                    (<see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.GuaranteedDeliveryReconnectFailAction.DISCONNECT"/>)</item>
                </list>
             </item>
             </list>
             </p>
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SessionProperties.AckMode">
            <summary>
            Specifies if <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.Acknowledgement"/> 
            acknowledges a single message or a range of messages. 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.AckEventMode"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.AckMode.PER_MSG">
            <summary>
            An <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.Acknowledgement"/> session event acknowledges a single message.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.AckMode.WINDOWED">
            <summary>
            In this mode, an <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.Acknowledgement"/> session event is a ranged acknowledgement. 
            It acknowledges the message received as well as all preceding messages.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SessionProperties.GuaranteedDeliveryReconnectFailAction">
            <summary>
             Specify the behavior when the CCSMP API is unable to reconnect guaranteed delivery after 
             reconnecting the session. This may occur if the session is configured with a host list where
             each Solace router in the host list is unaware of state of the previous router. It can also
             occur if the time to reconnect to the same router exceeds the publisher flow timeout on 
             the router.
             <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GdReconnectFailAction"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.GuaranteedDeliveryReconnectFailAction.AUTO_RETRY">
            <summary>
            Clear the publisher state and reconnect the publisher flow. Then republish all unacknowledged 
            messages, this may cause duplication. The API then continues the reconnect process as usual.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.GuaranteedDeliveryReconnectFailAction.DISCONNECT">
            <summary>
            Disconnect the session, even if SOLCLIENT_SESSION_PROP_RECONNECT_RETRIES is configured to a
            non-zero value. This is the legacy behavior. If the application attempts to manually 
            reconnect the session, it is also responsible for unacknowledged messages. If the 
            application chooses to resend those messages, there may be duplication. If the application 
            chooses not to resend those messages there may be message loss.
            <p>
            Special consideration is required for applications setting <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GdReconnectFailAction"/> to <b>DISCONNECT</b>. 
            When a reconnect occurs on a different host, an application publishing
            guaranteed messages will receive the <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.DownError"/> event with the <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownFlowName"/> sub-code.
            When this occurs, any queued messages are flushed.  Messages published after this event has been raised will be queued then sent after a
            subsequent connect initiated by the application by calling <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/>.</p>
            <p>
            Multi-threaded applications should be aware that some, but not necessarily all, messages published on one thread may be flushed due to
            failed reconnect, as messages published after the <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.DownError"/> event are not flushed. If the application chooses
            to republish some or all unacknowledged messages after the send queue has been flushed there is a possibility
            that these old, republished messages may be queued after newly published messages.</p>
            <p>
            If the possibility of old messages after new messages is a concern, it is recommended that instead of calling
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/> on the session that has gone down, this session should instead be destroyed
            and a new session created to establish a new connection.</p>
            
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.SESSION_PROP_MAX_USERNAME_LEN">
            <summary>
            The maximum length of username string (session property).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.SESSION_PROP_MAX_PASSWORD_LEN">
            <summary>
            The maximum length of password string (session property).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.SESSION_PROP_MAX_HOST_LEN">
            <summary>
            The maximum length of a single host entry in the session host property.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.SESSION_PROP_MAX_HOSTS">
            <summary>
            The maximum number of hosts that can appear in the session host property. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.SESSION_PROP_MAX_APP_DESC">
            <summary>
            The maximum length of the application (that is, client) description string (session property).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.SESSION_PROP_MAX_CLIENT_NAME_LEN">
            <summary>
            The maximum length of the client name string (session property).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.SESSION_PROP_MAX_VPN_NAME_LEN">
            <summary>
            The maximum length of a VPN name string (session property).
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SessionProperties.#ctor">
            <summary>
            Class constructor
            
            Developer Note: All properties MUST have a default even if deprecated to avoid casting null.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY">
            <summary>
            An enum list of Session properties.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.UserName">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.UserName"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.Password">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Password"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ClientName">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientName"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.Host">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.Port">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Port"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SdkBufferSize">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SdkBufferSize"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SendBlocking">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SubscribeBlocking">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SubscribeBlocking"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.BlockingWriteTimeoutInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.BlockingWriteTimeoutInMsecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ConnectTimeoutInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectTimeoutInMsecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.IgnoreDuplicateSubscriptionError">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.IgnoreDuplicateSubscriptionError"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.TcpNoDelay">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.TcpNoDelay"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SocketSendBufferSizeInBytes">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SocketSendBufferSizeInBytes"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SocketReceiveBufferSizeInBytes">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SocketReceiveBufferSizeInBytes"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.KeepAliveIntervalInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.KeepAliveIntervalInMsecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.KeepAliveIntervalsLimit">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.KeepAliveIntervalsLimit"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ClientDescription">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientDescription"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ClientMode">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientMode"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.BindIP">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.BindIP"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.MaxFlowsPerSession">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.MaxFlowsPerSession"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ADPublishWindowSize">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ADPublishWindowSize"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ADPublishAckTimerInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ADPublishAckTimerInMsecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ConnectBlocking">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectBlocking"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.AckEventMode">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.AckEventMode"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLProtocol">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLProtocol"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLExcludedProtocols">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLExcludedProtocols"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLValidateCertificate">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificate"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLValidateCertificateDate">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificateDate"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLValidateCertificateHost">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificateHost"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLCipherSuites">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLCipherSuites"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLTrustStoreDir">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLTrustStoreDir"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLTrustedCommonNameList">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLTrustedCommonNameList"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLConnectionDowngradeTo">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLConnectionDowngradeTo"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.AuthenticationScheme">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.AuthenticationScheme"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLClientCertificateFile">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientCertificateFile"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLClientPrivateKeyFile">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientPrivateKeyFile"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SSLClientPrivateKeyFilePassword">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientPrivateKeyFilePassword"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SubscribeConfirmTimeoutInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SubscribeConfirmTimeoutInMsecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ProvisionTimeoutInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ProvisionTimeoutInMsecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.VPNName">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.VPNName"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.VPNNameInUse">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.VPNNameInUse"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SubscriberLocalPriority">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SubscriberLocalPriority"/> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.SubscriberNetworkPriority">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SubscriberNetworkPriority"/> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.CompressionLevel">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.CompressionLevel"/> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.GenerateReceiveTimestamps">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GenerateReceiveTimestamps"/> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.GenerateSendTimestamps">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GenerateSendTimestamps"/> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.IncludeSenderId">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.IncludeSenderId"/>  
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.GenerateSequenceNumber">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GenerateSequenceNumber"/> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ConnectRetries">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectRetries"/>  
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ReconnectRetries">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetries"/>  
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ReconnectRetriesWaitInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetriesWaitInMsecs"/>  
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.BlockWhileConnecting">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.BlockWhileConnecting"/>      
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.UserIdentification">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.UserIdentification"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.P2PInboxInUse">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.P2PInboxInUse"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ReapplySubscriptions">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReapplySubscriptions"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.TopicDispatch">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.TopicDispatch"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.CalculateMessageExpiration">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.CalculateMessageExpiration"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.VirtualRouterName">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.VirtualRouterName"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ConnectRetriesPerHost">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectRetriesPerHost"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.NoLocal">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.NoLocal"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ModifyPropertyTimeoutInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ModifyPropertyTimeoutInMsecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.KRBServiceName">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.KRBServiceName"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.GdReconnectFailAction">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GdReconnectFailAction"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.GdWithWebTransport">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GdWithWebTransport"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.OAuth2AccessToken">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.OAuth2AccessToken"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.OAuth2IssuerIdentifier">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.OAuth2IssuerIdentifier"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.OidcIdToken">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.OidcIdToken"/>
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SessionProperties.CSPROPERTY">
            <summary>
            An enum list of C# only Session properties.
            C# only Properties should only be properties that are not representable as a CCSMP Property ie a string.
            For example a X509Certficate property.
            This is internal for now.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.CSPROPERTY.SSLClientCertificate">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientCertificate"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionProperties.CSPROPERTY.SSLTrustStore">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLTrustStore"/>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SessionProperties.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates and returns a new <c>SessionProperties</c> given a dictionary of key/value strings
            <p>where:</p>
            <p>key: is a string representation of a given <c>SessionProperties</c> property <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY"/>.</p>
            <p>value: is a string representation of the value of that property.</p>
            <p>Rules:</p>
            <p>1. Keys that are not in the <c>SessionProperties</c>' property set <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY"/> are ignored and a warning log is generated.</p>
            <p>2. If a property is omitted, the default value is used.</p>
            <p>3. Validation and type checking is performed on the provided values; a conversion exception is thrown if
               any of the provided values cannot be converted.</p>
            <p>4. Read-only properties are ignored. </p>
            </summary>
            <param name="dictionary"></param>
            <returns>Returns a new <c>SessionProperties</c> given a dictionary of key/value strings</returns>
            <exception cref="T:System.FormatException">
            </exception>
            <exception cref="T:System.OverflowException">
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SessionProperties.ToDictionary">
            <summary>
            Returns a new <c>IDictionary</c> instance where:
            <p>key: is a string representation of a given SessionProperties property <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY"/>.</p>
            <p>value: is a string representation of the value of that property, or null if the property's value is null.</p>
            Note that only readable and writable properties are returned in the dictionary. Read-only properties are ignored.
            </summary>
            <returns>Returns a new <c>IDictionary</c> instance</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SessionProperties.FromDictionaryWithPrefix(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Creates and returns a new <c>SessionProperties</c> from a dictionary of key/value strings
            <p>where:</p>
            <p>key: is a string representation of a given <c>SessionProperties</c> property <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY"/> prefixed with a string "prefix".</p>
            <p>value: is a string representation of the value of that property.</p>
            <p>Rules:</p>
            <p>1. Keys that are not in the SessionProperties' property set <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY"/>, are ignored and a warning log is generated.</p>
            <p>2. If a property is omitted, the default value will be used.</p>
            <p>3. Validation and type checking will be performed on the provided values, a conversion exception will be thrown if
               any of the provided values cannot be converted.</p>
            <p>4. Read-only properties are ignored.</p>
            </summary>
            <param name="dictionary"></param>
            <param name="prefix">The prefix to prepend to the property name (using '.' as a separator). If null is passed in, "SessionProperties" is assumed</param>
            <returns>Returns a new <c>SessionProperties</c> from a dictionary of key/value strings</returns>
            <exception cref="T:System.FormatException">
            </exception>
            <exception cref="T:System.OverflowException">
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SessionProperties.ToDictionaryWithPrefix(System.String)">
            <summary>
            Returns a new <c>IDictionary</c> instance where:
            <p>key: is a string representation of a given <c>SessionProperties</c> property <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY"/> prefixed with a string "prefix".</p>
            <p>value: is a string representation of the value of that property, or <c>null</c> if the property's value is null.</p>
            Note that only readable and writable properties are returned in the dictionary. Read-only properties are ignored.
            </summary>
            <param name="prefix">The prefix that was passed in to SessionProperties.FromDictionaryWithPrefix(IDictionary,string). </param>
            <returns>Returns a new <c>IDictionary</c> instance</returns>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.UserName">
            <summary>
            The username required for authentication.  
            Default: empty string
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.Password">
            <summary>
            The password required for authentication.
            <p>
            May be set as an environment variable.  (see <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties"/>)
            </p>
            Default: empty string
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientName">
            <summary>
            The session client name that is used during client login (appliances running SolOS-TR only) 
            to create a unique session. 
            An empty string causes a unique client name to be generated automatically. 
            If specified, it must be a valid Topic name and a maximum of 160 bytes in length. 
            For all appliances (SolOS-TR) the <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientName"/> is also used to uniquely identify the sender in a message's 
            senderId field if <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.IncludeSenderId"/> is set to true.  
            Default: empty string
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host">
             <summary>
             The IPv4 or IPv6 address or host name to connect to. 
             Multiple host entries separated by commas (up to sixteen) are allowed. 
             With multiple entries, each is tried in turn until one succeeds.   
             
             <h4>Host entry</h4>
             <p>
             <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/> contains one or more host entries (up to sixteen). The host entry may also include 
             an optional ProxyHost configuration, separated from the message router configuration by a percent (%) sign. 
             A host entry has the following form:
             </p>
             <p>
             <strong>[Protocol:]Host[:Port][%ProxyService]</strong> <br/><br/>
             </p>
             <p>
            <strong>Protocol</strong> is the protocol used for the transport channel. The valid values are: <br/><br/>
             <list type="">
             <item> tcp - use a TCP channel for communications between the application and its peers. If no protocol is set, tcp is used as a default.</item>
             <item> tcps - use a SSL channel over TCP for communications between the application and its peers. The encryption with compression is not supported.</item>
             <item> http - use HTTP channels or a WebSocket channel over TCP for communications between the application and 
             its peers. Web Messaging with compression is not supported.</item>
             <item>https - use HTTP channels or a WebSocket channel over SSL for communications between the application
             and its peers. Web Messaging with compression is not supported.</item>
             </list>
             </p>
             <p>
             <strong>Host</strong> is the IPv4 or IPv6 address or host name to connect to for a connection. IPv6 addresses must be enclosed in brackets ([]) <br/>
             </p>
             <p>
             <strong>Port</strong> is the port to connect to for a connection. A value is only required when using a port other than the automatically assigned 
             default port number. The default port for TCP is 55555 when compression is not in use, or 55003 when compression is in use. The default port 
             for SSL is 55443.</p><br/><br/>
             <p>
             <strong>ProxyService</strong> is a description of the non-transparent proxy.  If it is necessary to configure the proxy server that is used to connect to
             the message router, then the proxy server is configured in the ProxyService string. The ProxyService string format is specified as:
             </p>
             <p><strong>[ProxyProtocol]://[username:password@]proxyHost[:proxyPort]</strong><br/>
             <strong>ProxyProtocol</strong> is the protocol used to communication with the proxy server. The valid values are:<br/><br/>
             <list type="">
             <item>socks5 - Connect to the server with the SOCKS Protocol Version 5, RFC 1928 (IETF Standards Track Document)</item>
             <item>httpc -  Connect to the server with the HTTP Connect Protocol, RFC 2817 (IETF Standards Track Document)</item>
             </list>
             </p><p>
             If authentication is required for the proxy server, the <strong>username</strong> and <strong>password</strong> may be 
             optionally specified before the proxy host.
             </p><p>
             <strong>proxyHost</strong> is the IPv4 or IPv6 address or host name of the proxy server.
             </p><p>
             <strong>proxyPort</strong> is the port to connect to for a connection. If the port number is not specified, the 
             default for SOCKS5 is port 1080, and the default for Http-Connect is port 3128.
             </p><p>
             The following examples show how to specify transport channel types. Unless it is otherwise specified, the default port 55555 is used.
             <list type="number">
             <item> 192.168.160.28 - connect to IP address 192.168.160.28 over TCP. </item>
             <item> [fe80::1] - connect to IPV6 address fe80::1 and the default port 55555 over TCP. </item>
             <item> tcp:192.168.160.28 - connect to IP address 192.168.160.28 over TCP. </item>
             <item> tcps:192.168.160.28 - connect to IP address 192.168.160.28 and port 55443 over SSL over TCP. </item>
             <item> tcps:[fe80::1] - connect to IPV6 address fe80::1 and the default port 55443 over SSL over TCP. </item>
             <item> tcp:192.168.160.28:44444 - connect to IP address 192.168.160.28 and port 44444 over TCP. </item>
             <item> tcp:[fe80::1]:44444 - connect to IPV6 address fe80::1 and port 44444 over TCP. </item>
             <item> http://192.168.160.28 - connect to IP address 192.168.160.28 and the default port 80 over HTTP or WebSocket over TCP.</item>
             <item> https://192.168.160.28 - connect to IP address 192.168.160.28 and the default port 443 over HTTP or WebSocket over SSL over TCP</item>
             </list>
             </p>
             <p>
             The following examples show how to connect to a message router through a proxy server.
             <list type="number">
             <item>192.168.160.28%socks5://192.168.1.1 - connect to message router at 192.168.160.28 through a SOCKS5 proxy server at 192.168.1.1.</item>
             <item>192.168.160.28%httpc://192.168.1.1 - connect to message router at 192.168.160.28 through a HTTP-Connect proxy server at 192.168.1.1.</item>
             <item>tcps:solace.company.com%socks5://User:PassWord@proxy.company.com:13128 - connect to message router at solace.company.com using
             SSL over TCP through a SOCKS5 proxy server at proxy.company.com, port 13128. Authenticate with the proxy server using username <strong>User</strong>
             and password <strong>PassWord</strong>.</item>
             <item> tcp://192.168.160.27:44444%httpc://proxy.company.com:11080 - connect to the message router at 192.168.160.28, 
             port 44444, using HTTP Connect through the proxy server at proxy.company.com, port 11080.</item>
             <item>[fe80::1]\%socks5://[fe80::2] - connect message router at [fe80::1] through a SOCKS5 proxy server at [fe80::2].</item>
             </list>
             </p>
             <h4>Configuring Multiple Hosts for Redundancy and Failover</h4>
             <p>
             Some applications might want to have a list of appliances available for 
             connection. Typically these appliances will be in separate geographic 
             locations and use of a host list allows applications to fail over to the
             alternate connections if the first appliance is unavailable. The host
             list is configured in the Host property of SessionProperties as a comma
             separated list of hosts. Each host can optionally include a port number
             as well. For example, if there are two appliances at 192.168.160.128 and
             192.168.160.129, but the second is using the non-default port 50005 for the
             message bus, the SessionProperties.Host would be configured as: 
             
             <p>SessionProperties.Host = "192.168.160.128,192.168.160.129:50005" </p>
             <br></br>
             
             In this case, when <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/> is called, the API attempts to
             connect, first to 192.168.160.128, if that connection fails for any
             reason it attempts to connect to 192.168.160.129:50005. This process is
             repeated until all entries in the host list are attempted. After each entry
             has been attempted, if all fail, the session properties <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectRetries"/>
             and <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetriesWaitInMsecs"/> determine the behavior of
             the API. If <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectRetries"/> is non-zero, SolClient
             waits for <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetriesWaitInMsecs"/> milliseconds then starts connection
             attempts again from the beginning of the list.    
             </p>
             <p>
             If an established session fails, to any host in the list, when 
             <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetries"/> is non-zero, then API automatically attempts
             to reconnect, starting at the beginning of the list. 
             Note that the session connect timer, 
             <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectTimeoutInMsecs"/>, runs separately for each connection attempt. 
             So an application waiting for a connection established <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.UpNotice"/> or connection failure 
             <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.ConnectFailedError"/> could have to wait up to 
             ( (number of hosts in the hosts list) times (<see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectTimeoutInMsecs"/>) ) for the event.
             </p>        
             <h4>Multiple Hosts and Guaranteed Messaging </h4>
             If a client application publishes Guaranteed messages ( <see cref="F:SolaceSystems.Solclient.Messaging.MessageDeliveryMode.NonPersistent"/> 
             or <see cref="F:SolaceSystems.Solclient.Messaging.MessageDeliveryMode.Persistent"/> )
             and then a disconnect occurs, the API will automatically reconnect to other
             listed hosts. However, because another host will not know the state of the publisher flow
             to the original host, the API must reset publisher flow state.  Unacknowledged messages are
             renumbered and resent by the API.  If the alternate router is configured as a replication site this
             may lead to duplicate messages in the system.  It is up to the application to resolve this duplication
             in what ever way is appropriate to the application.
             <p>
             Applications may wish to configure the session so that auto-reconnect only occurs if no guaranteed
             messages have been published. This is the legacy behaviour of the API. If this is desired the
             set the session property <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GdReconnectFailAction"/>  to the value
             <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.GuaranteedDeliveryReconnectFailAction.DISCONNECT"/>.  This session property can also be
             set as environment variable which then allows legacy applications to run without modification or
             recompile.
             </p>
             <p>
             May be set as an environment variable.  (see <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties"/>)
             </p>
             <br/><br/>
             Default: empty string
             </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.Port">
            <summary>
            <p>
            This property is deprecated. While still supported, the port number can also now be specified as part of the host in Host (e.g. "hostname:55555"). 
            In general, port numbers are not needed to be specified except in special situations. 
            If this property is set, this port number is used for all entries in <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/> that do not explicitly specify port.  
            </p>
            It represents the port number to connect to. Valid range is 0..65535; 0 means use default for the selected CompressionLevel.
            <p>
            Default: 0 (getting this property returns the appropriate default port: 55003 if compression is enabled, 55555 otherwise).
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SdkBufferSize">
            <summary>
            Controls the buffering of transmit messages. When sending small messages, the session buffer size
            should be set to multiple times the typical message size to improve performance. Regardless of the buffer
            size, the API always accepts at least one message to transmit. So even if a single message's size exceeds
            this value, it is accepted and transmitted, as along as the current buffered data is zero.
            However, no more messages are accepted until the amount of data buffered is reduced below this value.  
            <br>
            Default: 90000
            </br>/// 
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking">
            <summary>
            Set to true to enable blocking send operation.
             A blocking send operation suspends when the Session is transport flow controlled, otherwise the send
             operation returns <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>.
             Successful return from a blocking send operation only means the message has been accepted by the transport, 
             it does not guarantee the messagehas been processed by the appliance. For the latter you must used Guaranteed Message Delivery mode
             and wait for the session event (<see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.Acknowledgement"/>) that acknowledges the message.
             <br>
             Note: The API does not support a synchronous (send and wait for acknowledgement operation), however such an operation can be easily 
             implemented in an application by waiting for a <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.Acknowledgement"/>.
             </br>
            <br>
            Default: true
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SubscribeBlocking">
            <summary>
            Set to true to enable blocking subscribe/unsubscribe operation.
            <br>
            Default: true
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.BlockingWriteTimeoutInMsecs">
            <summary>
            The timeout period (in milliseconds) for blocking write operation. The valid range is > 0. 
            <br>
            Default: 100000
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectTimeoutInMsecs">
            <summary>
            The timeout period (in milliseconds) for a connect operation. The valid range is > 0.
            <br>
            Default: 30000
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ProvisionTimeoutInMsecs">
            <summary>
            The timeout (in milliseconds) for an endpoint provision or deprovision confirmation.
            The valid range is >= 1000.
            <br>
            Default: 3000 
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.TcpNoDelay">
            <summary>
            Set to true to enable TCP No Delay on the underlying TCP connection.
            <br>
            Default: true
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SocketSendBufferSizeInBytes">
            <summary>
            The socket send buffer size value. 0 indicates do not set and leave at operating system default. The 
            valid range is 0 or >= 1024.
            <br>
            Default: 90000
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SocketReceiveBufferSizeInBytes">
            <summary>
            The socket receive buffer size value. 0 indicates do not set and leave at operating system default. The 
            valid range is 0 or >= 1024.
            <br>
            Default: 150000
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.AckEventMode">
            <summary>
            Specifies if an <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.Acknowledgement"/> session event acknowledges a single message 
            (<see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.AckMode.PER_MSG"/>) or a range of messages (<see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.AckMode.WINDOWED"/>).  
            <p>
            Setting this property to <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.AckMode.WINDOWED"/> will not affect <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.RejectedMessageError"/> events, 
            they will still be emitted on a per message basis. 
            </p>
            Default: <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.AckMode.PER_MSG"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.GdReconnectFailAction">
            <summary>
             Specify the behavior when the CCSMP API is unable to reconnect guaranteed delivery after 
             reconnecting the session. This may occur if the session is configured with a host list where
             each Solace router in the host list is unaware of the state on the previous router. It can also
             occur if the time to reconnect to the same router exceeds the publisher flow timeout on 
             the router.
             <p>
            May be set as an environment variable.  (see <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties"/>)
            </p>
            Default: <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.GuaranteedDeliveryReconnectFailAction.AUTO_RETRY"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLProtocol">
            <summary>
            This property is deprecated. 
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLExcludedProtocols">
            <summary>
            Specifies a comma separated list of excluded SSL protocol(s).
            Valid protocols are 'SSLv3', 'TLSv1', 'TLSv1.1', 'TLSv1.2'.
            <br>
            Default: ""
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificate">
             <summary>
             Indicates if the certificate validation with certificates in the truststore is enabled.
             Default: true
            
             <p>
             <strong>Note on certificate validation: </strong>
             When validating certificates, the messaging APIs for C and .NET use the
             following validation rules, after building the chain from the server
             certificate to a self-signed root certificate using certificates presented by
             the server and certificates in the trust store : 
             <list type="bullet">
             <item>Verify the root certificate is trusted.</item>
             <item>Verify depth of the chain is &lt;= 3. </item>
             </list>
             Java and JMS messaging APIs use the same rules as C and .NET with the following
             exceptions:
             <list type="bullet">
             <item>Depth validation is not enforced in Java or JMS.</item>
             <item>When the server presents an incomplete certificate chain, Java/JMS messaging
             APIs only require the signer of the incomplete certificate chain to be in the
             trust store, where this could be insufficient for C/.NET APIs.</item>
             </list>
             Therefore C and .NET messaging APIs certificate validation rules are more
             restrictive, hence if a certificate is accepted by C or .NET, it will
             definitely be accepted by Java and JMS. 
             </p>
             <br>
             Default: true
             </br>
             </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificateDate">
            <summary>
            Indicates if the session connection should fail when a certificate with an invalid date is received.
            <br>
            This property only applies when <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificate"/> is enabled.
            </br>
            <br>
            Default: true
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificateHost">
            <summary>
            Indicates if the sesssion connection should fail when a certificate with an invalid host is received. When enabled, 
            and connecting to a named host, the certificate Subject Alternative Name must contain a DNS entry that matches the
            host string.
            <br>
            When enabled, and connecting to a host by IP address, the certificate Subject Alternative Name must contain an IP 
            Address that matches.
            </br>
            <br>
            If there is no Subject Alternate Name the certificate common name (CN) may be checked against the host string.
            </br>
            <br>
            This property only applies when <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificate"/> is enabled.
            </br>
            <br>
            Default: true
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLCipherSuites">
            <summary>
            Specifies a comma separated list of the cipher suites.
            Allowed cipher suites are: 'ECDHE-RSA-AES256-GCM-SHA384', 'ECDHE-RSA-AES256-SHA384', 'ECDHE-RSA-AES256-SHA', 
            'AES256-GCM-SHA384', 'AES256-SHA256', 'AES256-SHA', 'ECDHE-RSA-DES-CBC3-SHA', 'DES-CBC3-SHA', 
            'ECDHE-RSA-AES128-GCM-SHA256', 'ECDHE-RSA-AES128-SHA256', 'ECDHE-RSA-AES128-SHA', 'AES128-GCM-SHA256', 
            'AES128-SHA256', 'AES128-SHA', 'RC4-SHA', 'RC4-MD5'.
            <br>
            Default: "ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-RSA-AES256-SHA,AES256-GCM-SHA384,AES256-SHA256,AES256-SHA,ECDHE-RSA-DES-CBC3-SHA,DES-CBC3-SHA,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-SHA256,ECDHE-RSA-AES128-SHA,AES128-GCM-SHA256,AES128-SHA256,AES128-SHA,RC4-SHA,RC4-MD5"
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLTrustStoreDir">
            <summary>
            Specifies the directory where the trusted certificates are. A maximum of 64 certificates will be loaded.
            The maximum depth for the certificate chain verification that shall be allowed is 3.
            <br>
            Default: null
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLTrustedCommonNameList">
            <summary>
            <b>NOT RECOMMENDED</b>
            Per RFC-6125 section 6.4.4, the Common Name (CN) of a certificate should not be used to validate the certificate.
            Instead <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificateHost"/> (enabled by default) indicates that the server
            certificate must contain a Subject Alternate Name (SAN) that matches the host name (<see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/>).
            <br>
            This property is only used if <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLValidateCertificateHost"/> is disabled. This property
            specifies a comma separated list of acceptable common names in certificate validation.
            The number of common names specified by an applications is limited to 16.
            Leading and trailing whitespaces are considered to be part of the common names and are not ignored.
            If the application does not provide any common names, there is no common name verification.
            </br>
            <br>
            Default: empty string
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLConnectionDowngradeTo">
            <summary>
            Specifies a transport protocol that SSL connection will be downgraded to after client authentication. Allowed transport protocol is "PLAIN_TEXT"
            <br>
            Default: null
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.AuthenticationScheme">
            <summary>
            Specifies the authentication scheme to be used by the corresponding ISession. For more information about the
            types of authentication schemes that can be set, see <see cref="T:SolaceSystems.Solclient.Messaging.AuthenticationSchemes"/>.
            <br>
            Default: <see cref="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.BASIC"/>
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientCertificateFile">
            <summary>
            The filename of the client certificate file. Required when <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.AuthenticationScheme"/>
            is set to <see cref="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.CLIENT_CERTIFICATE"/>. When specified, 
            a value of "" (or empty string) will cause a <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamOutOfRange"/> failure when
            connecting the session.
            <br>
            Default: null
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientPrivateKeyFile">
            <summary>
            The filename of the client's private key. Required when <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.AuthenticationScheme"/>
            is set to <see cref="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.CLIENT_CERTIFICATE"/>. When specified, 
            a value of "" (or empty string) will cause a <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamOutOfRange"/> failure when
            connecting the session.
            <br>
            Default: null
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientPrivateKeyFilePassword">
            <summary>
            The password to decrypt and read the <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientPrivateKeyFile"/>.
            This property is optional. When specified, 
            a value of "" (or empty string) will cause a <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamOutOfRange"/> failure when
            connecting the session.
            <br>
            Default: null
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientCertificate">
            <summary>
            The client certificate object to be used by ISession objects when the session's
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.AuthenticationScheme"/> property is set to
            <see cref="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.CLIENT_CERTIFICATE"/>. When specified, the certificate
            object must have a valid PrivateKey property referring to either a
            <see cref="T:System.Security.Cryptography.RSA"/> or a
            <see cref="T:System.Security.Cryptography.DSA"/> private key object. This property is
            mutually exclusive with <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientCertificateFile"/>,
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientPrivateKeyFile"/>, and <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLClientPrivateKeyFilePassword"/>.
            Either the certificate and private key are specified via the X509Certificate2 object,
            or they are specified via the aforementioned filename-based properties.  If both are
            specified, an exception will be thrown.
            <br>
            This Property is restricted and has different behaviour for the following <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties"/> operation:
            Serialization, this Property is not serialized;
            <see cref="M:SolaceSystems.Solclient.Messaging.SessionProperties.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.String})"/>, this Property can not be set from this operation;
            <see cref="M:SolaceSystems.Solclient.Messaging.SessionProperties.ToDictionary"/>, this Property can not be added to the Dictionary result of this operation;
            <see cref="M:SolaceSystems.Solclient.Messaging.SessionProperties.ToString"/>, this Property does not have an equivalent ToString field;
            </br>
            <br>
            Default: null
            </br>
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the client certifificate's <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey"/>
            property is null or the <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate.Handle"/> is <see cref="F:System.IntPtr.Zero"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the client certificate's <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey"/>
            property is not of one of the following types:
            <list type="bullet">
            <item><term><see cref="T:System.Security.Cryptography.RSA"/></term></item>
            <item><term><see cref="T:System.Security.Cryptography.DSA"/></term></item>
            </list>
            </exception>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLTrustStore">
            <summary>
            The collection of all trusted root certificates to be used by ISession objects.
            The trusted root certificates are used in establishing trust with a PubSub+ message
            broker when connecting via a protocol over SSL/TLS.  This occurs when specifying
            protocols such as tcps or https in a <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/>.
            This property is mutually exclusive with <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SSLTrustStoreDir"/>.
            Trusted certificates may be specified with one property or the other, but not both.  If
            both are specified, an exception will be thrown when the session is created with
            <see cref="M:SolaceSystems.Solclient.Messaging.IContext.CreateSession(SolaceSystems.Solclient.Messaging.SessionProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.SessionEventArgs})"/>.
            Trusted certificate store can be invalid when there are no valid certificates in the 
            collection. An exception will be thrown when the session is created with
            <see cref="M:SolaceSystems.Solclient.Messaging.IContext.CreateSession(SolaceSystems.Solclient.Messaging.SessionProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.SessionEventArgs})"/>.
            <br>
            Default: null
            </br>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.KRBServiceName">
            <summary>
            This property specifies the ServiceName of Service Principle Name (SPN) for Kerberos.
            It is used for all entries specified by the property <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/>
            
            The Service Principal Name (SPN) has the format "ServiceName/ApplianceName@REALM" where
            ServiceName is specified by this property, ApplianceName is the host portion of an entry specified by <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/>,
            and REALM is obtained from the Kerberos configuration.
            
            The maximum length for an SPN is 256 characters.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.IgnoreDuplicateSubscriptionError">
            <summary>
            Set to true ignore errors for duplicate subscription/topic on subscribe or unsubscribe.
            Default: true
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.KeepAliveIntervalInMsecs">
            <summary>
            Use 0 to disable keep-alive. If not zero, the minimum valid value is 50. 
            Default: 3000.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.KeepAliveIntervalsLimit">
            <summary>
            The number of keep-alive intervals with no received traffic that are allowed before a session is declared down. 
            The minimum valid value is 3.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientDescription">
            <summary>
            A string that describes the application instance. This string is available from SolAdmin or CLI.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientMode">
            <summary>
            Set to true to enable client mode. Client mode uses a single TCP connection to the appliance
            for both publisher and subscriber channels. To use this mode, the appliance requires a Topic Routing Blade.         
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.BindIP">
            <summary>
            (Optional) The hostname or IP address of the machine on which the application is
            running. On a multi-homed machine, it is strongly recommended to provide this
            parameter to ensure that the API uses the correct network interface at session
            connect time. Default: empty string
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.MaxFlowsPerSession">
            <summary>
            The maximum number of flows supported on this session. Default: 100.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ADPublishWindowSize">
            <summary>
            The publisher window size for Guaranteed messages. The Guaranteed Message Publish
            Window Size property limits the maximum number of messages that can be published 
            before the API must receive an acknowledgement from the appliance.
            Default: 50.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ADPublishAckTimerInMsecs">
            <summary>
            The duration of the publisher acknowledgement timer (in milliseconds). 
            When a published message is not acknowledged within the time specified for this timer, the API automatically retransmits the message. 
            There is no limit on the number of retransmissions for any message. However, while the API is resending, applications can become flow controlled. 
            The flow control behavior is controlled by SessionProperties.SendBlocking and SessionProperties.BlockingWriteTimeoutInMsecs.
            <p>
            The valid range is 20..60000. Default: 2000
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectBlocking">
            <summary>
            Use true to enable blocking connection operation.
            Default: true
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SubscribeConfirmTimeoutInMsecs">
            <summary>
            The timeout (in milliseconds) for an add or remove subscription confirmation.
            The valid range is >= 1000.
            Default: 10000 
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.VPNName">
            <summary>
            The name of the Message VPN to attempt to join when connecting to an appliance running SolOS-TR.   
            Default: empty string 
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.VPNNameInUse">
            <summary>
            A read-only session property that indicates which Message VPN the session is connected to. 
            When not connected, or when not in client mode, an empty string is returned.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SubscriberLocalPriority">
            <summary>
            Subscriber priorities are used to choose a client to receive messages that are sent with the <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.DeliverToOne"/> property set to true. 
            These messages are sent to the subscriber with the highest priority. Subscribers have two priorities; this priority (SubscriberLocalPriority) 
            is for messages published locally. 
            <p>
            The valid range is 1..4. 
            Default: 1 
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.SubscriberNetworkPriority">
            <summary>
            Subscriber priorities are used to choose a client to receive messages that are sent with the <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.DeliverToOne"/> property set to true. 
            These messages are sent to the subscriber with the highest priority. Subscribers have two priorities; this priority (SubscriberNetworkPriority) 
            is for messages published on appliances other than the one that the client is connected to.  
            <p>
            Valid range is 1..4. 
            Default: 1 
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.CompressionLevel">
            <summary>
            Enables messages to be compressed with ZLIB before transmission and decompressed on receive.  
            The valid range is 0 (off), or 1..9, where 1 is less compression (fastest) and 9 is most
            compression (slowest). Compression is only supported when the session is connected to an
            appliance running SolOS-TR.
            Default: 0 (no compression)
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.GenerateReceiveTimestamps">
            <summary>
            When enabled, a receive timestamp is recorded for each message and passed 
            back as a property of IMessage.
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.GenerateSendTimestamps">
            <summary>
            When enabled, a send timestamp is automatically generated as a message property for each message sent.  
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.IncludeSenderId">
            <summary>
            When enabled, a sender ID is automatically included in the Solace-defined fields for each message sent.  
            Default: false 
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.GenerateSequenceNumber">
            <summary>
            When enabled, a sequence number is automatically included in the Solace-defined fields for each message sent.  
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectRetriesPerHost">
            <summary>
            When using a host list for the <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/>, 
            this property defines how many times to try to connect or reconnect 
            to a single host before moving to the next host in the list. 
            <p> 
            A value of 0 (the default) means make a single connection attempt (that is, 
            0 retries). A value of -1 means attempt an infinite number of reconnect 
            retries (that is, the API only tries to connect or reconnect to first host 
            listed.) Default: 0 
            </p>
            <p>
            <strong>NOTE:</strong> This property works in conjunction with the connect and 
            reconnect retries settings; It does not replace them.
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectRetries">
            <summary>
            How many times to try to connect to the host appliance (or list of appliances) 
            during connection setup. Zero means no automatic connection retries 
            (that is, try once and give up). 
            -1 means try to connect forever. The default valid range is >= -1. 
            <p>
            API reattempts a connection retry, it begins with the first host listed. 
            For example, if a SOLCLIENT_SESSION_PROP_CONNECT_RETRIES value of two is 
            used, the API could possibly work through all of the listed hosts 
            without connecting to them three times: one time through for the 
            initial connect attempt, and then two times through for connect 
            retries.		
            </p>
            <p> 
            After each unsuccessful attempt to connect to a host, the API waits for 
            the amount of time set for 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetriesWaitInMsecs"/>  
            before attempting another connection to a host, and the number times to 
            attempt to connect to one host before moving on to the next listed host 
            is determined by the value set for 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectRetriesPerHost"/>.
            </p> 
            <p>	
            See <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/> for more details on the reconnect logic.
            </p>
            <p>
            Zero means no automatic connection retries (that is, try once and give up). 
            -1 means retry forever. The valid range is >= -1. 
            Default: 0 
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetries">
            <summary>
            How many times to retry to connect to the host appliance (or list of 
            appliances) after a connected session goes down.   
            <p>
            When using a host list, each time the API works through the host list 
            without establishing a connection is considered a reconnect retry. If the 
            API reattempts a reconnect retry, it begins with the first host listed. 
            For example, if a 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetries"/> value of two is 
            used, the API could possibly work through all of the listed hosts 
            without connecting to them three times: one time through for the 
            initial connect attempt, and then two times through for reconnect 
            retries.		
            </p>
            <p> 
            After each unsuccessful attempt to reconnect to a host, the API waits for 
            the amount of time set for 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetriesWaitInMsecs"/>  
            before attempting another connection to a host, and the number times to 
            attempt to connect to one host before moving on to the next listed host 
            is determined by the value set for 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectRetriesPerHost"/>.
            </p> 
            <p>	
            See <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/> for more details on the reconnect logic.
            </p>
            <p>
            Zero means no automatic reconnection attempts (that is, try once and give up).  
            -1 means try to reconnect forever. The valid range is >= -1. 
            Default: 0
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetriesWaitInMsecs">
            <summary>
            How much time (in ms) to wait between each attempt to connect or reconnect to a host. 
            If a connect or reconnect attempt to host is not 
            successful, the API waits for the amount of time set for 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetriesWaitInMsecs"/>, 
            and then makes another connect or reconnect attempt. 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectRetriesPerHost"/> sets 
            how many connection or reconnection attempts can be made 
            before moving to the next host in the list. 
            <p>
            The valid range is >=0. 
            Default: 3000
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.BlockWhileConnecting">
            <summary>
            To block the calling thread on operations such as sending a message, 
            subscribing or unsubscribing when the session is being connected or reconnected. 
            The operation must already be blocking (see SendBlocking).         
            Otherwise, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY"/> is returned if the session is being connected. Default: true         
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.UserIdentification">
            <summary>
            A read-only informational string that provides information about the application, 
            such as the name of operating system user that is running the application, the hostname, and the PID of the application.
            Returns empty string, if the session has not been connected.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.P2PInboxInUse">
            <summary>
            A read-only informational string that indicates the default reply-to destination string that is used when 
            a sent request message does not have a reply-to destination specified. 
            See <see cref="M:SolaceSystems.Solclient.Messaging.ISession.SendRequest(SolaceSystems.Solclient.Messaging.IMessage,SolaceSystems.Solclient.Messaging.IMessage@,System.Int32)"/> for more details.
            This parameter is only valid when session is connected. Defaults to empty string, when it is not connected.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReapplySubscriptions">
            <summary>
            Set to true to allow the API to remember subscriptions and reapply them upon a session reconnect. 
            <p>
            <strong>Note:</strong> Reapply subscriptions will only apply direct topic subscriptions unpon a Session reconnect. 
            It will not reapply topic subscriptions on durable and non-durable endpoints.
            </p>
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.TopicDispatch">
            <summary>
            Set to true to have the API dispatch messages based on topic. For more details see the 
            <see cref="T:SolaceSystems.Solclient.Messaging.IMessageDispatcher"/> documentation.
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.CalculateMessageExpiration">
            <summary>
            When this property is set to true and the message's <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.TimeToLive"/> is set (has a non-zero value), the API updates the
            message's <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.Expiration"/> property with the sum of message's Time-To-Live and the UTC timestamp value after it has been sent or received.
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.VirtualRouterName">
            <summary>
            A read-only session property that indicates the Virtual Router Name of the connected appliance. Used in building appliance endpoint 
            and destination objects such as Queues. Appliance endpoints and destinations created with a virtual router name are valid for 
            use with that appliance, or to address destinations on remote appliances (in a multiple-appliance network) when publishing messages.
            <p>
            Applications requiring the virtual router name need not poll this property every time it is needed, and may cache the 
            name. Applications should query the name once after connecting the session, and again after a reconnect operation 
            reports the <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.VirtualRouterNameChanged"/> session event.
            </p>
            When not connected, an empty string is returned.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.NoLocal">
            <summary>
            If this property is true, messages published on the session cannot be received on the
            same session even if the client has a subscription that matches the published topic.  
            If this restriction is requested and the appliance does not have No Local support, 
            the session connects fail with subcode <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoLocalNotSupported"/>.
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.ModifyPropertyTimeoutInMsecs">
            <summary>
            Maximum amount of time (in milliseconds) to wait for session property modification.
            Default: 100000 (10 seconds)
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.GdWithWebTransport">
            <summary>
            Enables guaranteed messaging with web transport
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.OAuth2AccessToken">
            <summary>
            The OAUTH2 access token. When authentication scheme <see cref="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.OAUTH2"/> is used, at least one of
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.OAuth2AccessToken"/> or <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.OidcIdToken"/> must be set.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.OAuth2IssuerIdentifier">
            <summary>
            The optional Issuer identifier URI for OAUTH2 access token based authentication.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionProperties.OidcIdToken">
            <summary>
            The OIDC (OpenId Connect) ID token. When authentication scheme <see cref="F:SolaceSystems.Solclient.Messaging.AuthenticationSchemes.OAUTH2"/> is used, at least one of
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.OAuth2AccessToken"/> or <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.OidcIdToken"/> must be set.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SessionProperties.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SessionProperties.Validate">
            <summary>
            Used to validate properties when creating a sesison. Not all properties are validated.
            Only properties that are to fail on session creation that aren't validated by CCMP are
            validated here.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.FlowProperties">
            <summary>
            Defines Flow properties.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FlowProperties.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY">
            <summary>
            An enum list of Flow properties.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.BindBlocking">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.BindBlocking"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.BindTimeoutInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.BindTimeoutInMsecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.WindowSize">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.WindowSize"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.AutoAck">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.AutoAck"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.BindRetries">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.BindRetries"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.AckTimerInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.AckTimerInMsecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.AckThreshold">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.AckThreshold"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.FlowStartState">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.FlowStartState"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.Selector">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.Selector"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.AckMode">
            <summary>
            <see cref ="P:SolaceSystems.Solclient.Messaging.FlowProperties.AckMode"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.NoLocal">
            <summary>
            <see cref ="P:SolaceSystems.Solclient.Messaging.FlowProperties.NoLocal"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.ActiveFlowInd">
            <summary>
            <see cref = "P:SolaceSystems.Solclient.Messaging.FlowProperties.ActiveFlowInd"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.MaxUnackedMessages">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.MaxUnackedMessages"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.ReplayStartLocation">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocation"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.ReplayStartLocationEx">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocationEx"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.MaxReconnectTries">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.MaxReconnectTries"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY.ReconnectRetryIntervalMs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReconnectRetryIntervalMs"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.MaxMsgSize">
            <summary>
            The maximum message size in bytes that can be spooled on this Endpoint. 
            Valid Range is within [0...10000000] bytes.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.Quota">
            <summary>
            Sets the maximum spool quota in MB for the Endpoint. 
            When null, the default value on the appliance is used (4000 MB).
            The valid range is 1 through MB.
            <p>
            A value of 0 configures the endpoint to act as a Last-Value-Queue,
            where the appliance enforces a queue depth of one, and only the most
            current message is spooled by the endpoint. When a new message is
            received, the current queued message is automatically deleted from
            the endpoint and the new message is spooled.
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.RespectsMsgTTL">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.EndpointProperties.RespectsMsgTTL"/> for details
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.AccessType">
            <summary>
            The access type determines the message delivery policies when more than one
            Flow is bound to the Endpoint. See <see cref="T:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointAccessType"/> for the meaning of each access type.
            This applies only to durable endpoints of type <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>.
            When null, the default value on the appliance is used (default: <see cref="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointAccessType.Exclusive"/>).
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.Permission">
            <summary>
            Permissions that can be granted to users other than the owner of the Endpoint (all others).
            When null, the default value on the appliance is used (default: <see cref="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermission.None"/>).       
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.DiscardBehavior">
            <summary>
            Defines discard behavior
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.MaxMsgRedelivery">
            <summary>
            Defines how many message redelivery retries before discarding or moving the message to the DMQ.
            The valid ranges is {0..255} where 0 means retry forever. Default: 0
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.AckMode">
            <summary>
            Controls how acknowledgements are generated for received Guaranteed messages.  
            Possible values are defined in <see cref="T:SolaceSystems.Solclient.Messaging.MessageAckMode"/>
            Default MessageAckMode.AutoAck
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.Selector">
            <summary>
            A JMS-defined selector.
            Default: Empty string
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.BindBlocking">
            <summary>
            Controls whether or not to block when creating a flow. When set to true, the create flow
            operation blocks awaiting appliance's response. The default value is true.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.BindTimeoutInMsecs">
            <summary>
            The timeout used (in milliseconds) when creating a flow in blocking mode. Default: 10000 msecs
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.WindowSize">
            <summary>
            The Guaranteed message window size for the flow. 
            This sets the maximum number of messages that can be in transit
            (that is, the messages are sent from the appliance, but are not yet delivered to the application).
            The valid range is 1..255. The default window size is 255.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.BindRetries">
            <summary>
            The maximum number of bind attempts to make. The default value is 3.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.AutoAck">
            <summary>
            When set to true, the API generates application level acknowledgments for Guaranteed messages,
            when the receive delegate returns, this is equivalent to specifying <see cref="F:SolaceSystems.Solclient.Messaging.MessageAckMode.AutoAck"/> for
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.AckMode"/>.
            <p>
            When set to false, client applications must explicitly acknowledge Guaranteed messages, if they do not
            want to receive them again when reconnecting.
            </p>
            Default: true
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.AckTimerInMsecs">
            <summary>
            The duration of the flow acknowledgement timer (in milliseconds). 
            The valid range is 20..1500. The default value is 1000. 
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.AckThreshold">
             <summary>
             The threshold for sending an acknowledgement, configured as a percentage. The
             API sends a transport acknowledgment every N messages where N is calculated as
             this percentage of the flow window size if the endpoint's
             max-delivered-unacked-msgs-per-flow setting at bind time is greater than or
             equal to the transport window size. Otherwise, N is calculated as this
             percentage of the endpoint's max-delivered-unacked-msgs-per-flow setting at
             bind time. 
            
             The valid range is 1..75. The default value is 60.
             </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.FlowStartState">
            <summary>
            Controls whether the flow should be created in a "start" or "stop" state with respect to receiving messages. 
            Flow start/stop state can be changed later through <see cref="M:SolaceSystems.Solclient.Messaging.IFlow.Start"/> or <see cref="M:SolaceSystems.Solclient.Messaging.IFlow.Stop"/>. 
            Default: true
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.NoLocal">
            <summary>
            If the connected peer supports No Local, then messages published on the session will not appear in flows 
            created with this property set to true, even if the endpoint contains a subscription that matches the published topic. 
            The ISession.CreateFlow(...) will fail and set subcode <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoLocalNotSupported"/> 
            if the connected peer does not support No Local.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.ActiveFlowInd">
            <summary>
            When a Flow has the Active Flow Indication property enabled, the application will receive flow events when the
            flow becomes active, or inactive.  If the underlying session capabilities indicate that the appliance does not 
            support active flow indications, then ISession.CreateFlow() will fail immediately and
            set the subCode <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ActiveFlowIndicationUnsupported"/>
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.MaxUnackedMessages">
            <summary>
            This property may only be set when the Flow property <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.AckMode"/> is set to
            <see cref="F:SolaceSystems.Solclient.Messaging.MessageAckMode.ClientAck"/>. When set to a positive value, this property controls the maximum
            number of messages that may be unacknowledged on the Flow (<see cref="M:SolaceSystems.Solclient.Messaging.IFlow.Ack(System.Int64)"/> is called to acknowledge
            messages and remove those messages from the message spool.) This property cannot be used to increase the
            appliance configured maximum number of acknowledged messages on the endpoint.  When set to -1, the appliance
            configured maximum controls how many unacknowledged messages may be received by the application. Valid
            values are -1 and >0.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocation">
            <summary>
            Deprecated: use <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocationEx"/> instead.
            When a Flow is created, the application may request replay of messages from the replay
            log, even messages that have been previously delivered and removed the from topic
            endpoint or queue. 
            The replay start location may be one of the following:
            <list type="">
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReplayStartLocation.Beginning"/> to indicate that all messages
            available should be replayed.
            </item>
            <item>
            A start location created from <see cref="M:SolaceSystems.Solclient.Messaging.ReplayStartLocation.Date(System.DateTime)"/>. All messages after the specificed date will be replayed.
            </item>
            </list>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocationEx">
            <summary>
            When a Flow is created, the application may request replay of messages from the replay
            log, even messages that have been previously delivered and removed the from topic
            endpoint or queue. 
            The replay start location may be one of the following:
            <list type="">
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReplayStartLocation.Beginning"/> to indicate that all messages
            available should be replayed.
            </item>
            <item>
            A start location created from <see cref="M:SolaceSystems.Solclient.Messaging.ReplayStartLocation.Date(System.DateTime)"/>. All messages after the specificed date will be replayed.
            </item>
            <item>
            A start location created from <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateReplicationGroupMessageId(System.String)"/> or from the message 
            property <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.ReplicationGroupMessageId"/>. All messages after the id will be replayed.
            </item>
            </list>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.MaxReconnectTries">
            <summary>
            Flows can be configured to attempt re-binding automatically, mainly when a replay is started.
            This property controls the number of times the re-bind is attempted.
            -1 means infinite retries.
            0 means no auto rebind.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReconnectRetryIntervalMs">
            <summary>
            Flows can be configured to attempt re-binding automatically, mainly when a replay is started.
            This property controls how long to wait between re-bind attempts, in milliseconds.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.BindEntity">
            <summary>
            The type of object the flow is bound.  
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.BindEntityDurable">
            <summary>
            The durability of the endpoint the flow is bound to. 
            Default: true, which means the endpoint is durable.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.BindName">
            <summary>
             An internal property.
            The name of the queue or IDurableTopicEndpoint target of the bind.  
            This property is ignored when the BIND_ENTITY is 
            SOLCLIENT_FLOW_PROP_BIND_ENTITY_SUB (subscriber)
            This is set at construction time.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowProperties.TopicName">
            <summary>
            An internal property.
            When binding to a IDurableTopicEndpoint, the topic may be set in the bind. This parameter is ignored for queue binding.
            This property is set at construction time. 
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FlowProperties.Remove(SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY)">
            <summary>
            An internal method to remove properties
            </summary>
            <param name="prop">Property to remove</param>
            <returns>
            true, if found and removed
            false, if not found
            </returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FlowProperties.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FlowProperties.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates and returns a new FlowProperties given a dictionary of key/value strings
            <p>where:</p>
            <p>key: is a string representation of a given FlowProperties property <see cref="T:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY"/></p>
            <p>value: is a string representation of the value of that property</p>
            <p>Rules:</p>
            <p>1. Keys that are not in the FlowProperties' property set <see cref="T:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY"/>, are ignored and a warning log is generated.</p>
            <p>2. If a property is omitted, the default value is used.</p>
            <p>3. Validation and type checking are performed on the provided values, and a conversion exception is thrown if
               any of the provided values cannot be converted.</p>
            <p>4. Read-only properties are ignored.</p>
            </summary>
            <param name="dictionary"></param>
            <returns>Returns a new FlowProperties given a dictionary of key/value strings</returns>
            <exception cref="T:System.FormatException">
            </exception>
            <exception cref="T:System.OverflowException">
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FlowProperties.ToDictionary">
            <summary>
            Returns a new IDictionary instance where:
            <p>key: is a string representation of a given FlowProperties property <see cref="T:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY"/>.</p>
            <p>value: is a string representation of the value of that property, or null if the property's value is null.</p>
            Note that only readable and writable properties are returned in the dictionary. Read-only properties are ignored.
            </summary>
            <returns>Returns a new IDictionary instance</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FlowProperties.FromDictionaryWithPrefix(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Creates and returns a new FlowProperties given a dictionary of key/value strings
            <p>where:</p>
            <p>key: is a string representation of a given FlowProperties property <see cref="T:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY"/> prefixed with a string "prefix".</p>
            <p>value: is a string representation of the value of that property.</p>
            <p>Rules:</p>
            <p>1. Keys that are not in the FlowProperties's property set <see cref="T:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY"/>, are ignored and a warning log is generated</p>
            <p>2. If a property is omitted, the default value is used.</p>
            <p>3. Validation and type checking is performed on the provided values; a conversion exception is thrown if
               any of the provided values cannot be converted.</p>
            <p>4. Read-only properties are ignored.</p>
            </summary>
            <param name="dictionary"></param>
            <param name="prefix">The prefix to prepend to the property name (using '.' as a separator). If null is passed in, "FlowProperties" is assumed</param>
            <returns>Returns a new FlowProperties given a dictionary of key/value strings</returns>
            <exception cref="T:System.FormatException">
            </exception>
            <exception cref="T:System.OverflowException">
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FlowProperties.ToDictionaryWithPrefix(System.String)">
            <summary>
            Returns a new IDictionary instance where:
            <p>key: is a string representation of a given FlowProperties property <see cref="T:SolaceSystems.Solclient.Messaging.FlowProperties.PROPERTY"/> prefixed with a string "prefix" </p>
            <p>value: is a string representation of the value of that property, or null if the property's value is null.</p>
            Note that only readable and writable properties are returned in the dictionary. Read-only properties are ignored.
            </summary>
            <param name="prefix">The prefix that was passed in to <see cref="M:SolaceSystems.Solclient.Messaging.FlowProperties.FromDictionaryWithPrefix(System.Collections.Generic.IDictionary{System.String,System.String},System.String)"/></param>/// 
            <returns>Returns a new IDictionary instance</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.EndpointProperties">
            <summary>
            EndpointProperties is used to specify the attributes of an endpoint resource
            when it is created on the appliance (explicitly or implicitly).
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointDiscardBehavior">
            <summary>
            Defines the endpoint behavior when a message cannot be added to an endpoint (for example,
            maximum quota exceeded). These options control the action of the appliance towards the publisher.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointDiscardBehavior.NotifySenderOn">
            <summary>
            Send publisher a message reject notification
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointDiscardBehavior.NotifySenderOff">
            <summary>
            Discard the message and acknowledge it 
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointAccessType">
            <summary>
            Defines the access type when provisioning a new <see cref="T:SolaceSystems.Solclient.Messaging.IEndpoint"/> on the appliance.
            This applies only to Endpoints of type durable Queues.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointAccessType.NonExclusive">
            <summary>
            Each <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> bound receives messages in a round robin fashion. This is used for shared queues.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointAccessType.Exclusive">
            <summary>
            The first <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> to bind receives the stored messages on the Endpoint.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermissionToCSDKValues">
            <summary>
            Used when mapping EndpointPermission enum values to C API permission.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermission">
            <summary>
            Defines what permissions are granted for sessions initiated by users other than the
            owner of the Endpoint (all others).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermission.None">
            <summary>
            No permission on the endpoint.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermission.ReadOnly">
            <summary>
            EndpointPermission to read-only.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermission.Consume">
            <summary>
            EndpointPermission to read and acknowledge messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermission.ModifyTopic">
            <summary>
            EndpointPermission to modify the topic, in addition to Consume privileges.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermission.Delete">
            <summary>
            EndpointPermission to deprovision or delete, in addition to ModifyTopic privileges.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.EndpointProperties.PROPERTY">
            <summary>
            Enum of public Endpoint properties.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.PROPERTY.MaxMsgSize">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.EndpointProperties.MaxMsgSize"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.PROPERTY.Quota">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.EndpointProperties.Quota"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.PROPERTY.AccessType">
            <summary>
            <see cref="T:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointAccessType"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.PROPERTY.DiscardBehavior">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.EndpointProperties.DiscardBehavior"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.PROPERTY.Permission">
            <summary>
            <see cref="T:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermission"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.PROPERTY.RespectsMsgTTL">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.EndpointProperties.RespectsMsgTTL"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.PROPERTY.MaxMsgRedelivery">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.EndpointProperties.MaxMsgRedelivery"/>
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY">
            <summary>
            From CCSMP 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_ID">
            <summary>
            The type of endpoint to name. The valid values are ::SOLCLIENT_ENDPOINT_NAME_PROP_QUEUE, 
            and ::SOLCLIENT_ENDPOINT_NAME_PROP_TE. Default: <see cref="F:SolaceSystems.Solclient.Messaging.EndpointProperties.ENDPOINT_ENTITY.TE"/> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_NAME">
            <summary>
            The name of the queue or topic endpoint. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_DURABLE">
            <summary>
            The durability of the endpoint to name. Default: true, which means the endpoint is durable.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_PERMISSION">
            <summary>
            The created entity's permission. A single character string. 
            Permissions can be admin = a, consume = c, read-only = r, none = n. Default: null (Appliance will apply its default permission)
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_ACCESSTYPE">
            <summary>
            When creating queues this property specifies whether it is exclusive or non-exclusive. Ignored for Topic Endpoints. 
            Default: null (Appliance will apply its default accesstype)
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_QUOTA_MB">
            <summary>
            Maximum quota in megabytes for the endpoint. 
            Default: null (Appliance will apply its default quota)
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_MAXMSG_SIZE">
            <summary>
            Maximum size in bytes for any one message stored in the Endpoint. 
            Default: null (Appliance will apply its default max message size)
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_RESPECTS_MSG_TTL">
            <summary>
            The endpoint recognizes message Time-to-Live and removes messages that expire.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_DISCARD_BEHAVIOR">
            <summary>
            When a message cannot be added to an endpoint (for example, maximum quota exceeded); 
            This property controls the action the appliance will perform towards the publisher.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.EndpointProperties.CSDKPROPERTY.ENDPOINT_MAXMSG_REDELIVERY">
            <summary>
            Number of redelivery attempts before the endpoint move a message to the DMQ.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.EndpointProperties.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.EndpointProperties.ENDPOINT_ENTITY">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointId">
            <summary>
            Two possibilities QUEUE or TE
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointDurable">
            <summary>
            The durability of the endpoint to name. Default: true which means the endpoint is durable.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointName">
            <summary>
            The name of the queue or topic endpoint.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.MaxMsgSize">
            <summary>
            The maximum message size in bytes that can be spooled on this Endpoint. 
            The default value is 10000000 bytes.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.Quota">
            <summary>
            Sets the maximum spool quota in MB (1 MB = 1000000 bytes) for the Endpoint. 
            When null, the default value on the appliance is used (4000 MB).
            The valid range is within [0 ...60000] MB.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.AccessType">
            <summary>
            The access type determines the message delivery policies when more than one
            Flow is bound to the Endpoint. See <see cref="T:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointAccessType"/> for the meaning of each access type.
            Applies only to durable endpoints of type <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>.
            When null, the default value on the appliance is used (default: <see cref="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointAccessType.Exclusive"/>).
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.DiscardBehavior">
            <summary>
            Specifies the behavior of the appliance when a message cannot be added to an endpoint 
            (for example, maximum quota exceeded). This property controls the action the appliance 
            will perform towards the publisher.
            <p>
            When null, the default value of the appliance is used.
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.Permission">
            <summary>
            Permissions that can be granted to users other than the owner of the Endpoint (all others).
            When null, the default value on the appliance is used (default: <see cref="F:SolaceSystems.Solclient.Messaging.EndpointProperties.EndpointPermission.None"/>).       
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.RespectsMsgTTL">
            <summary>
            The endpoint recognizes message Time-to-Live and removes messages that expire. - Default: false.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.EndpointProperties.MaxMsgRedelivery">
            <summary>
            Number of redelivery attempts before the endpoint move a message to the DMQ.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.EndpointProperties.ToString">
            <summary>
            Returns a string representation.
            </summary>
            <returns>Returns a string representation</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SolLogLevel">
            <summary>
            Log Level
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SolLogLevel.Emergency">
            <summary>
            Level not used by the API.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SolLogLevel.Alert">
            <summary>
            Level not used by the API.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SolLogLevel.Critical">
            <summary>
            A serious error that can make the API unusable.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SolLogLevel.Error">
            <summary>
            An unexpected condition within the API that can affect its operation.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SolLogLevel.Warning">
            <summary>
            An unexpected condition within the API that is not expected to affect its operation.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SolLogLevel.Notice">
            <summary>
            Significant informational messages about the normal operation of the API. Never output in the normal process of sending or receiving a message from the appliance.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SolLogLevel.Info">
            <summary>
            Informational messages about the normal operation of the API. These can include information related to sending or receiving messages from the appliance.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SolLogLevel.Debug">
            <summary>
            Debugging information generally useful to API developers (very verbose).
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ContextFactoryProperties">
            <summary>
            Defines Context Factory properties.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.Clone">
            <summary>
            This method creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY">
            <summary>
            An enum list of Context Factory properties.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.DBQuantaSize_0">
            <summary>
            The size of data buffers in the pool of smallest buffers. 
            The valid range is > 0. Default: 10240 bytes
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.DBQuantaSize_1">
            <summary>
            The size of data buffers in the 2nd pool of buffers. The valid range is > 0. 
            Default: 32768 bytes
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.DBQuantaSize_2">
            <summary>
            The size of data buffers in the 3rd pool of buffers. The valid range is > 0. 
            Default: 65536 bytes
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.DBQuantaSize_3">
            <summary>
            The size of data buffers in the 4th pool of buffers. 
            The valid range is > 0. Default: 262144 bytes
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.DBQuantaSize_4">
            <summary>
            The size of data buffers in the 5th (last) pool of buffers. 
            The valid range is > 0. Default: 1048576 bytes
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.MaxPoolMemory">
            <summary>
            The maximum amount of memory the API can save in its data and message pools. 
            Once it reaches this size, data blocks are released back to heap and are not kept in a API pool.
            Default: 1073741824 bytes
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.GssLibraryName">
            <summary>
            The GSS Kerberos library name.
            Default: Operating system dependent:
            <list type="">
            <item><i>libgssapi_krb5.so.2</i> for Linux</item>
            <item><i>mech_krb5.so.1</i> for Solaris</item>
            <item><i>secur32.dll</i> for Windows</item>
            </list>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.TlsLibraryName">
            <summary>
            The TLS (Transport Layer Security) and SSL (Secure Sockets Layer) library name.
            Default: Operating system dependent:
            <list type="">
            <item><i>libssl.so</i> for Unix (including Linux and AIX)</item>
            <item><i>libssl.dylib</i> for MacOSX</item>
            <item><i>SSL1$LIBSSL_SHR.EXE</i> for OpenVMS</item>
            <item><i>ssleay32.dll</i> for Windows</item>
            </list>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.CryptoLibraryName">
            <summary>
            The Cryptography library name, this library contains ciphers and algorithms used by <see cref="F:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.PROPERTY.TlsLibraryName"/>
            Default: Operating system dependent:
            <list type="">
            <item><i>libcrypto.so</i> for Unix (including Linux and AIX)</item>
            <item><i>libcrypto.dylib</i> for MacOSX</item>
            <item><i>SSL1$LIBCRYPTO_SHR.EXE</i> for OpenVMS</item>
            <item><i>libeay32.dll</i> for Windows</item>
            </list>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.LogToConsoleError">
            <summary>
            Logs events to Console's error.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.LogDelegate">
            <summary>
            Log info delegate.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.LoggerFactoryClassName">
            <summary>
            Represents the fully-qualified class name of the logger factory,
            which is used to further specialize logging.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.SolClientLogLevel">
            <summary>
            An unmanaged SolClient API logging error level.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.DBQuantaSize_0">
            <summary>
            The size of data buffers in the pool of smallest buffers. The valid range is > 0. 
            Default: 10240 bytes
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.DBQuantaSize_1">
            <summary>
            The size of data buffers in the second pool of buffers. The valid range is > 0. 
            Default: 32768 bytes
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.DBQuantaSize_2">
            <summary>
            The size of data buffers in the third pool of buffers. The valid range is > 0. 
            Default: 65536 bytes
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.DBQuantaSize_3">
            <summary>
            The size of data buffers in the fourth pool of buffers. The valid range is > 0. 
            Default: 262144 bytes
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.DBQuantaSize_4">
            <summary>
            The size of data buffers in the fifth pool of buffers. The valid range is > 0. 
            Default: 1048576 bytes
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.MaxPoolMemory">
            <summary>
            The maximum amount of memory the API can save in its data and message pools. 
            Once it reaches this size, datablocks are released back to heap and are not kept in a API pool. 
            Default: 1073741824 bytes
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.GssLibraryName">
            <summary>
            The GSS Kerberos library name.
            Default: Operating system dependent:
            <list type="">
            <item><i>libgssapi_krb5.so.2</i> for Linux</item>
            <item><i>mech_krb5.so.1</i> for Solaris</item>
            <item><i>secur32.dll</i> for Windows</item>
            </list>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.TlsLibraryName">
            <summary>
            The TLS (Transport Layer Security) and SSL (Secure Sockets Layer) library name.
            Default: Operating system dependent:
            <list type="">
            <item><i>libssl.so</i> for Unix (including Linux and AIX)</item>
            <item><i>libssl.dylib</i> for MacOSX</item>
            <item><i>SSL1$LIBSSL_SHR.EXE</i> for OpenVMS</item>
            <item><i>ssleay32.dll</i> for Windows</item>
            </list>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.CryptoLibraryName">
            <summary>
            The Cryptography library name, this library contains ciphers and algorithms used by  <see cref="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.TlsLibraryName"/>
            Default: Operating system dependent:
            <list type="">
            <item><i>libcrypto.so</i> for Unix (including Linux and AIX)</item>
            <item><i>libcrypto.dylib</i> for MacOSX</item>
            <item><i>SSL1$LIBCRYPTO_SHR.EXE</i> for OpenVMS</item>
            <item><i>libeay32.dll</i> for Windows</item>
            </list>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.XpeProperties">
            <summary>
            Defines Xpe properties; passed into Xpe factory method.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.XpeProperties.NULL_CONSUMERID">
            <summary>
            Null consumer id
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.XpeProperties.Expression">
            <summary>
            The xpath expression to subscribe to.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.XpeProperties.IsFilter">
            <summary>
            If this value is set true, the Xpe becomes a filter.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.XpeProperties.ConsumerId">
            <summary>
            The consumer id associated with the Xpe; this is used mainly
            to de-multiplex at the subscriber. The default is NULL_CONSUMERID.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.XpeProperties.Namespaces">
            <summary>
            Represents the manifest of namespaces used in this key. Key is the namespace
            alias and the value is its id (usually a uri).
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.XpeProperties.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance. 
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.XpeProperties.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.TopicProperties">
            <summary>
            Used to create Topics with further specialized options.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.TopicProperties.Topic">
            <summary>
            String representation of the topic.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.TopicProperties.IsReceiveAllDeliverToOne">
            <summary>
            This flag, when true in a subscription ADD request, overrides the <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.DeliverToOne"/> property in a message. 
            If the topic in the message matches, it is delivered to clients with <see cref="P:SolaceSystems.Solclient.Messaging.TopicProperties.IsReceiveAllDeliverToOne"/>
            set, in addition to any one client that is subscribed to the topic without this override.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.TopicProperties.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance. 
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.TopicProperties.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.MessageCacheStatus">
            <summary>
            The cache status of a received message.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageCacheStatus.Invalid">
            <summary>
            Invalid message.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageCacheStatus.Live">
            <summary>
            Live message.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageCacheStatus.Cached">
            <summary>
            A cached message.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageCacheStatus.Suspect">
            <summary>
            A cached message that is deemed suspect.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.MessageDump">
            <summary>
            Options to control the message dump utility. Used in <see cref="M:SolaceSystems.Solclient.Messaging.IMessage.Dump(SolaceSystems.Solclient.Messaging.MessageDump)"/>.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageDump.Brief">
            <summary>
            Display only the length of the binary attachment, xml attachment, and user property map.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageDump.Full">
            <summary>
            Display the entire message.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IMessage">
            <summary>
            The super interface of any message sent or received over this messaging
            API.
            <p>
            Client applications must dispose of messages (by calling Dispose()) as soon as they are done with them.
            </p>
            <p>
            <strong>Note:</strong> Unless indicated otherwise, mutable IMessage's properties are accessed and 
            assigned by <strong>value</strong> and not by <strong>reference</strong>. 
            In other words, the property's getter returns a copy of the IMessage's mutable internal state 
            and its setter takes a copy of the passed in mutable value.
            </p>    
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.BinaryAttachment">
            <summary>
            The binary attachment part of the message.
            If not present, <c>null</c> is returned to the user.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.UserData">
            <summary>
            The user data part of the message (maximum: 36 bytes).
            Returns <c>null</c> if not present.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.XmlContent">
            <summary>
            The XML content part of the message.
            Returns <c>null</c> if not present.          
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.Destination">
            <summary>
            The Destination to send to or receive on.
            For SolOS-Topic Routing (TR) it must be ITopic or IQueue (null is not a valid value when sending
            the message).
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.DeliveryMode">
            <summary>
            A setter/getter for <c>MessageDeliveryMode</c>.
            </summary>
            <remarks>
            Can be used as an identifier in a message selector.
            </remarks>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.DeliverToOne">
            <summary>
            A setter/getter for the Deliver-To-One (DTO) property on a message
            with a Delivery mode of <see cref="F:SolaceSystems.Solclient.Messaging.MessageDeliveryMode.Direct"/>. When a message has the DTO property
            set, it can to be delivered only to one client.
            For a Guaranteed Delivery message (see <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.DeliveryMode"/>), this behavior only applies
            to the "demoted" direct copy of this message.
            <p>
            This property is only supported by appliances running SolOS-TR.
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.UserCos">
            <summary>
            A setter/getter for User Class of service.
            <p>
            The Class of Service has different semantics for direct and guaranteed messages.
            For direct messaging, it determines the WRR weight for the message. For guaranteed messaging, it indicates
            the discard eligibility of the message if the endpoint is congested (see <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.LowPriorityMsgCongestion"/>)
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.DiscardIndication">
            <summary>
            Returns <c>true</c> if one or more messages have been discarded prior 
            to the current message, otherwise it returns <c>false</c>. 
            Indicates congestion discards only and is not affected by message eliding.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.Redelivered">
            <summary>
            Applies only when DeliveryMode is MessageDeliveryMode.PERSISTENT or 
            MessageDeliveryMode.NON_PERSISTENT.
            Indicates if the message has been delivered by the appliance to the API before.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.ConsumerIdList">
            <summary>
            Applies to received messages only.
            Returns the Conusmer Id list, null if the received message has none.
            
            Consumer IDs are only used with XML content subscriptions, not with topic subscriptions.
            When XML subscriptions are applied with consumer IDs, received messages contain a list of
            the consumer IDs of all XML subscriptions that were a match to that received message.
            This allows the application to know which of its XML subscriptions were a match to 
            the received message.
            
            If not present, null is returned.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.ADMessageId">
            <summary>
            Applies to received messages only with DeliveryMode MessageDeliveryMode.PERSISTENT or
            MessageDeliveryMode.NON_PERSISTENT.
            Represents the message Id of a Guaranteed message. The message ID is only to be used for
            the purpose of acknowledgements. No other meaning should be inferred from the value of the
            message ID. Messages are acknowledged by calling <see cref="M:SolaceSystems.Solclient.Messaging.IFlow.Ack(System.Int64)"/>
            If not available 0 is returned.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.CorrelationKey">
            <summary>
            Applies to Guaranteed messages (where DeliveryMode is Persistent or Non-persistent). 
            When set on a message, the correlation key is
            returned in a message acknowledgment event.
            If not present, null is returned. CorrelationKey is local to the current application, 
            it is not transmitted on the wire.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.CorrelationId">
             <summary>
             Gets/sets the CorrelationId.
            
             If not present, <c>null</c> is returned.
             </summary>
             <remarks>
             The CorrelationId is user-defined,
             carried end-to-end, and can also be matched in a selector, but otherwise is not relevant
             to the event broker.  The CorrelationId may be used for peer-to-peer message synchronization.
            
             In JMS applications, this field is carried as the JMSCorrelationID Message Header Field.
             </remarks>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.HttpContentType">
            <summary>
             The HTTP Content Type.
             If not present, <c>null</c> is returned.
             </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.HttpContentEncoding">
            <summary>
             The HTTP Content Encoding.
             If not present, <c>null</c> is returned.
             </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.ReceiverTimestamp">
            <summary>
            Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).
            Returns -1 if not present.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.SenderTimestamp">
            <summary>
            Gets the sender timestamp (in milliseconds, from midnight, January 1, 1970 UTC).
            Returns -1 if not present or set.
            </summary>
            <remarks>
            Can be used as an identifier in a message selector.
            </remarks>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.ReplyTo">
            <summary>
            Represents the reply-to destination.
            Returns <c>null</c> if not present.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.GetDestinationTopicSuffix(SolaceSystems.Solclient.Messaging.ISession)">
            <summary>
            A getter for the suffix of the topic string. If the received message 
            contains a topic destination and the topic begins with the session's topic 
            prefix, this method returns the string following the '/' delimiter that 
            terminates the topic prefix.
            Returns null if not present.
            </summary>
            <param name="session">Session to get the topic prefix from</param>
            <returns>The topic string with the session topic prefix removed. 
            Returns null if the topic does not have the session prefix.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.SetReplyToSuffix(SolaceSystems.Solclient.Messaging.ISession,System.String)">
            <summary>
            Appends an application-specific suffix to the default topic destination for the session.
            When the session is established, a unique topic destination is created for the session. This
            topic is generated by the appliance, and the API subscribes to a wildcard extended topic that is
            derived by appending './>' to the unique topic destination. 
            </summary>
            <param name="replyToSuffix">Suffix to append to the default topic destination for the session.</param>
            <param name="session">Session to get the topic prefix from.</param>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.SenderId">
             <summary>
             Gets/sets the SenderId.
            
             Returns <c>null</c> if not present.
             </summary>
             <remarks>
             The SenderId is user-defined,
             carried end-to-end, and can also be matched in a selector, but otherwise is not relevant
             to the event broker.
            
             Setting the SenderId overrides the session property <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.IncludeSenderId"/>
             and forces the specified SenderID into the Solace-defined fields for each message.
             </remarks>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.SequenceNumber">
             <summary>
             Gets/sets the SequenceNumber.
            
             Returns <c>null</c> if not present.
             </summary>
             <remarks>
             A sequence number is automatically included (if not already present) in
             the Solace-defined fields for each message sent if the session property
             <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GenerateSequenceNumber"/> is enabled.
            
             This method allows the application to retrieve the value that
             is the SequenceNumber.  The SequenceNumber is user-defined,
             carried end-to-end, and can also be matched in a selector, but otherwise is not relevant
             to the event broker.
             </remarks>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.TopicSequenceNumber">
            <summary>
            Represents the Topic Sequence Number assigned by the appliance or the peer. Returns null if none is present
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.ApplicationMessageId">
             <summary>
             Gets/sets the ApplicationMessageId.
            
             Returns <c>null</c> if not present.
             </summary>
             <remarks>
             The ApplicationMessageId is user-defined,
             carried end-to-end, and can also be matched in a selector, but otherwise is not relevant
             to the event broker.
            
             In JMS applications, this field is carried as the JMSMessageID Message Header Field.
             </remarks>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.ApplicationMessageType">
             <summary>
             Gets/sets the ApplicationMessageType. 
            
             If not present, <c>null</c> is returned.
             </summary>
             <remarks>
             The ApplicationMessageType is user-defined,
             carried end-to-end, and can also be matched in a selector, but otherwise is not relevant
             to the event broker.
            
             In JMS applications, this field is carried as the JMSType Message Header Field.
             </remarks>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.CacheRequestId">
            <summary>
            Returns the request ID set in the cache request.
            Always null if CacheStatus is MessageCacheStatus.Live
            If not present -1 is returned
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.CacheStatus">
            <summary>
            Returns the MessageCacheStatus.        
            </summary>        
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.IsReplyMessage">
            <summary>
             Returns <c>true</c> if it is a reply message (reply to a request).
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.SetAsReplyMessage">
            <summary>
            Sets the reply attribute of the message.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.UserPropertyMap">
            <summary>
            Returns the user property map from the message's meta header. If no user property map is present in the
            message, this property is null. To create a new user property map use <see cref="M:SolaceSystems.Solclient.Messaging.IMessage.CreateUserPropertyMap"/> 
            instead.
            <p>
            After adding properties to this map, it must be closed; if not, it 
            is automatically closed after the associated message is sent, or disposed <see cref="T:System.IDisposable"/>.
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this map results in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/>
            error subcode.
            </p>      
            <p>
            As a consequence to the above note, when caching the reference to this map (to avoid creating a new temporary object with each access), 
            client applications should not use this reference after the associated message has been sent or disposed. 
            At that point the cached user property map reference is invalid, and a new user map reference is required by 
            calling IMessage.UserPropertyMap to access the user property map again.
            </p>
            </summary>
            <remarks>
            Do not set this value to the result of <see cref="M:SolaceSystems.Solclient.Messaging.IMessage.CreateUserPropertyMap"/>.  Doing so will cause the underlying structure to
            be disposed.  Instead, access the map this way:
            <code>
            IMessage msg = ContextFactory.Instance.CreateMessage();
            msg.CreateUserPropertyMap();
            msg.UserPropertyMap.AddString("message", "5");
            </code>
            </remarks>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.CreateUserPropertyMap">
            <summary>
            Creates a user property map (of type <see cref="T:SolaceSystems.Solclient.Messaging.SDT.IMapContainer"/>) in the meta header of a message.
            Any existing user property map is overwritten.
            After adding user properties to this map, it must be closed; if not, it 
            is automatically closed after the associated message is disposed <see cref="T:System.IDisposable"/>.
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this map results in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/>
            </p>
            </summary>
            <remarks>
            Do not set <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.UserPropertyMap"/> to the result of this method.  Doing so will cause the
            underlying structure to be disposed.  Correctly accessing the property map:
            <code>
            IMessage msg = ContextFactory.Instance.CreateMessage();
            msg.CreateUserPropertyMap();
            msg.UserPropertyMap.AddString("message", "5");
            </code>
            </remarks>
            <returns>The created user property map.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the method invocation fails.
            ReturnCode and ErrorInfo will be accessible from OperationErrorException
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.Expiration">
            <summary>
            The UTC time (in milliseconds, from midnight, January 1, 1970 UTC) when the message is to expire. 
            The expiration time is carried in the message when set to a non-zero value. 
            Expiration time is not included when this value is set to zero.
            <p>
            Setting this property has no effect if the <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.TimeToLive"/> is set in the same message. 
            The message expiration time is carried to clients that receive the message unmodified and does not affect the life cycle of the message.
            Set <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.TimeToLive"/> to a positive value to enforce message expiry in the network.
            When <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.TimeToLive"/> has a positive value, the Expiration is never carried in the message (defaulting to zero). However,
            it may be calculated and retrieved if the session property <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.CalculateMessageExpiration"/> is set to
            true.
            </p>
            <p>
            if message Expiration time is not set in the message and the session property
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.CalculateMessageExpiration"/> is set to true, the Expiration time
            is calculated based on the message's TimeToLive. When enabled, the Expiration time
            retrieved will be the UTC time when the message is sent plus the message's TimeToLive. The
            Expiration time for received messages will be the UTC time when the message was received
            plus the TimeToLive of the message at the time it was received.
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.TimeToLive">
            <summary>
            The number of milliseconds before the message is discarded or moved to a Dead Message Queue. 
            A value of 0 means the message never expires. The default value is zero.
            <p>
            Note that this property is only valid for Guaranteed Delivery messages (Persistent and Non-Persistent). 
            It has no effect when used in conjunction with other message types unless the message is promoted by the appliance to a Guaranteed Delivery message.
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.DMQEligible">
            <summary>
            Expired messages with this property set to true are moved to a Dead Message Queue when one is provisioned on the appliance.
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.AckImmediately">
            <summary>
            When the ACKImmediately property is set to true on an outgoing Guaranteed Delivery message, 
            it indicates that the appliance should ACK this message immediately upon receipt.
            <p>
            This property, when set by a publisher, may or may not be removed by the appliance prior to delivery
            to a consumer, so message consumers must not rely on this property being present.
            Setting this property on an outgoing direct message or on a received message has no effect.
            </p>
            Default: false
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.ElidingEligible">
            <summary>
            Setting this property to <c>true</c> indicates that this message should be eligible for eliding.
            </summary>
            <remarks>
            <p>
            Message eliding enables filtering of data to avoid transmitting every single update to a subscribing client. 
            It can be used to overcome slow consumers or any situation where a slower message rate is desired.
            </p>
            <p>
            Time-based eliding (supported in SolOS-TR) ensures that subscriber applications always receive only the most current update 
            of a published topic at a rate that they can manage. 
            By limiting the incoming message rate, a subscriber application is able to avoid a message backlog filled with outdated messages.
            </p>
            This property does not indicate whether the message was elided or even provide information
            about the subscriber's configuration (with regards to Message Eliding).
            </remarks>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.Priority">
            <summary>
            Represents the message priority.
            The valid value range is 0-255 with 0 as the lowest priority and 255 as the highest.
            Returns <c>null</c> if not present.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.DeliveryCount">
            <summary>
            Gives the message delivery count.
            <p>
            Throws OperationErrorException when delivery count is not support on the delivery of the message.
            </p>
            <p>Note messages from browser flows will have the delivery of the next
            consumer delivery not the current message delivery count from the endpoint.
            </p>
            </summary>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when delivery count is not supported on the message.
            </exception>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IMessage.ReplicationGroupMessageId">
            <summary>
            Represents the Replication Group Message ID (RGMID) of the message for guaranteed message set by the router can be null.
            </summary>
            <returns>
            A <see cref="T:SolaceSystems.Solclient.Messaging.IReplicationGroupMessageId"/> instance or null if not present.
            </returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.Reset">
            <summary>
            Release all memory associated with this message, returning
            it to its original state, as if it has just been created.
            </summary>
            <returns></returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the method invocation fails.
            ReturnCode and ErrorInfo are accessible from OperationErrorException.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.Dump">
            <summary>
            Returns a string representation of the contents of a message in human-readable form. 
            </summary>
            <returns>String represenation of the entire message</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.Dump(SolaceSystems.Solclient.Messaging.MessageDump)">
            <summary>
            Returns a string representation of the contents of a message in human-readable form. 
            Dump(MessageDump.Full) is equivalent to calling Dump().
            </summary>
            <param name="dumpMode"><see cref="F:SolaceSystems.Solclient.Messaging.MessageDump.Brief"/> or <see cref="F:SolaceSystems.Solclient.Messaging.MessageDump.Full"/></param>
            <returns>String representation of a message in either brief fromat or full format</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.GetBinaryAttachment">
            <summary>
            Gets the binary attachment part of the message.
            If not present, null is returned to the user.
            </summary>
            <remarks> 
            This method is not CLS-compliant; it is available for convenience.
            The CLI-compliant equivalent to this method is <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.BinaryAttachment"/> getter.
            </remarks>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.SetBinaryAttachment(System.SByte[])">
            <summary>
            Sets the binary attachment part of the message.
            </summary>
            <param name="binaryAttachment"></param>
            <remarks> 
            This method is not CLS-compliant; it is available for convenience.
            The CLI-compliant equivalent to this method is <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.BinaryAttachment"/> setter.
            </remarks>       
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.GetXmlContent">
            <summary>
            Gets the XML content part of the message.
            Returns null if not present.
            </summary>
            <returns>An array of bytes.</returns>
            <remarks> 
            This method is not CLS-compliant; it is available for convenience.
            The CLI-compliant equivalent to this method is <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.XmlContent"/> getter.
            </remarks>        
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.SetXmlContent(System.SByte[])">
            <summary>
            Sets the XML content part of the message.
            </summary>
            <param name="xmlContent"></param>
            <remarks> 
            This method is not CLS-compliant; it is available for convenience.
            The CLI-compliant equivalent to this method is <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.XmlContent"/> setter.
            </remarks>        
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.GetUserData">
            <summary>
            Gets the user data part of the message.
            Returns null if not present.
            </summary>
            <returns>An array of bytes.</returns>
            <remarks> 
            This method is not CLS-compliant; it is available for convenience.
            The CLI-compliant equivalent to this method is <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.UserData"/> getter.
            </remarks>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessage.SetUserData(System.SByte[])">
            <summary>
            Sets the user data part of the message.
            </summary>
            <param name="userData"></param>
            <remarks> 
            This method is not CLS-compliant; it is available for convenience.
            The CLI-compliant equivalent to this method is <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.UserData"/> setter.
            </remarks>         
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IReplicationGroupMessageId">
            <summary>
            Interface for replication group message ids.
            Can be used to specify a <see cref="T:SolaceSystems.Solclient.Messaging.IReplayStartLocation"/> for the message after this id.
            The <see cref="T:SolaceSystems.Solclient.Messaging.IReplayStartLocation"/> is set in the corresponding flow property <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocationEx"/>.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IReplicationGroupMessageId.ToString">
            <summary>
            Returns a string that can later be passed to <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateReplicationGroupMessageId(System.String)"/>
            to create a ReplicationGroupMessageId object.
            </summary>
            <returns>
            A serialized string of the IReplicationGroupMessageId.
            </returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IReplicationGroupMessageId.Compare(SolaceSystems.Solclient.Messaging.IReplicationGroupMessageId)">
            <summary>
            Compares one id instance to another.
            </summary>
            <param name="otherId">The other id instance to compare to.</param>
            <returns>
            Returns <see cref="T:System.Int32"/> A value that indicates the relative order of the objects being compared. The return value has these meanings:
            <list type="">
            <item>
            less then 0, This instance precedes otherId in the sort order.
            </item>
            <item>
            0, This instance occurs in the same position in the sort order as otherId.
            </item>
            <item>
            greater then 0, This instance follows otherId in the sort order.
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException">When otherId paraemter is null.</exception>
            <exception cref="T:System.ArgumentException">
            When otherId object parameter is not created from the api.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            When otherId comparison operation fails. 
            Possible sub-codes:
            <list type="">
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessageIdNotComparable"/>, When other id is not comparable.
            </item>
            </list>
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IContext">
            <summary>
            A context represents a processing
            context in which session instances are created. It is used to organize
            communications between an application and a Solace appliance. Contexts act
            as containers for configuring one or more sessions and handling session-related events.
            <p>
            A context is an active object that initializes and manages its own thread. The life
            cycle of the owned thread is bound to the life cycle of the context. A
            context-owned thread drives I/O and notification events of registered delegates of
            the context.
            <p>
            All callbacks (or delegate invocation) from the API to the application, message receive callbacks, 
            event callback, and timer callbacks, run from the context thread. Additionally the context
            thread must run to detect relief from flow control and unblock waiting application threads. The context thread 
            must run to complete the session connection sequence and unblock applications waiting for connection complete. The
            context thread must run to unblock applications waiting for confirmation on subscription requests.
            Consequently, applications must not block in callback/delegate routines. Waiting in callback routines can deadlock the application 
            or at a minimum severely degrade receive performance. 
            Deferring SolClient processing by running for excessively long 
            periods of time in the callback routines prevents the API from unblocking other application threads that might be 
            waiting for confirmation of sent messages, or blocked in flow control situations.
            </p>
            The API typically detects when the application has re-entered the API from a callback and will never block. 
            Consequently applications can expect to see <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> return codes when making API calls from a callback routine, even 
            if the function call would be blocking in other threads. Generally if a function could block because of TCP flow control, 
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> is returned when that function is called from a callback, irrespective of the session property 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/>. Further if the application explicitly sets WaitForConfirm on a subscription 
            method (subscribe or unsubscribe) API call made from a callback routine, that function call will return <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL"/> 
            and set the subcode to <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamConflict"/>  
            </p>
            <p>
            <strong>Important: </strong>
            Disposing a context <b>must not</b> be performed in a context callback delegate
            for the context being disposed. This includes all sessions(<see cref="T:SolaceSystems.Solclient.Messaging.ISession"/>), flows(<see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/>) and timers (<see cref="T:SolaceSystems.Solclient.Messaging.TimerTask"/>) on
            the context.
            </p>
            Context instances are created through a factory method in ContextFactory. A
            context has the following responsibilities:
            <item>
            Initialization and management of the context-owned thread.
            </item>
            <item>
            Factory and container of session instances.
            </item>
            Note that IContext instances can only be created by the <see cref="T:SolaceSystems.Solclient.Messaging.ContextFactory"/>.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IContext.Start">
            <summary>
            Starts the context if it is not already started or disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if the context is already disposed (terminal state).
            </exception>     
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IContext.Stop">
            <summary>
            Stops the context if it is not already stopped or disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if the context is already disposed (terminal state).
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IContext.CreateSession(SolaceSystems.Solclient.Messaging.SessionProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.SessionEventArgs})">
            <summary>
            Creates a session instance.
            Session properties to customize the session, and message receive and the session
            event delegates must be provided for the session. The message receive delegate is
            invoked for each received message on this session. The session event delegate is
            invoked when session events occur, such as the session going up or down. Both
            delegates are invoked in the context of the context thread to which this session belongs.
            <p>
            <strong>Note:</strong> disposing the corresponding context (<see cref="T:SolaceSystems.Solclient.Messaging.IContext"/>) 
            or any of its contained context timers (<see cref="T:SolaceSystems.Solclient.Messaging.TimerTask"/>), sessions (<see cref="T:SolaceSystems.Solclient.Messaging.ISession"/>) 
            or flows (<see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/>) 
            <b>must not</b> be performed from within the registered delegates (messageEventHandler or sessionEventHandler).
            </p> 
            </summary>
            <param name="props">Defined in SessionProperties.</param>
            <param name="messageEventHandler">A delegate for delivered messages.
            </param>
            <param name="sessionEventHandler">A delegate for session events.
            <p>
            Client applications can call <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetLastSDKErrorInfo"/> from within the session event delegate 
            to get more info on the type of error condition reported by <see cref="T:SolaceSystems.Solclient.Messaging.SessionEventArgs"/>.       
            </p>
            </param>
            <returns>A new ISession instance.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when unable to create the session. Possible sub-codes:
            <list type="">
            <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfResources"/>: When resources are exhausted </item>
            <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamConflict"/>: When invalid combinations of <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties"/> property values are detected.</item>
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if the context is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>       
            <exception cref="T:System.ArgumentException">
            Thrown when invalid values of <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties"/> property values are
            detected.
            </exception>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IContext.Sessions">
            <summary>
            Returns a read-only snapshot of the current active (not yet disposed) sessions created within this context.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IContext.Properties">
            <summary>
            Returns a read-only copy of the ContextProperties used to create this session.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ISession">
            <summary>
            Represents a messaging API session.
            When a context is established, one or more sessions can be created within that context.
            A session (modeled as an interface called ISession) creates a client connection
            to the Solace appliance for sending and receiving messages. It also provides the
            following:
            <item>Connect and disconnect on demand.</item>
            <item>Factory of <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> instances.</item>
            <item>Factory of temporary destinations (see <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/>) .</item>
            <item>Factory of non-durable endpoints (see <see cref="T:SolaceSystems.Solclient.Messaging.IDurableTopicEndpoint"/> and <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>) .</item>
            <item>Factory of cache session instances (see <see cref="T:SolaceSystems.Solclient.Messaging.Cache.ICacheSession"/>) .</item>
            <item>Ability to make request/replies.</item>
            <item>Subscribe and unsubscribe.</item>
            <item>Ability to update and retrieve session properties. </item>
            <item>Ability to retrieve session statistics (see <see cref="T:SolaceSystems.Solclient.Messaging.IStatsAccessible"/>).</item>
            
            <p>
            Disposing a session <b>must not</b> be performed in a session callback delegate
            for the session being disposed. This includes all flows on the session.
            </p>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Connect">
            <summary>
            Connects the specified session. A session connection can be carried out in a blocking or
            non-blocking mode, depending upon the session property ConnectBlocking.
            <p>
            In blocking mode, the calling thread is blocked until either the session connection
            attempt succeeds or is determined to have failed. If the connection succeeds, SOLCLIENT_OK
            is returned. If the session could not connect, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY"/> is returned. 
            </p>
            <p>
            In non-blocking mode, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> is returned upon 
            a successful session connect request, and the connection attempt proceeds in the background. 
            In both non-blocking and blocking mode, a session event is generated for the session:
            <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.UpNotice"/>, if the session successfully connects; or
            <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.ConnectFailedError"/>, if the session fails to connect.
            </p>
            <p>
            For blocking mode, the session event is issued before the call to <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/>
            returns. For non-blocking mode, the timing is undefined (that is, it could occur before
            or after the call returns, but it is typically after). A session connection timer, controlled
            by the session property <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectTimeoutInMsecs"/>, controls the maximum amount of time a session
            connect attempt lasts for. If this amount time is exceeded, a
            <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.ConnectFailedError"/> event is issued for the session. 
            </p>
            <p>
            If there is an error when <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/> is invoked, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL"/> is returned, 
            and a session event is not subsequently issued. Therefore, the caller must check for a return code of
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL"/> if it has logic that depends upon a subsequent session event to be issued.
            For a non-blocking session connect invocation, if the session connect attempt eventually
            fails, the last error information to indicate the reason for the failure cannot be determined
            by the calling thread, rather it must be discovered through the session event delegate (and
            <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetLastSDKErrorInfo"/> can be called in the session event delegate to get further information).
            For a blocking session connect invocation, if the session connect attempt does not return
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/>, then the calling thread can determine the failure reason by immediately calling
            <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetLastSDKErrorInfo"/>.
            </p>
            </summary>
            <returns> 
            When successful it returns <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> if <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ConnectBlocking"/> is false
            or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> otherwise.
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the Connect operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.LoginFailure"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessageVPNNotAllowed"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessageVPNUnavailable"/> 
            </item> 
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientUserNameIsShutdown"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.DynamicClientsNotAllowed"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientNameAlreadyInUse"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidVirtualAddress"/> 
            </item> 
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientDeleteInProgress"/> 
            </item>
                     
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TooManyClients"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ControlOther"/> 
            </item>
            
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Disconnect">
            <summary>
            Disconnects the session.
            </summary>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful.
            </returns>        
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the Disconnect operation fails.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>     
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Send(SolaceSystems.Solclient.Messaging.IMessage)">
            <summary>
            Sends a message over the session.
            </summary>
            <param name="message">an IMessage instance</param>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful.
            Or
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> if the message cannot be accepted by the API immediately.
            The API signals its readiness to accept messages through a <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.CanSend"/> event type.      
            <p>
            <strong>Note:</strong> returning <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> means that the message has been successfully copied to the underlying
            transport which does not guarantee successful delivery to the Solace appliance. In the case of persistent or non-persistent messages, the
            application will receive a subsequent <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.Acknowledgement"/> event for all messages (persistent and non-persistent) 
            successfully delivered to the Solace appliance. For guaranteed(persistent or non-persistent) messages which cannot be accepted by the Solace 
            appliance (quota, permission or other delivery problems), a <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.RejectedMessageError"/> event will be generated.
            </p>   
            <strong>Special Buffering of Guaranteed Messages</strong>
            <p>
             Guaranteed messages (<c>MessageDeliveryMode.Persistent</c> or <c>MessageDeliveryMode.NonPersistent</c>) are
            assured by the protocol between the client and the Solace message-router.  To make developers' task easier,
            guaranteed messages are queued for delivery in many instances:
            <list type="">
            <item> While transport (TCP) flow controlled.</item>
            <item> While message-router flow controlled.</item>
            <item> While sessions are connecting or reconnecting.</item>
            <item> While sessions are disconnected or down.</item>
            </list></p>
            <p>
            The SDK will buffer up to a publishers window size (<see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ADPublishWindowSize"/> ) of guaranteed messages before
            ISession.Send() will either block (when <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/> is enabled) or return <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>
            (on active sessions) or return <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY"/> (on disconnected or reconnecting sessions).</p>
            <p>
            For the most part this is desired behavior. Transient sessions failures do not require special handling in applications. When
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetries"/> is non-zero, the underlying transport will automatically reconnect and the publishing
            application does not need to concern itself with special handling for the transient reconnecting state.</p>
            </returns>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the Send operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InsufficientSpace"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TopicTooLarge"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TopicMissing"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UserDataTooLarge"/> 
            </item> 
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNameTooLarge"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNameInvalidMode"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNameTopicConflict"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxTotalMessageSizeExceeded"/> 
            </item> 
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.DTOInvalid"/> 
            </item>
                     
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TooManyClients"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidSessionOperation"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item>
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>  
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if message is null.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Send(SolaceSystems.Solclient.Messaging.IMessage[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Sends an array of messages over the session, attempting to send them all at once.
            <p>
            Note that the number of messages which can be sent through a single call to this method is limited to <strong>50</strong>.
            </p>
            <p>
            For sessions in which Send(IMessage[],...) is used, it is recommended that <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.TcpNoDelay"/> 
            be set to true (it is enabled by default).
            In this case, multiple messages are sent at once onto a TCP connection, and therefore
            there is no need to have the operating system carry out the TCP delay algorithm to cause fuller IP packets.
            </p>
            </summary>
            <param name="messages">Array of IMessage instances. If duplicate IMessage entries were used in the messages array, 
            they <strong> must not</strong>be Guaranteed messages, in this case an ArgumentOutOfRangeException 
            is thrown </param>
            <param name="offset">Offset into the array of first message to send.</param>
            <param name="length">Number of messages to send, from offset.</param>
            <param name="messagesSent">Returns the number of messages that were sent.</param>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful and all messages have been sent
            Or
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> if some messages cannot be accepted by the API immediately.
            The API signals its readiness to accept messages through a  <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.CanSend"/> event type. 
            The messagesSent parameter contains the number of messages sent.
            <p>
            <strong>Note:</strong> returning <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> means that the messages have been successfully copied to the underlying
            transport which does not guarantee successful delivery to the Solace appliance. In the case of persistent or non-persistent messages, the
            application will receive a subsequent <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.Acknowledgement"/> event for all messages (persistent and non-persistent) 
            successfully delivered to the Solace appliance. For guaranteed(persistent or non-persistent) messages which cannot be accepted by the Solace 
            appliance (quota, permission or other delivery problems), a <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.RejectedMessageError"/> event will be generated.
            </p>  
            <strong>Special Buffering of Guaranteed Messages</strong>
            <p>
             Guaranteed messages (<c>MessageDeliveryMode.Persistent</c> or <c>MessageDeliveryMode.NonPersistent</c>) are
            assured by the protocol between the client and the Solace message-router.  To make developers' task easier,
            guaranteed messages are queued for delivery in many instances:
            <list type="">
            <item> While transport (TCP) flow controlled.</item>
            <item> While message-router flow controlled.</item>
            <item> While sessions are connecting or reconnecting.</item>
            <item> While sessions are disconnected or down.</item>
            </list></p>
            <p>
            The SDK will buffer up to a publishers window size (<see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ADPublishWindowSize"/> ) of guaranteed messages before
            ISession.Send() will either block (when <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/> is enabled) or return <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>
            (on active sessions) or return <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY"/> (on disconnected or reconnecting sessions).</p>
            <p>
            For the most part this is desired behavior. Transient sessions failures do not require special handling in applications. When
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ReconnectRetries"/> is non-zero, the underlying transport will automatically reconnect and the publishing
            application does not need to concern itself with special handling for the transient reconnecting state.</p>
            <p>
            Special consideration is required for applications using host lists. When a reconnect occurs on a different host, an application publishing
            guaranteed messages will receive the <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.DownError"/> event with the <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownFlowName"/> sub-code.
            When this occurs, any queued messages are flushed.  Messages published after this event has been raised will be queued then sent after a
            subsequent connect initiated by the application by calling <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/>.</p>
            <p>
            Multi-threaded applications should be aware that some, but not necessarily all, messages published on one thread may be flushed due to
            failed reconnect, as messages published after the <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.DownError"/> event are not flushed. If the application chooses
            to republish some or all unacknowledged messages after the send queue has been flushed there is a possibility
            that these old, republished messages may be queued after newly published messages.</p>
            <p>
            If the possibility of old messages after new messages is a concern, it is recommended that instead of calling
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/> on the session that has gone down, this session should instead be destroyed
            and a new session created to establish a new connection.</p>
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the Send operation fails, see <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Send(SolaceSystems.Solclient.Messaging.IMessage)"/> for possible sub-codes.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>  
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if messages is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if messages has zero-length, or <strong>duplicate</strong> Guaranteed Delivery IMessage entries were passed in
            messages.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.SendRequest(SolaceSystems.Solclient.Messaging.IMessage,SolaceSystems.Solclient.Messaging.IMessage@,System.Int32)">
             <summary>
             Send a Topic Request message. The application expects an end-to-end reply from the client that
             receives the request message. If the Reply-To destination in the UserProperties of the request message is
             not set, it defaults to the current session's ReplyTo destination.
             Leaving the replyTo destination unset and allowing the API to
             set the default replyTo destination is the easiest way to set a valid replyTo destination.
            
             When the responses are handled asynchronously (that is, the timeout parameter is zero), the application
             may set any replyTo destination. When the application needs to block and wait for the reply
             (that is, the timeout parameter is non-zero), the replyTo destination must be a topic that the
             application has subscribed to for Direct messages. 
            
             If timeoutInMsecs is zero, this method returns immediately upon successfully accepting the request message
             for transmission. Any replies sent back by the destination client are delivered to the
             ReplyTo Destination through the message receive delegate. In such a case, the reply tag is set (IsReplyMessage == true)
             on the response message. It is entirely the responsibility of the application to manage 
             asynchronous replies. Applications can use the CorrelationId message property on outgoing requests. 
             
             If the timeoutInMsecs parameter is non-zero, the function waits for the amount of time specified by timeoutInMsecs milliseconds before
             returning with <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_INCOMPLETE"/>. If the replyTo destination
             is set to an unsubscribed topic, or endpoint, a call to Session.SendRequest()
             will block until the amount of time set for the timeout parameter expires and then return <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_INCOMPLETE"/>.
             
              The function only allows one blocking request (timeout non-zero) at a time. If a multiple threaded application calls
              Session.SendRequest() from multiple threads at the same time, the first processed request is sent and
              all other requests block until the first response is received, then the next request is sent.This will consume
              some of the timeout period for each request.
             </summary>
             <param name="requestMessage">The request message (DeliveryMode cannot be PERSISTENT or NON_PERSISTENT).</param>
             <param name="replyMessage">The reply message. Null reference if <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_INCOMPLETE"/> is returned. </param>
             <param name="timeoutInMsecs">Timeout for the request to complete.</param>
             <returns>
             <para>
             <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_INCOMPLETE"/> if only some of the requested operations were performed.
             </para>
             <para>
             <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful.
             </para>
             </returns>
             <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
             Thrown when the operation fails to complete.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Thrown when the session is already disposed (terminal state).
             </exception>  
             <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
             Thrown when an unrecoverable error occurs.
             </exception> 
             <exception cref="T:System.ArgumentNullException">
             Thrown if requestMessage is null.
             </exception>        
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.SendReply(SolaceSystems.Solclient.Messaging.IMessage,SolaceSystems.Solclient.Messaging.IMessage)">
            <summary>
            Sends a Reply Message (see SetAsReplyMessage() on IMessage). 
            If messageToReply is non-null, the following
            message properties are copied to replyMessage:
            <item>ReplyTo is copied to Destination, unless ReplyTo is null.</item>
            <item>CorrelationId, unless it is null.</item>
            If messageToReplyTo is null, the application is responsible for setting the Destination and CorrelationId on the 
            replyMessage. 
            </summary>
            <param name="messageToReplyTo">The received request message to reply to.</param>
            <param name="replyMessage">The reply message to send to the requestor.</param>
            <returns>The return code from sending the reply.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails to complete.        
            Possible sub-codes:
            <list type="">
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MissingReplyTo"/>: the messageToReplyTo does not have a ReplyTo set.
            </item>
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>  
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if replyMessage is null.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Subscribe(SolaceSystems.Solclient.Messaging.ISubscription,System.Boolean)">
            <summary>
            Registers a subscription to the appliance. When the appliance is running SolOS-TR, a Topic is
            required.
            </summary>
            <param name="subscription">The subscription to subscribe to.</param>
            <param name="waitForConfirm">
            If true, this call blocks the calling thread until a confirmation is received from the appliance.
            </param>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>, if the subscription cannot be accepted by the API immediately,
            or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> 
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the Subscribe operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicSyntax"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionACLDenied"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SessionNotEstablished"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item> 
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfResources"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionAlreadyPresent"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionTooMany"/> 
            </item> 
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionACLDenied"/> 
            </item>
                     
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionOther"/> 
            </item>
            
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception> 
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if subscription is null.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Subscribe(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.Int32,System.Object)">
            <summary>
            Add a <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> subscription on the endpoint if the operation is supported on the
            endpoint (Only endpoints of type <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> or type <see cref="T:SolaceSystems.Solclient.Messaging.IClientName"/> support this operation).
            </summary>
            <param name="endpoint">The endpoint to add the subscription on (must be of type <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> or 
            type <see cref="T:SolaceSystems.Solclient.Messaging.IClientName"/>). When authorized, a session can add subscriptions to any queue or to other sessions as 
            identified by ClientName.</param>
            <param name="subscription">Only subscriptions of type <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> are supported </param>
            <param name="subscribeFlags"> 
            Possible values are:
            <item>0, this signals to the API not to request or wait for a confirmation</item>
            <item>
            One or more flags from <see cref="T:SolaceSystems.Solclient.Messaging.SubscribeFlag"/> ORed. Valid flags are <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.RequestConfirm"/>
            and <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.WaitForConfirm"/>
            </item>
            </param>
            <param name="correlationKey">
            If subscribeFlags is <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.RequestConfirm"/>, client applications can specify a non-null
            correlationKey object reference which is returned to the application as a CorrelationKey field within 
            a <see cref="T:SolaceSystems.Solclient.Messaging.SessionEventArgs"/> event.
            </param>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> 
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the Subscribe operation fails, more information will be available in the
            OperationErrorException fields. Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownQueueName"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownClientName"/> 
            </item> 
            
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception> 
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
            <exception cref="T:System.ArgumentNullException">
            Thrown if subscription is null.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Unsubscribe(SolaceSystems.Solclient.Messaging.ISubscription,System.Boolean)">
            <summary>
            Remove a subscription.
            </summary>
            <param name="subscription">The subscription to unsubscribe to.</param>
            <param name="waitForConfirm">
            If true, this call blocks the calling thread until a reply is received from the appliance.
            </param>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> 
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the Unsubscribe operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicSyntax"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SessionNotEstablished"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item> 
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionNotFound"/> 
            </item>
                     
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionOther"/> 
            </item>
            
            </list> 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception> 
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
            <exception cref="T:System.ArgumentNullException">
            Thrown if subscription is null.
            </exception>            
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Unsubscribe(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.Int32,System.Object)">
            <summary>
            Remove a <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> subscription from the endpoint if the operation is supported on the
            endpoint (Only endpoint of type <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> supports this operation).
            </summary>
            <param name="endpoint">The endpoint to remove the subscription from</param>
            <param name="subscription">Only subscriptions of type <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> are supported </param>
            <param name="subscribeFlags"> 
            Possible values are:
            <item>0, this signals to the API not to request or wait for a confirmation</item>
            <item>
            One or more flags from <see cref="T:SolaceSystems.Solclient.Messaging.SubscribeFlag"/> ORed. Valid flags are <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.RequestConfirm"/>
            and <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.WaitForConfirm"/>
            </item>
            </param>
            <param name="correlationKey">
            If subscribeFlags is <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.RequestConfirm"/>, client applications can specify a non-null
            correlationKey object reference which will be returned to the application as a CorrelationKey field within 
            a <see cref="T:SolaceSystems.Solclient.Messaging.SessionEventArgs"/> event.
            </param>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/>
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the Unsubscribe operation fails. More details will be available in the fields
            of the OperationErrorException.
            Possible sub-codes:
            <list type="">
            
             <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownQueueName"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownTEName"/> 
            </item>
             
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownClientName"/> 
            </item>        
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception> 
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
            <exception cref="T:System.ArgumentNullException">
            Thrown if subscription is null.
            </exception>   
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateMessage">
            <summary>
            Creates an IMessage instance. Applications are responsible for disposing all messages allocated by this method
            as soon as they are done with them.
            <p>
            This method is simply provided for convenience's sake. There is no lifecycle dependency between <see cref="T:SolaceSystems.Solclient.Messaging.ISession"/> and <see cref="T:SolaceSystems.Solclient.Messaging.IMessage"/>.
            </p>
            </summary>
            <returns>Returns a new IMessage.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateFlow(SolaceSystems.Solclient.Messaging.FlowProperties,SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.FlowEventArgs})">
            <summary>
            Creates <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> instances. 
            A flow is an API concept, which allows client applications to consume messages from an <see cref="T:SolaceSystems.Solclient.Messaging.IEndpoint"/>. Messges
            are attracted
            by a <see cref="T:SolaceSystems.Solclient.Messaging.ISubscription"/> to a <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/>. 
            <p>
            The message receive delegate is
            invoked for each received message on this flow. The flow event delegate is
            invoked when flow events occur, such as the flow going up or down. Both
            delegates are invoked in the context of the context thread to which this session belongs.
            </p>
            <p>
            <strong>Note:</strong> disposing the corresponding context (<see cref="T:SolaceSystems.Solclient.Messaging.IContext"/>) 
            or any of its contained context timers (<see cref="T:SolaceSystems.Solclient.Messaging.TimerTask"/>), sessions (<see cref="T:SolaceSystems.Solclient.Messaging.ISession"/>) 
            or flows (<see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/>) 
            <b>must not</b> be performed from within the registered delegates (messageEventHandler or flowEventHandler).
            </p>        
            <p>
            An endpoint is a holding area which allows a client to attract Guaranteed messages matching  
            a given subscription to a destination. There are two types of endpoints: "durable" and "non-durable". Durable 
            in this context means that the client that is bound to the given endpoint does not have to be online to
            attract messages. Non-durable endpoints are disposed when the bound client disconnects. 
            </p>
            <p>
            A destination can be either temporary or non-temporary. A temporary destination is used as a "reply to" field in
            request/reply message exchange patterns. Wildcard subscription capabilities do not apply to temporary destinations.
            </p>
            <p>
            With the exception of durable endpoint with temporary destination, the following cases are supported:
            </p>
            <table border="1">
            <tr>
            <th>use case</th>
            <th>endPoint</th>
            <th colspan="4">subscription</th>
            </tr>
            <tr> 
            <td>A flow bound to a non-temporary <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>.</td> 
            <td>A non-null <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>, created by <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateQueue(System.String)"/></td>
            <td>null</td>
            </tr>
            <tr> 
            <td>A flow bound to a temporary <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>.</td> 
            <td>A non-null <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>, created by <see cref="M:SolaceSystems.Solclient.Messaging.ISession.CreateTemporaryQueue"/>.</td>
            <td>null</td>
            </tr>        
            <tr> 
            <td>A flow bound to a non-temporary <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> and a durable <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>.</td> 
            <td>A non-null <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>, created by <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateDurableTopicEndpoint(System.String)"/>.</td>
            <td>A non-null <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/>, created by <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateTopic(System.String)"/> or <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateTopic(SolaceSystems.Solclient.Messaging.TopicProperties)"/>.</td>
            </tr>  
            <tr>
            <td>A flow bound to a non-temporary <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> and a non-durable <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>.</td> 
            <td>A Non-Durable <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>, created by <see cref="M:SolaceSystems.Solclient.Messaging.ISession.CreateNonDurableTopicEndpoint"/>. </td>
            <td>A non-null <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/>, created by <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateTopic(System.String)"/> or <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateTopic(SolaceSystems.Solclient.Messaging.TopicProperties)"/>.</td>
            </tr>   
            <tr>
            <td>A flow bound to a temporary <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> and a non-durable <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>.</td> 
            <td>A Non-Durable <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>, created by <see cref="M:SolaceSystems.Solclient.Messaging.ISession.CreateNonDurableTopicEndpoint"/>. </td>
            <td>A non-null <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/>, created by <see cref="M:SolaceSystems.Solclient.Messaging.ISession.CreateTemporaryTopic"/> or <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateTopic(SolaceSystems.Solclient.Messaging.TopicProperties)"/>.</td>
            </tr>
            </table>
            </summary>
            <param name="flowProperties">FlowProperties</param>
            <param name="endPoint">The IEndpoint instance to bind the new IFlow to.</param>
            <param name="subscription">Only valid if endpoint is of type <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>.</param>
            <param name="messageEventHandler">The message EventHandler delegate.</param>
            <param name="flowEventHandler">The flow event EventHandler delegate. 
            <p>
            Client applications can call <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetLastSDKErrorInfo"/> from within the flow event delegate 
            to get more info on the type of error condition reported by <see cref="T:SolaceSystems.Solclient.Messaging.FlowEventArgs"/>.
            </p>
            </param>
            <returns>
            An IFlow instance that's already started, unless <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.FlowStartState"/> is set to false.
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfResources"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidSessionOperation"/> 
            </item> 
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicNameForTE"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownQueueName"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownTEName"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxClientsForQueueReached"/> 
            </item> 
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxClientsForTEReached"/> 
            </item>
                     
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNotFound"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueShutdown"/> 
            </item> 
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoMoreNonDurableQueueOrTE"/> 
            </item>
                     
            </list>
            </exception>       
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>   
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>    
            <exception cref="T:System.ArgumentException">
            Thrown if arguments fail validation.
            </exception>   
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateFlow(SolaceSystems.Solclient.Messaging.FlowProperties,SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.FlowEventArgs},SolaceSystems.Solclient.Messaging.EndpointProperties)">
            <summary>
            Creates <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> instances. 
            In addition, if endPoint is a non-durable Endpoint, it is possible to specify the <see cref="T:SolaceSystems.Solclient.Messaging.EndpointProperties"/> of implicitly created Endpoint on
            the appliance.
            <p>
            The message receive delegate is
            invoked for each received message on this flow. The flow event delegate is
            invoked when flow events occur, such as the flow going up or down. Both
            delegates are invoked in the context of the context thread to which this session belongs.
            </p>
            <p>
            <strong>Note:</strong> disposing the corresponding context (<see cref="T:SolaceSystems.Solclient.Messaging.IContext"/>) 
            or any of its contained context timers (<see cref="T:SolaceSystems.Solclient.Messaging.TimerTask"/>), sessions (<see cref="T:SolaceSystems.Solclient.Messaging.ISession"/>) 
            or flows (<see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/>) 
            <b>must not</b> be performed from within the registered delegates (messageEventHandler or flowEventHandler).
            </p>         
            </summary>
            <param name="flowProperties">FlowProperties</param>
            <param name="endPoint">The IEndpoint instance to bind the new IFlow to.</param>
            <param name="subscription">Only valid if endpoint is of type <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>.</param>
            <param name="messageEventHandler">The message EventHandler delegate.</param>
            <param name="flowEventHandler">The flow event EventHandler delegate.
            <p>
            Client applications can call <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetLastSDKErrorInfo"/> from within the flow event delegate 
            to get more info on the type of error condition reported by <see cref="T:SolaceSystems.Solclient.Messaging.FlowEventArgs"/>.
            </p>        
            </param>
            <param name="endPointProperties">
            the <see cref="T:SolaceSystems.Solclient.Messaging.EndpointProperties"/> of the implicitly created Endpoint on the appliance, endPoint must be
            durable, otherwise these properties are ignored.
            Use null to accept default properties.
            </param>        
            <returns>
            An IFlow instance that is already started, unless <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.FlowStartState"/> is set to false.
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfResources"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidSessionOperation"/> 
            </item> 
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicNameForTE"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownQueueName"/> 
            </item>
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownTEName"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxClientsForQueueReached"/> 
            </item> 
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxClientsForTEReached"/> 
            </item>
                     
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNotFound"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueShutdown"/> 
            </item> 
                    
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoMoreNonDurableQueueOrTE"/> 
            </item>
                     
            </list> 
            </exception>       
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>   
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>    
            <exception cref="T:System.ArgumentException">
            Thrown if arguments fail validation.
            </exception>          
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Unsubscribe(SolaceSystems.Solclient.Messaging.ITopicEndpoint,System.Int32)">
            <summary>
            Unsubscribes from a durable Topic Endpoint.
            </summary>
            <param name="dte">The durable Topic Endpoint to unsubscribe from.</param>
            <param name="correlationId">Correlation Id used in the unsubscribe request
            and returned in the session event <see cref="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.CorrelationKey"/>. 
            Valid values are within [1..16777215]. A value of 0 (zero) indicates that correlationId is not to be returned 
            (in this case <see cref="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.CorrelationKey"/> will be null). 
            Any other value outside of the previously stated values will cause an ArgumentOutOfRangeException
            exception to be thrown.</param>
            <returns>The return code from the unsubscribe request.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>       
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>   
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>  
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if correlationId is out of range.
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Unsubscribe(SolaceSystems.Solclient.Messaging.ITopicEndpoint,System.Object)">
            <summary>
            Unsubscribes from a durable Topic Endpoint. This is only valid if no clients are bound to the 
            topic endpoint.
            </summary>
            <param name="dte">The durable Topic Endpoint to unsubscribe from.</param>
            <param name="correlationKey">An object reference that is returned in <see cref="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.CorrelationKey"/>
            session event</param>
            <returns>The return code from the unsubscribe request.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SessionNotEstablished"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidSessionOperation"/> 
            </item>		
            
            </list>
            </exception>       
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>   
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.SetClientDescription(System.String)">
            <summary>
            Sets the Client Description. 
            </summary>
            <param name="clientDescription">string</param>
            <returns>
            Throws OperationErrorException if it fails, otherwise it returns <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>
            or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/>. 
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>       
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>   
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters are null.
            </exception>   
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ISession.Properties">
            <summary>
            Returns a copy of the current SessionProperties.
            </summary>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>            
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters are null.
            </exception>           
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.GetProperty(SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY)">
            <summary>
            Returns the object value of a given property.
            </summary>
            <param name="sessionProperty">Property to get.</param>
            <returns>The object value of a given property.</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>        
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>            
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>            
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.ModifyProperty(SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY,System.Object)">
            <summary>
            Allows certain properties of a session to be modified after the session has been created.
            Currently, only the following session properties can be modified:
            <br>
            <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ClientDescription"/> (Deprecated - See Note below)
            </br>
            <br>
            <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ClientName"/> (Deprecated - See Note below)
            </br>
            <br>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Host"/> (may only be modified when session is disconnected)
            </br>
            <br>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.Port"/> (may only be modified when session is disconnected)
            </br>
            <br></br>
            <strong>Note:</strong> Applications shall use <see cref="M:SolaceSystems.Solclient.Messaging.ISession.ModifyClientInfo(SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY,System.Object,System.Int32,System.Object)"/> to modify the following session
            properties:
            <br>
            <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ClientDescription"/>
            </br>
            <br>
            <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.ClientName"/>
            </br>
            </summary>
            <param name="sessionProperty">The property to modify.</param>
            <param name="value">The new value for the property.</param>
            <returns>
            Throws OperationErrorException if failed. Otherwise it returns <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/>,
            or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>, if the message cannot be accepted by the API immediately.
            </returns>   
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.AttemptToModifySessionPropertyWhenNotIdle"/> 
            </item>
            
            </list>
            </exception>            
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when un-recoverable error occurs.
            </exception> 
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>       
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.ModifyClientInfo(SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY,System.Object,System.Int32,System.Object)">
            <summary>
            Allows the following client name and description properties of a Session to be modified after the Session has been created.
            <list type="">
            
            <item>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientDescription"/> 
            </item>
            <item>
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientName"/> 
            </item> 
            
            </list>
            <p>
            The property modifications can be  carried out in a blocking or non-blocking mode, depending on the flag <see cref="T:SolaceSystems.Solclient.Messaging.ModifyPropertyFlag"/>
            Attempting to specify other Session properties will result in <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL"/> being returned. 
            </p>
            <p>
            Note that only one outstanding client info modification request is allowed.
            Note that changing client name property would trigger the P2P topic changes. To avoid message loss, it is recommended that this API 
            is used only at the initialization time. 
            </p>     
            </summary>
            <param name="sessionProperty">The property to modify.</param>
            <param name="value">The new value for the property.</param>
            <param name="flags"> One of the following flags:
            <item><see cref="F:SolaceSystems.Solclient.Messaging.ModifyPropertyFlag.WaitForConfirm"/>: if specified this call blocks the calling thread until a confirmation is received from the appliance (synchronous call).</item>
            <item>0: if 0 is specified, this method call will not block (asynchronous call).</item> 
            </param>
            <param name="correlationKey">
             When specified (i.e. non null reference passed in), this correlationKey is returned in <see cref="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.CorrelationKey"/> - It is
            ignored if <see cref="F:SolaceSystems.Solclient.Messaging.ModifyPropertyFlag.WaitForConfirm"/> is specified.
            </param>
            <returns>
            Throws OperationErrorException if failed. Otherwise it returns
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> if the operation cannot be accepted by the API immediately,
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful, or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> if in progress.
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails. Possible error subcodes include:
            <list type="">
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientNameAlreadyInUse"/> 
            </item>  
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientNameInvalid"/> 
            </item>
            </list>
            </exception>            
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when un-recoverable error occurs.
            </exception> 
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>       
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>          
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ISession.Flows">
            <summary>
            Represents the current read-only collection of active (not yet disposed) flows created by this session.
            </summary>   
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.ValidateTopic(System.String)">
            <summary>
            This method checks a topic string against topic encoding rules for the appliance. This
            method is intended for use before sending a message to a topic.
            This method should not be used with Subscribe methods. Subscribe methods
            perform its own topic validation, which includes accepting wildcards. 
            For performance reasons <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Send(SolaceSystems.Solclient.Messaging.IMessage)"/> and <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Send(SolaceSystems.Solclient.Messaging.IMessage[],System.Int32,System.Int32,System.Int32@)"/> does not validate topics, and this method
            is provided as a convenience to the developer to ensure a topic is valid
            before sending a message that could be rejected by the appliance. It is
            expected then that the same topic will be used for sending many messages.
            </summary>
            <param name="topicName"></param>
            <returns><see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful; <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL"/> if unsuccessful. </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters are null.
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateCacheSession(SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties)">
            <summary>
            This method creates a cache session instance to be used in subsequent cache request operations on the 
            session. Multiple ICacheSesssion instances may be created on an ISession instance. 
            </summary>
            <param name="cacheSessionProperties">Properties for the new cache session.</param>
            <returns>
            Throws OperationErrorException if it fails, otherwise it returns
            a new ICacheSession instance.
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>         
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when cacheSessionProperties is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when cacheSessionProperties has invalid property values.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.GetContext">
            <summary>
            Returns a reference to the Context that was used to create this session.
            </summary>
            <returns>Returns a reference to the Context that was used to create this session</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.GetCapability(SolaceSystems.Solclient.Messaging.CapabilityType)">
            <summary>
            Returns an <see cref="T:SolaceSystems.Solclient.Messaging.ICapability"/> instance for the given <see cref="T:SolaceSystems.Solclient.Messaging.CapabilityType"/>.
            </summary>
            <param name="capabilityType"></param>
            <returns>
            The requested capability from the peer.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.IsCapable(SolaceSystems.Solclient.Messaging.CapabilityType)">
            <summary>
            Checks if the specified capability type is set on the currently connected session.
            Returns true if the session has the specified <see cref="T:SolaceSystems.Solclient.Messaging.CapabilityType"/>.
            </summary>
            <param name="capabilityType"></param>
            <returns>
            A <c>boolean</c> representing if the capability is supported.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateTemporaryTopic">
            <summary>
            Creates a temporary topic for this session. Only a consumer on this 
            session should bind to this topic; although clients on other sessions
            can publish to it.
            <p>
            Temporary topics can only be used to bind to non-durable endpoints.
            </p>
            <p>
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/> must be called before calling this method.
            </p>
            </summary>
            <returns>Return a temporary topic for this session</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.       
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InsufficientSpace"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SessionNotEstablished"/> 
            </item>        
            </list>
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateTemporaryQueue">
            <summary>
            Creates a temporary Queue for this session. This queue should only be 
            bound to by a consumer on this session; although other sessions can publish
            to it.
            <p>
            A temporary Queue can only be used to bind to non-durable endpoints. The
            non-durable endpoint is created on the appliance when a consumer is bound on this session.
            </p>
            <p>
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/> must be called before calling this method.
            </p>
            </summary>
            <returns>Returns temporary Queue for this session</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InsufficientSpace"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SessionNotEstablished"/> 
            </item>        
            </list>        
            </exception>        
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateTemporaryQueue(System.String)">
            <summary>
            Creates a temporary Queue on this session with the given name. This Queue should only be 
            bound to by a consumer on this session; although other sessions can publish
            to it.
            <p>
            A temporary queue can only be used to bind to non-durable endpoints. The
            non-durable endpoint is created on the appliance when a consumer is bound on this session.
            </p>
            <p>
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/> must be called before calling this method.
            </p>
            </summary>
            <param name="name"></param>
            <returns>Returns a temporary Queue on this session with the given name</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InsufficientSpace"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SessionNotEstablished"/> 
            </item>        
            </list>          
            </exception>   
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateNonDurableTopicEndpoint">
            <summary>
            Creates a non-durable Topic Endpoint. The non-durable Topic Endpoint must be bound to
            by a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> on this session.
            <p>The non-durable endpoint is created on the appliance when a consumer is bound on this
            session.
            </p>
            </summary>
            <returns>Returns a non-durable Topic Endpoint</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>           
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateNonDurableTopicEndpoint(System.String)">
            <summary>
            Creates a non-durable Topic Endpoint based on the given name. The non-durable Topic
            Endpoint must be bound to by a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> on this session.
            <p>The non-durable endpoint is created on the appliance when a consumer is bound on this
            session.
            </p>
            </summary>
            <param name="name"></param>
            <returns>Returns a non-durable Topic Endpoint based on the given name</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>           
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Provision(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.EndpointProperties,System.Int32,System.Object)">
            <summary>
            Provisions a durable <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> on the appliance.
            Endpoint creation can be carried out in a synchronous or asynchronous mode, depending upon the provision flags 
            passed in to this method. 
            <item>
            If <see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.WaitForConfirm"/> is specified in flags,
            the calling thread is blocked until the endpoint creation attempt either
            succeeds or is determined to have failed. 
            </item>
            <item>
            If <see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.WaitForConfirm"/> is not specified in flags, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> 
            is returned when the endpoint provision request is successfully sent, and the creation attempt proceeds in the background.
            </item>
            <p>
            An Endpoint provision timer, controlled by the property
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ProvisionTimeoutInMsecs"/>, controls the maximum amount of
            time a provision attempt lasts for. Upon expiry of this timer, a <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.ProvisionError"/> 
            event is returned in the session event delegate.
            </p>
            </summary>
            <param name="endpoint">
            Endpoint to create (must be a durable <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>). 
            </param>
            <param name="props">
            Properties of the Endpoint to create.
            Setting a property in EnpointProperties with a null value indicates that the application will accept the appliance's defaults.
            If the Endpoint already exists, leaving the property value null indicates that application
            accepts any value already specified for that Endpoint.       
            </param>
            <param name="flags">
            Allowed flags include:
            <item><see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.WaitForConfirm"/>: if specified this call blocks the calling thread until a confirmation is received from the appliance.</item>
            <item><see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.IgnoreErrorIfEndpointAlreadyExists"/>: if specified this call will not return an error if the Endpoint already exists.</item>
            </param>
            <param name="correlationKey">
            When specified (i.e. non null reference passed in), this correlationKey is returned in <see cref="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.CorrelationKey"/> - It is
            ignored if <see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.WaitForConfirm"/> is specified.
            </param>
            <returns> 
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>, if the operation cannot be accepted by the API immediately,
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful, or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> if in progress.
            </returns>        
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Throws OperationErrorException in the following cases:
            <item>
            The operation could not complete due to an invalid appliance or session state.
            </item>
            <item>
            An Endpoint with the same name already exists, and the user did not pass <see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.IgnoreErrorIfEndpointAlreadyExists"/> was
            not specified in flags.
            </item>
            <item>
            A property mismatch error has occurred. This occurs if the user has passed in true for ignoreErrorIfEndpointAlreadyExists AND
            and Endpoint with the same name already exists AND the provision property passed in by the application and what is currently
            provisioned on the appliance are not equal.
            </item>
            Note: The ErroInfo property in OperationErrorException will have a specific SubCode indicating what error case the application
            encountered.
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicNameForTE"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.EndpointAlreadyExists"/> 
            </item>		
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoMoreNonDurableQueueOrTE"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.PermissionNotAllowed"/> 
            </item>		
             
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>        
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.Deprovision(SolaceSystems.Solclient.Messaging.IEndpoint,System.Int32,System.Object)">
            <summary>
            Deprovisions or removes a durable <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> from the appliance.
            Endpoint deprovisioning can be carried out in a synchronous or asynchronous mode, depending upon the provision flags 
            passed in to this method. 
            <item>
            If <see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.WaitForConfirm"/> is specified in flags,
            the calling thread is blocked until the endpoint deprovisioning attempt either
            succeeds or is determined to have failed. 
            </item>
            <item>
            If <see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.WaitForConfirm"/> is not set, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> 
            is returned when the endpoint deprovision request is successfully sent, and the remove attempt proceeds in the background.
            </item>
            <p>
            An Endpoint provision timer, controlled by the property
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ProvisionTimeoutInMsecs"/>, controls the maximum amount of
            time a deprovsion attempt lasts for. Upon expiry of this timer,
            a <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.ProvisionError"/> event is returned in the session event delegate.
            </p>        
            </summary>
            <param name="endpoint">
            Endpoint to deprovision (must be a durable <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>) 
            </param>
            <param name="flags">
            Allowed flags include:
            <item><see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.WaitForConfirm"/>: if specified, this call blocks the calling thread until a confirmation is received from the appliance.</item>
            <item><see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.IgnoreErrorIfEndpointDoesNotExist"/>: if specified, this call will not return an error if the Endpoint does not exist.</item>
            </param>
            <param name="correlationKey">
            When specified (i.e. non null reference passed in), this correlationKey is returned in <see cref="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.CorrelationKey"/>.
            </param>
            <returns> 
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>, if the operation cannot be accepted by the API immediately,
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful, or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> if in progress.
            </returns>        
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Throws OperationErrorException if it fails to deprovision or delete the Endpoint. The possible reasons are:
            <list type="">
            <item>
            The operation could not complete due to an invalid appliance or session state.
            </item>
            <item>
            No Endpoint with the same name exists on the appliance, AND the user has not specified the <see cref="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.IgnoreErrorIfEndpointDoesNotExist"/>. 
            </item>
            </list>
            Note: The ErroInfo property in OperationErrorException will have a specific SubCode indicating what error case the application
            encountered. 
            Possible sub-codes:
            <list type="">
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownQueueName"/> 
            </item>
            
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownTEName"/> 
            </item>			
             
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>        
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateBrowser(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.BrowserProperties)">
            <summary>
            Creates a new <see cref="T:SolaceSystems.Solclient.Messaging.IBrowser"/> instance.
            </summary>
            <param name="endpointToBrowse">Endpoint to browse</param>
            <param name="browserProperties">BrowserProperties</param>
            <returns>
            An IBrowser instance. 
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>       
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>   
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when un-recoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>    
            <exception cref="T:System.ArgumentException">
            Thrown if arguments fail validation.
            </exception>   
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ISession.CreateTransactedSession(SolaceSystems.Solclient.Messaging.TransactedSessionProperties)">
            <summary>
            Creates a transacted session on the given ISession instance.
            
            If <see cref="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.CreateMessageDispatcher"/> is
            false, the default Context-bound Message Dispatcher is used by the
            transacted session to deliver messages asynchronously to transacted flows.
            
            By enabling <see cref="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.CreateMessageDispatcher"/>,
            a new transacted-session-bound messge dispatcher is created when the
            transacted session creates its first transacted consumer flow with asynchrounous
            message delivery.
            
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.CreateTransactedSession(SolaceSystems.Solclient.Messaging.TransactedSessionProperties)"/> blocks until a transacted
            session is created on the appliance. If <see cref="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.HasPublisher"/>
            is enabled, it also waits until a default publisher flow is opened properly.
            </summary>
            <param name="props">The transacted session properties</param>
            <returns>The newly created instance of ITransactedSession</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            On error, an OperationErrorException is thrown. The exception contains the
            return code and error subcode (See return code and subcodes.)
            </exception>       
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>   
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when un-recoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>    
            <exception cref="T:System.ArgumentException">
            Thrown if arguments fail validation.
            </exception>  
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ITransactedSession">
            <summary>
            ITransactedSession groups a number of Guaranteed Delivery flows into transactions. 
            Once successfully created, an ITransactedSession instance has an in-progress transaction but no subordinate 
            Guarenteed Delivery consumer flows. Consumer flows can be created by calling CreateFlow(). 
            
            Transacted sessions are not thread-safe and should not be used by mulitple application threads. The legal threading
            model usage of transacted sessions is limited to:
            <list type="">
            <item>
            If messages are received over the message dispatcher thread (async), client applications must invoke commit/rollback/sendMsg 
            from the context of that thread (i.e. in the context of the message dispatcher thread <see cref="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.CreateMessageDispatcher"/>). 
            </item>
            <item>
            If messages are received from an application thread by calling <see cref="M:SolaceSystems.Solclient.Messaging.IFlow.ReceiveMsg(System.Int32)"/> directly, 
            commit/rollback/sendMsg/receiveMsg functions must be called in the context of the same application thread.
            </item>
            </list>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ITransactedSession.SessionName">
            <summary>
            The name of the transacted session
            </summary>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when getting the name of the transacted session fails.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ITransactedSession.CreateFlow(SolaceSystems.Solclient.Messaging.FlowProperties,SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.FlowEventArgs},SolaceSystems.Solclient.Messaging.EndpointProperties)">
            <summary>
            Creates a consumer flow <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> on the given transacted session.
            
            If messageEventHandler delegate is provided, messages received on the flow are dispatched
            to the message callback delegate in the context of the message dispatcher thread
            (<see cref="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.CreateMessageDispatcher"/>),
            otherwise messages received on this consumer flow are queued internally; in this case
            client applications must call <see cref="M:SolaceSystems.Solclient.Messaging.IFlow.ReceiveMsg(System.Int32)"/> directly to retrieve any
            internally queued messages.
            
            Unlike other (or non-transacted) flows, events and messages received on a transacted flow
            are delivered in the contexts of two different threads.  Events received on flows are still
            delivered in the context of the IContext thread (<see cref="T:SolaceSystems.Solclient.Messaging.IContext"/>).  Messages received on 
            flows are dispatched to the messageEventHandler delegate in the context of the message dispatcher 
            thread or retrieved by calling <see cref="M:SolaceSystems.Solclient.Messaging.IFlow.ReceiveMsg(System.Int32)"/> directly in the context of an
            application thread.
            
            The following flow properties are not supported:
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.AckMode"/>
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.AutoAck"/>
            </summary>
            
            <param name="flowProperties">The flow properties <see cref="T:SolaceSystems.Solclient.Messaging.FlowProperties"/></param>
            <param name="endpoint">The <see cref="T:SolaceSystems.Solclient.Messaging.IEndpoint"/> instance to bind the new IFlow to</param>
            <param name="subscription">Only valid if endpoint is of type <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>.</param>
            <param name="messageEventHandler">The message EventHandler delegate for receiving messages. May be set to null to receive messages synchronously</param>
            <param name="flowEventHandler">The flow event EventHandler delegate</param>
            <param name="endpointProperties">Is endpoint is a non-durable endpoint, endpointProperties will allo the user
            to sepcify <see cref="T:SolaceSystems.Solclient.Messaging.EndpointProperties"/> of the implicitly created endpoint
            </param>
            
            <returns>
            A newly created IFlow instance for the transacted session if successful.
            </returns>        
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            Possible sub-codes:
            <list type="bullet">
                <item>
                    <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamConflict"/> 
                </item>
            </list> 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>  
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the required parameters is null.
            </exception>       
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentException">
            Thrown if arguments fail validation.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ITransactedSession.CreateFlow(SolaceSystems.Solclient.Messaging.FlowProperties,SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.FlowEventArgs})">
            <summary>
            Creates a consumer flow <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> on the given transacted session.
            
            This method calls <see cref="M:SolaceSystems.Solclient.Messaging.ITransactedSession.CreateFlow(SolaceSystems.Solclient.Messaging.FlowProperties,SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.FlowEventArgs},SolaceSystems.Solclient.Messaging.EndpointProperties)"/> for
            with null endpointProperties, therefore it does not allow the user of this method to specify the <see cref="T:SolaceSystems.Solclient.Messaging.EndpointProperties"/> when binding and implicilty creating a
            non-durable endpoint.
            </summary>
            <param name="flowProperties"></param>
            <param name="endpoint"></param>
            <param name="subscription"></param>
            <param name="messageEventHandler"></param>
            <param name="flowEventHandler"></param>
            <returns>Returns a consumer flow <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> on the given transacted session</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ITransactedSession.Rollback">
            <summary>
            Rolls back the active transaction of the given transacted session.
            This method blocks the calling thread until a response is received or the operation fails.
            </summary>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful.
            </returns>        
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            Possible sub-codes:
            <list type="bullet">
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTransactedSessionID"/>
            </item>
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoTransactionStarted"/>
            </item>
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommitRollbackAlreadyInProgress"/>
            </item>
            </list> 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>     
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ITransactedSession.Commit">
             <summary>
             Commits the active transaction on the given transacted session.
             This method blocks the calling thread until a response is received or the operation fails.
             </summary>
             <returns>
             <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/>
             </returns>
             <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
             Thrown when the operation fails. Typically this is thrown when the commit request has failed and must be rolled back.
             When the <see cref="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ReturnCode"/> is set to <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_ROLLBACK"/>, further 
             reason for the rollback is available in the subcode:
             <list type="bullet">
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTransactedSessionID"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTransactionID"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoTransactionStarted"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessagePublishFailure"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TransactionFailure"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueShutdown"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TEShutdown"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SpoolOverQuota"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNotFound"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidConnectionOwner"/>
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.EndpointModified"/>
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommitRollbackAlreadyInProgress"/>
             </item>
             </list>
            <p>
             If the <see cref="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ReturnCode"/> is <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL"/>
             The status of the outstanding commit request cannot be  determined. The commit may have succeeded on the message-router before the 
             response was lost.  Or the commit request may have failed (roll back).  Applications that treat this 
             failure  as a rollback must allow for duplicate transactions. Possible subcodes when the <see cref="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ReturnCode"/>
             is <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL"/> are:
            </p>
             <list type="bullet">
             <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommitStatusUnknown"/></item>
             <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout"/></item>
             </list>
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Thrown when the session is already disposed (terminal state).
             </exception>     
             <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
             Thrown when an unrecoverable error occurs.
             </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ITransactedSession.Send(SolaceSystems.Solclient.Messaging.IMessage)">
             <summary>
             Sends a guaranteed message on the transacted session.
             
             In order to send messages on a Transacted Session, a default publisher flow has to be created by 
             enabling the Transacted Session property <see cref="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.HasPublisher"/> during 
             the transacted session creation.
            
             <see cref="M:SolaceSystems.Solclient.Messaging.ITransactedSession.Send(SolaceSystems.Solclient.Messaging.IMessage)"/> returns <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> when the 
             message has been successfully copied to the transmit buffer or underlying transport.
            
             Successful commits acknowledge published messages delivered to the Solace messaging appliance.
             </summary>
             <param name="message">
             An <see cref="T:SolaceSystems.Solclient.Messaging.IMessage" /> instance.
             </param>
             <returns>
             <list type="bullet">
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK" /> when message has been successfully copied to the 
             transmit buffer or underlying transport
             </item>
             </list>
             </returns>        
             <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
             Thrown when the operation fails.
             Possible sub-codes:
             <list type="bullet">
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.DeliveryModeUnsupported"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.PublisherNotEstablished"/> 
             </item>
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommitRollbackAlreadyInProgress"/> 
             </item>
             
             </list> 
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Thrown when the session is already disposed (terminal state).
             </exception>     
             <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
             Thrown when an unrecoverable error occurs.
             </exception>         
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.TransactedSessionProperties">
            <summary>
            Defines the properties for a <see cref="T:SolaceSystems.Solclient.Messaging.ITransactedSession"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.HasPublisher">
            <summary>
            When it is enabled, a default publisher flow is opened automatically after
            the transacted session  is successfully created.  Default: true.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.CreateMessageDispatcher">
            <summary>
            When it is enabled, a new message dispatcher is created for the transacted session.
            Default: false.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.OperationTimeoutInMsecs">
            <summary>
            The timeout (in milliseconds) to wait for response from the appliance
            when invoking transacted session operations such as commit or rollback.
            The minimum configurable value is 1000. Default: 10000.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.PROPERTY">
            <summary>
            An enum list of TransactedSessionProperties
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.PROPERTY.Publisher">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.HasPublisher"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.PROPERTY.CreateMessageDispatcher">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.CreateMessageDispatcher"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.PROPERTY.OperationTimeoutInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.TransactedSessionProperties.OperationTimeoutInMsecs"/>
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ModifyPropertyFlag">
            <summary>
            Specifies the possible flags which can be used with <see cref="M:SolaceSystems.Solclient.Messaging.ISession.ModifyClientInfo(SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY,System.Object,System.Int32,System.Object)"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ModifyPropertyFlag.WaitForConfirm">
            <summary>
            The ModifyClientInfo (in ISession) method call blocks until a confirmation is received or its 
            associated timer <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ModifyPropertyTimeoutInMsecs"/> expires.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ProvisionFlag">
            <summary>
            Defines the possible flags that can be used in Provision and Deprovision methods in ISession
            methods.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.WaitForConfirm">
            <summary>
            If added to flags, this option causes the thread calling ISession.Provision or ISession.Deprovision
            to be blocked until a confirmation is received from the appliance.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.IgnoreErrorIfEndpointAlreadyExists">
            <summary>
            If added to flags, the ISession.Provision call will not return an error if the Endpoint already exists.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ProvisionFlag.IgnoreErrorIfEndpointDoesNotExist">
            <summary>
            If added to flags, the ISession.Deprovision call will not return an error if the Endpoint does not exist.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SubscribeFlag">
            <summary>
            Defines the possible flags that can be used in the following methods:
            <item>
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Subscribe(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.Int32,System.Object)"/> and 
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Subscribe(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.Int32,System.Object)"/>
            </item>
            <item>
            <see cref="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.Subscribe(SolaceSystems.Solclient.Messaging.IDispatchTarget,System.Int32,System.Object)"/> and <see cref="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.Unsubscribe(SolaceSystems.Solclient.Messaging.IDispatchTarget,System.Int32,System.Object)"/>
            </item>    
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.WaitForConfirm">
            <summary>
            The API call will block until a confirmation is received.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.RequestConfirm">
            <summary>
            Requests a confirmation for the subscribe/unsubscribe operation. 
            This bit is implied by <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.WaitForConfirm"/>. If <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.WaitForConfirm"/> is not set when this flag is set, 
            then a confirmation event is issued through the session event callback delegate, but the API call will not block. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.LocalDispatchOnly">
            <summary>
            When using this flag with <see cref="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.Subscribe(SolaceSystems.Solclient.Messaging.IDispatchTarget,System.Int32,System.Object)"/> or <see cref="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.Unsubscribe(SolaceSystems.Solclient.Messaging.IDispatchTarget,System.Int32,System.Object)"/>
            this flag indicates the subscription should only be added to the dispatch table and should not be added to the appliance.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.MessageAckMode">
            <summary>
            Defines the possible acknowledgements modes for received Guaranteed Delivery messages.  
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageAckMode.AutoAck">
            <summary>
            Automatic application acknowledge all received messages, the application does not need to call Ack(...) explicitly.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageAckMode.ClienAck">
            <summary>
            Acknowledges only the msgId specified. Deprecated use ClientAck instead.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageAckMode.ClientAck">
            <summary>
            Acknowledges only the msgId specified.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IReplayStartLocation">
            <summary>
            Identifies a message replay start location object instance.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ReplayStartLocation">
            <summary>
            This abstract class specifies a message replay start location
            In includes factory methods for creating a ReplayStartLocation object.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReplayStartLocation.Beginning">
            <summary>
            The Beginning field represents a Replay Start
            from the beginning of the Replay Log.
            for <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocation"/>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocation.Date">
            <summary>
             The Date factory with no arguments returns a Replay Start
             representing the unix epoch (1970-01-01T00:00:00Z).
             <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocation"/>
             </summary>
             <returns>ReplayStartLocationDate</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocation.Date(System.DateTime)">
            <summary>
             The Date factory returns a Replay Start
             from a given DateTime. The DateTime is always converted to UTC
             time.
             <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocation"/>
             </summary>
             <param name="date"/>
             <returns>ReplayStartLocationDate</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ReplayStartLocationBeginning">
            <summary>
             The ReplayStartLocationBeginning class represents a Replay Start
             from the beginning of the Replay Log.
             for <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocation"/>
             </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationBeginning.ToString">
            <summary>
            Creates and returns a string representation of the ReplayStartLocation
            </summary>
            <returns>String "BEGINNING"</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationBeginning.GetHashCode">
            <summary>
            Use the default getHashCode()
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationBeginning.Equals(System.Object)">
            <summary>
            Implement an equality method for ReplayStartLocationBeginning
            </summary>
            <param name="obj"></param>
            <returns>boolean</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ReplayStartLocationDate">
            <summary>
             The ReplayStartLocationDate class represents a Replay Start
             from a given DateTime. The DateTime is always converted to UTC
             time.
             for <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocation"/>
             </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationDate.#ctor">
            <summary>
            Construct a default ReplayStartLocationDate, the default 
            is Jan 1, 1970 00:00:00 UTC (the Epoch)
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationDate.#ctor(System.DateTime)">
            <summary>
            Construct a ReplayStartLocationDate based on the given DateTime. The
            DateTime is converted to UTC.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationDate.GetDate">
            <summary>
            Return the DateTime in this object.  The time is returned is always UTC.
            </summary>
            <returns>DateTime</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationDate.SetDate(System.DateTime)">
            <summary>
            Set the DateTime on this object. If the date parameter is not already
            given as UTC it is converted to UTC.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationDate.ToString">
            <summary>
            Creates and returns a string representation of the ReplayStartLocation
            </summary>
            <returns>String representation of ReplayStartLocation in the format
            "DATE:YYYY-MM-DDTHH:MM:SSZ"</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationDate.GetHashCode">
            <summary>
            Use the default getHashCode()
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationDate.Equals(System.Object)">
            <summary>
            Implement an equality method for ReplayStartLocationDate
            </summary>
            <param name="obj"></param>
            <returns>boolean</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ReplayStartLocationDate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implement serialization method for DateTime, just store the Ticks 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IFlow">
            <summary>
            A flow is an API concept that allows the application to receive messages from an endpoint on the appliance (a
            <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> or <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/> on a Solace appliance running SolOS-TR).
            Flows are not used by clients that receive Direct messages. Rather, <see cref="F:SolaceSystems.Solclient.Messaging.MessageDeliveryMode.Direct"/>
            messages are received by clients with matching subscriptions directly from the
            appliance’s message bus through sessions instead of binding to a specific endpoint
            on the message bus. 
            <p>Disposing a flow <b>must not</b> be performed in the flow callback delegate of the flow being disposed.</p>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IFlow.Start">
            <summary>
            Starts the transport window of the flow enabling it to receive messages. When
            a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> is first created, it is already started, unless <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.FlowStartState"/> is set to false.
            <p>
            To restart a flow after it is been stopped (see <see cref="M:SolaceSystems.Solclient.Messaging.IFlow.Stop"/>), clients must call start on the stopped flow.
            </p>
            </summary>
            <returns> 
            When successful, it returns <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/>.
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the start operation fails.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the flow is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IFlow.Stop">
            <summary>
            Stops or closes the transport window resulting in the eventual halt of message delivery. Stopping a flow
            does not result in message loss. It simply "pauses" message delivery until Start() is called again.
            <p>
            To restart a flow after it is been stopped, clients must call <see cref="M:SolaceSystems.Solclient.Messaging.IFlow.Start"/> on the stopped flow.
            </p>        
            </summary>
            <returns> 
            When successful, it returns <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/>. 
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the start operation fails.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the flow is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>        
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IFlow.Ack(System.Int64)">
            <summary>
            Sends an acknowledgement for a message received over this flow.
            <p>This instructs the API to consider the specified ADMessageId acknowledged 
            at the application layer. The library does not send acknowledgements 
            immediately. It stores the state for acknowledged messages internally and 
            acknowledges messages, in bulk, when a threshold or timer is reached.</p>
            <p>
            The exact behavior of Ack() is controlled by flow property MessageAckMode: 
            <item><see cref="F:SolaceSystems.Solclient.Messaging.MessageAckMode.AutoAck"/> - Messages are acknowledged automatically by the API and calling 
            this function has no effect.</item>
            <item><see cref="F:SolaceSystems.Solclient.Messaging.MessageAckMode.ClientAck"/> - Every message received must be acknowledged by the application
            through individual calls to Ack().</item>
            </p>
            <p>
            When the transport is flow controlled (for example, the application
            is overwhelming the underlying tcp connection), if it is not possible for the API to block until the congestion
            is relieved, the call to this method will return <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>
            on sessions configured with <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/> set to false. 
            The session event callback delegate will receive a subsequent <see cref="F:SolaceSystems.Solclient.Messaging.SessionEvent.CanSend"/> when the congestion
            is relieved. On sessions configured with <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/> set to true, the call to
            this method, will block until the congestion is relieved unless this is not possible (due to to the fact that
            the this method is called from a callback delegate). If it's not possible to block, this method will return <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL"/>
            with a subcode of <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CannotBlockInContext"/>
            </p>
            <p>
            In practice this occurs very rarely as most applications do not simulteously
            publish and receive large amounts of data on the same session.  On sessions
            that primarily receive data, sending acknowledgements alone cannot generate
            enough traffic to overwhelm the tcp connection.
            </p>
            <br></br>
            </summary>
            <param name="ADMessageId">ADMessageId of the message to acknowledge.</param>
            <returns> 
            When successful, it returns <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/>. 
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the start operation fails.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the flow is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>                
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IFlow.Properties">
            <summary>
            Returns a copy of the Flow properties
            </summary> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IFlow.GetSession">
            <summary>
            Returns a reference to the ISession that was used to create this flow.
            </summary>
            <returns>Returns a reference to the ISession that was used to create this flow</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IFlow.GetEndpoint">
            <summary>
            Returns a reference to the Endpoint which this flow is bound to.
            <p>
            Possible endpoints include <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>
            </p>
            <p>
            Endpoints can be durable or non-durable. Durable endpoints must be explicitly created through
            <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateDurableTopicEndpointEx(System.String)"/> or <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateQueue(System.String)"></see>.
            </p>
            <p>
            Non-durable endpoints are implicitly created after creating the flow and connecting the parent session, therefore
            calling this method before the parent <see cref="T:SolaceSystems.Solclient.Messaging.ISession"/> is connected will throw an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/>.
            </p>
            <p>
            Note that <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> is both an <see cref="T:SolaceSystems.Solclient.Messaging.IEndpoint"/> and <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/>, so it has both the 
            durability ( see <see cref="P:SolaceSystems.Solclient.Messaging.IEndpoint.Durable"/> ) and temporariness (see <see cref="P:SolaceSystems.Solclient.Messaging.IDestination.Temporary"/> ) properties.
            </p>
            </summary>
            <returns>An IEndpoint instance.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the flow is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IFlow.GetSubscription">
            <summary>
            Returns a reference to a <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> subscription instance.
            <p>
            Similar to Non-durable endpoints, temporary destinations returned by
            this method are implicitly created after the flow is created and parent session is connected.
            </p>
            </summary>
            <returns>An ITopic instance </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the flow is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IFlow.GetDestination">
            <summary>
            Returns the <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/> to which messages should be 
            published to get to this flow's bound <see cref="T:SolaceSystems.Solclient.Messaging.IEndpoint"/>
            <p>
            If bound to a <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/>, the returned IDestination
            will be of type <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/>
            </p>
            <p>
            If bound to a <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>, the returned IDestination
            will be of type <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>
            </p>
            <p>
            Otherwise, a null is returned
            </p>         
            </summary>
            <returns>An IDestination instance. </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the flow is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IFlow.GetTransactedSession">
            <summary>
            Returns a reference to the Transacted Sesion asociated to the Flow.
            </summary>
            <returns>
            The <see cref="T:SolaceSystems.Solclient.Messaging.ITransactedSession"/> associated with the Flow.
            </returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IFlow.ReceiveMsg(System.Int32)">
            <summary>
            Receives a message from a specified transacted Flow.
            It waits until a timeout or a message is received. No wait
            if timeout is zero.
            Applications must later call .Dispose() on the received message to release it.
            </summary>
            <param name="timeout">Timeout in milliseconds, 0 means no wait.</param>
            <returns>
            The received message is returned as a <see cref="T:SolaceSystems.Solclient.Messaging.IMessage"/>
            A null mussage is returned under these circumstances:
            The queue is empty and a timeout occured
            The queue is empty and the timeout was zero
            The flow is not a transacted flow
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            An OperationErrorException is thrown when this method fails.
            The exception will contain one of these return codes:
            
            <list type="bullet">
                <item>
                    <term>
                        <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL"/>
                    </term>
                    <description>
                        <list type="bullet">
                            <item>
                                <term><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.FlowUnbound"/></term>
                                <description>The flow is unbound and there are no messages waiting within the API to be delivered.</description>
                            </item>
                            <item>
                                <term><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommitRollbackAlreadyInProgress"/></term>
                                <description>A commit or rollback is in progress.</description>
                            </item>
                            <item>
                                <term><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidFlowOperation"/></term>
                                <description>The flow is not associated with a transacted session.</description>
                            </item>
                        </list>
                    </description>
                </item>
                <item>
                    <term><see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY"/></term>
                    <description>
                        <list type="bullet">
                            <item>
                                <term><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SessionNotEstablished"/></term>
                                <description>The session hasn't been established yet</description>
                            </item>
                            <item>
                                <term><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoTransactionStarted"/></term>
                                <description>No transaction has been started yet</description>
                            </item>
                        </list>
                    </description>
                </item>
            </list>
            </exception>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IDestination">
            <summary>
            Represents a Destination messages can be sent to. A destination can be one of the following:
            {Topic, Queue}
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IDestination.Name">
            <summary>
            Represents the physical name of a destination.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IDestination.Temporary">
            <summary>
            Indicates whether this is a temporary destination.
            <para>
            Temporary destinations are used mostly for request/reply message exchange patterns. Its scope and lifetime is that of the
            containing session.
            </para>
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ISubscription">
            <summary>
            Represents a Subscription, one of {IXpe, ITopic}.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IEndpoint">
            <summary>
            Represents an Endpoint one of <see cref="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IEndpoint.Name">
            <summary>
            The name of the Endpoint. A non-durable TopicEndpoint does not have a name.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IEndpoint.Durable">
            <summary>
            When true, the endpoint's life span is independent of the 
            corresponding IFlow or ISession.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IXpe">
            <summary>
            Represents an Xpath expression.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IXpe.Filter">
            <summary>
            If true, the Xpe is a filter.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IXpe.ConsumerId">
            <summary>
            The consumer id associated with the Xpe. This is used mainly
            to de-multiplex at the subscriber. The default is NULL_CONSUMERID.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IXpe.Expression">
            <summary>
            The Xpath expression.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IXpe.Namespaces">
            <summary>
            The namespaces referenced in the Expression.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ITopicEndpoint">
            <summary>
            Represents a Topic Endpoint (Durable or Non-Durable).
            This interface obsoletes <see cref="T:SolaceSystems.Solclient.Messaging.IDurableTopicEndpoint"/>.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IDurableTopicEndpoint">
            <summary>
            Represents a durable Topic Endpoint. This interface has
            been made obsolete in favor of ITopicEndpoint.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IQueue">
            <summary>
            Represents a Queue.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ITopic">
            <summary>
            Represents a Topic.
            <h2> Supported Topic Syntax </h2>
            Topics are in the form level1/level2/level3. The total length of a topic can be 250 bytes.
            <h3> Supported Subscription Syntax </h3>
            <item>Subscriptions are in the form level1/level2/level3. </item>
            <item>The total length of a subscription can be 250 bytes.</item>
            <item>The '>' character, when alone at the final level of a subscription, means match one or more levels at the end of a received topic. 
            For example, level1/level2/level3/> will match level1/level2/level3/level4 and level1/level2/level3/level4/level5, but not level1/level2/level3. </item>
            <item>'>' elsewhere in the subscription has no special meaning. For example, level1>/level2 .</item>
            <item>The '*' character is a wildcard. When alone at a level, it means match any string at that level in a received topic. For example, level1/ * /level3 matches /level1/level2/level3. </item>
            <item>'*' can also be used to match a level that starts with a specified string.
            For example level1/lev* /level3 matches /level1/level2/level3. </item>
            <item>A '*'cannot appear at the beginning or within a string. For example, "lev*1" and "*evel" are not valid. </item>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ITopic.IsReceiveAllDeliverToOne">
            <summary>
            When this property is true, and when this topic is used as a subscription, messages matching this topic
            are still delivered whether or not they have the DTO flag set.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ISubscriberEndpoint">
            <summary>
            Deprecated.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IClientName">
            <summary>
            IClientName represents a remote client. It is used to identify a client currently connected and
            on behalf of which an application wants to add/remove subscriptions.
            <p>
            To acquire an IClientName instance, applications must call <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateClientName(System.String)"/>
            </p>
            <p>
            To add or remove subscriptions on behalf of a remote client, applications must call 
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Subscribe(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.Int32,System.Object)"/> and
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Unsubscribe(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.Int32,System.Object)"/> respectively.
            </p>
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IStatsAccessible">
            <summary>
            Implemented by <c>ISession</c> and <c>IFlow</c>, this interface exposes Transmit and Receive statistics collected by the 
            messaging API.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IStatsAccessible.ClearStats">
            <summary>
            Clears the stats dictionary.
            </summary>
            <returns>Return code</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IStatsAccessible.GetTxStats">
            <summary>
            Returns the Tx Stats.
            </summary>
            <returns>The Tx Stats.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IStatsAccessible.GetRxStats">
            <summary>
            Returns the Rx Stats.
            </summary>
            <returns>The Rx Stats.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ContextEventArgs">
            <summary>
            Passed as an argument to Context EventHandler delegate.
            </summary>/// 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextEventArgs.#ctor(SolaceSystems.Solclient.Messaging.SDKErrorInfo,System.Exception)">
            <summary>
            An internal constructor.
            </summary>
            <param name="errorInfo">Detailed error information.</param>
            <param name="ex">The exception that occurred.</param>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextEventArgs.ErrorInfo">
            <summary>
            Optional, if present it will contain more information about the underlying error.        
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextEventArgs.Exception">
            <summary>
            Optional, if present, it represents an exception that is thrown on the context thread
            and is caught in the main loop of the context thread.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.MessageEventArgs">
            <summary>
            Passed as an argument to the message receive <c>EventHandler</c> delegate. 
            </summary>/// 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.MessageEventArgs.#ctor(SolaceSystems.Solclient.Messaging.IMessage,SolaceSystems.Solclient.Messaging.BaseProperties)">
            <summary>
            An internal constructor.
            </summary>
            <param name="message">The message that was received.</param>
            <param name="eventProperties">The event's properties.</param>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.MessageEventArgs.Message">
            <summary>
            Returns the received <c>IMessage</c> instance.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.MessageEventArgs.EventProperties">
            <summary>
            Optional, to be used in the future to further qualify the event.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SessionEventArgs">
            <summary>
            An <c>EventArgs</c> instance that is passed to the session <c>EventHandler</c>. 
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SessionEventArgs.#ctor(System.Int32,System.String,SolaceSystems.Solclient.Messaging.SessionEvent,System.Object,SolaceSystems.Solclient.Messaging.IProperties)">
            <summary>
            An internal constructor.
            </summary>
            <param name="responseCode">A response code from the API call.</param>
            <param name="info">A response string from the API call.</param>
            <param name="eventEnum">The event that occurred.</param>
            <param name="correlationKey">The correlation key used in the request.</param>
            <param name="eventProperties">The event properties.</param>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.ResponseCode">
            <summary>
            A response code returned by the appliance for some events; 
            otherwise zero.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.Info">
            <summary>
            An optional string that provides further information about the event.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.Event">
            <summary>
            The type of the session event that has occurred.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.EventProperties">
            <summary>
            Optional, present for future expansion.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SessionEventArgs.CorrelationKey">
            <summary>
            The correlation key passed in during session API calls.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SessionEventArgs.ToString">
            <summary>
            Returns a <c>string</c> that represents the current Object.
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.FlowEventArgs">
            <summary>
            An EventArgs instance that is passed through a flow's EventHandler. It represents an event
            of interest occuring at the flow level.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FlowEventArgs.#ctor(System.Int32,System.String,SolaceSystems.Solclient.Messaging.FlowEvent,SolaceSystems.Solclient.Messaging.IProperties)">
            <summary>
            An internal class constructor.
            </summary>
            <param name="responseCode">A response code from the SMF message.</param>
            <param name="info">A response string from the SMF message.</param>
            <param name="eventEnum">The event that occurred.</param>
            <param name="eventProperties">The event properties.</param>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowEventArgs.ResponseCode">
            <summary>
            This represents response code returned by the appliance for some events, 
            otherwise zero.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowEventArgs.Info">
            <summary>
            Optional, provides further information about the event when available.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowEventArgs.EventProperties">
            <summary>
            Optional, present for future expansion.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FlowEventArgs.Event">
            <summary>
            The flow event type that occurred.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FlowEventArgs.ToString">
            <summary>
            ToString() implementation
            </summary>
            <returns>Returns a string representation</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.MessageDeliveryMode">
            <summary>
            The different message delivery modes.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageDeliveryMode.Direct">
            <summary>
            Direct
            <p>
            This mode provides at-most-once message delivery. Direct messages have 
            the following characteristics:
            <item>They are not retained for clients that are not connected to a Solace 
            appliance.</item>
            <item>They can be discarded when congestion or system failures are encountered.</item>
            <item>They can be reordered in the event of network topology changes.</item></p>
            <p>Direct messages are most appropriate for messaging applications that 
            require very high-rate or very low-latency message transmission. Direct  
            Messaging enables applications to efficiently publish messages to a large 
            number of clients with matching subscriptions.</p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageDeliveryMode.Persistent">
            <summary>
            Persistent
            <p>This mode provides once-and-only-once message delivery. A Persistent
            delivery mode is used for Guaranteed Messaging, and this delivery mode 
            is most appropriate for applications that require persistent storage 
            of the messages they send or intend to receive.</p>
            <p>Persistent messages have the following characteristics:</p>
            <item>They cannot be discarded or lost (once they are acknowledged by the appliance).</item>
            <item>They cannot be reordered in the event of network topology changes.</item>
            <item>They cannot be delivered more than once to a single client (unless the </item>
            redelivered message flag is applied).
            <item>When they match subscriptions on durable endpoints, they are retained </item>
            for a client when that client is not connected.
            <p>Persistent messages are most appropriate for applications that require 
            persistent storage of the messages they send or intend to receive.
            The quality of service offered by Guaranteed Messaging is analogous to 
            JMS Persistent messaging with durable subscriptions.</p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageDeliveryMode.NonPersistent">
            <summary>
            NonPersistent
            <p>
            This mode is functionally the same as Persistent. It exists to facilitate 
            interaction with JMS applications. In most situations where you want 
            to use Guaranteed Messaging, it is recommended that you use a Persistent 
            delivery mode.
            </p>
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.UserCos">
            <summary>
            Defines the possible Class of Service level of a given message.
            <p>
            The Class of Service has different semantics for direct and guaranteed messages.
            For direct messaging, it determines the WRR weight for the message. For guaranteed messaging, it indicates
            the discard eligibility of the message if the endpoint is congested (see <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.LowPriorityMsgCongestion"/>)
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.UserCos.Cos1">
            <summary>
            The Default class of service for published messages, it represents
            the lowest value.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.UserCos.Cos2">
            <summary>
            The middle class of service value.
            <p>
            For guaranteed messaging, it is reserved for future use and is treated thes same as Cos1.
            </p>          
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.UserCos.Cos3">
            <summary>
            The highest class of service value.       
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDKErrorSubcode">
            <summary>
            A subcode that gives more detailed error information. The last sub-code is stored
            on a per-thread basis and can be retrieved by an application thread using GetLastSDKErrorInfo of <see cref="T:SolaceSystems.Solclient.Messaging.ContextFactory"/>.
            Applications can take different actions based on the subcode.
            </summary>
            <remarks>
            <h4>Common Subcodes</h4>
            The following subcodes can be returned from all API functions:
            <list type="bullet">
                <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamOutOfRange" /></item>
                <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InternalError" /></item>
                <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfMemory" /></item>
                <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference" /> (functions that accept object parameters)</item>
                <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamConflict" /> (functions that have interdependent parameters)</item>
                <item><see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CannotBlockInContext" /> (functions that result in an interaction with the message router)</item>
            </list>
            </remarks>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Ok">
            <summary>
            No error
            <p>
            Appliance Response: 200 OK
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamOutOfRange">
            <summary>
            An API call was made with an out-of-range parameter.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference">
            <summary>
            An API call was made with a null or invalid reference parameter.
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamConflict">
            <summary>
            An API call was made with a parameter combination that is not valid.
            <p>
            Appliance Response: N/A
            </p>       
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InsufficientSpace">
            <summary>
            An API call failed due to insufficient space to accept more data.
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfResources">
            <summary>
            An API call failed due to lack of resources (for example: starting a timer when all timers are in use). 
            <p>
            Appliance Response: 400 Not Enough Space
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InternalError">
            <summary>
            An API call had an internal error (not an application fault).
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfMemory">
            <summary>
            An API call failed due to inability to allocate memory. 
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ProtocolError">
            <summary>
            An API call failed due to a protocol error with the appliance(not an application fault).
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.FactoryInitNotCalled">
            <summary>
             An API call failed due to ContextFactory.Init() not being called first.
            <p>
            Appliance Response: N/A
            </p> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.Timeout">
            <summary>
            An API call failed due to a timeout.
            <p>
            Appliance Response: N/A
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.KeepAliveFailure">
            <summary>
             Session keep-alive detected a failed session.
            <p>
            Appliance Response: N/A
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SessionNotEstablished">
            <summary>
            An API call failed due to the session not being established.
            <p>
            Appliance Response: N/A
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OperatingSystemError">
            <summary>
            An API call failed due to a failed operating system call. An error string is stored.
            <p>
            Appliance Response: N/A
            </p> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommunicationError">
            <summary>
            An API call failed due to a communication error. An error string is stored. 
            <p>
            Appliance Response: N/A
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UserDataTooLarge">
            <summary>
             An attempt was made to send a message with user data larger than what is supported. 
            <p>
            Appliance Response: N/A
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TopicTooLarge">
            <summary>
            An attempt was made to use a topic which is longer than maximum supported length.
            <p>
            Appliance Response: N/A
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicSyntax">
            <summary>
            An attempt was made to use a topic which has a syntax that is not supported. 
            <p>
            Appliance Response: 400 Topic Parse Error
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.XmlParseError">
            <summary>
            The appliance could not parse an XML message. 
            <p>
            Appliance Response: 400 XML Parse Error
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.LoginFailure">
            <summary>
            A client could not log into the appliance (bad username or password). 
            <p>
            Appliance Response: All 401 and 404 error codes from appliance
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidVirtualAddress">
            <summary>
            An attempt was made to connect to wrong IP address on the appliance (must use CVRID, if configured).
            Or the appliance CVRID has changed and this was detected on reconnect.
            <p>
            Appliance Response: 403 Invalid Virtual Router Address
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientDeleteInProgress">
            <summary>
            Client login is not currently possible as previous instance of the same client still being deleted.
            <p>
            Appliance Response: 503 Subscriber Delete In Progress 
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TooManyClients">
            <summary>
            Client login is not currently possible due to maximum number of active clients on appliance.
            <p>
            Appliance Response: "503 Too Many Clients", "503 Too Many Publishers" or "503 Too Many Subscribers"
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionAlreadyPresent">
            <summary>
            A client attempted to add a subscription which already exists. 
            This response only occurs if session property IgnoreDuplicateSubscriptionError is false.
            <p>
            Appliance Response: "400 already exists" or "400 Subscription Already Exists"
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionNotFound">
            <summary>
            Client attempted to remove a subscription which did not exist. 
            This response only occurs if session property IgnoreDuplicateSubscriptionError is false.
            <p>
            Appliance Response: "400 not found" or "400 Subscription Not Found"
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionInvalid">
            <summary>
            A client attempted to subscribe/unsubscribe from a subscription that is not valid. 
            <p>
            Appliance Response: "400 not supported", "400 parse error" or "400 Subscription Parse Error"
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionOther">
            <summary>
            The appliance rejected a subscription subscribe/unsubscribe request for a reason 
            not separately enumerated.
            <p>
            Appliance Response: N/A - this is no longer implemented.
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ControlOther">
            <summary>
            The appliance rejected a control message for another reason not separately enumerated.
            <p>
            Appliance Response: Default error subCode for Appliance error responses
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.DataOther">
            <summary>
            The appliance rejected a data message for another reason not separately enumerated. 
            <p>
            Appliance Response: Default error subCode for error response to published data.
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.LogFileError">
            <summary>
            Could not open the log file name specified by the application for writing. 
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessageTooLarge">
            <summary>
            A client attempted to send a message larger than that supported by the appliance. 
            <p>
            Appliance Response: "400 Document Is Too Large" or "400 Message Too Long"
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionTooMany">
            <summary>
            A client attempted to add a subscription that exceeded the maximum number allowed. 
            <p>
            Appliance Response: 400 Max Num Subscriptions Exceeded
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidSessionOperation">
            <summary>
            An API call failed because the attempted operation was invalid for the session. 
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TopicMissing">
            <summary>
            A send call was made that did not have a topic in a mode where one is required (client mode).
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.AssuredMessagingNotEstablished">
            <summary>
            A send call was made to send a Guaranteed message before Guaranteed Messaging is established.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.AssuredMessagingToEstablished">
            <summary>
            Deprecated; AssuredMessagingNotEstablished replaces it.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.AssuredMessagingStateError">
            <summary>
            An attempt was made to initialize Guaranteed Messaging when it is already initialized.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNameTopicConflict">
            <summary>
            Both Queue Name and Topic are specified in Session.Send(). 
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNameTooLarge">
            <summary>
            An attempt was made to use a queue name which is longer than maximum supported length. 
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNameInvalidMode">
            <summary>
            An attempt was made to use a queue name on a non-Guaranteed message.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxTotalMessageSizeExceeded">
            <summary>
            An attempt was made to send a message with a total size greater than that supported by the protocol.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.DataBlockAlreadyExists">
            <summary>
            An attempt was made to allocate a datablock for a message element when one already exists.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoStructuredDataInContainer">
            <summary>
            An attempt was made to create a container to read structured data where none exists.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.StructuredDataContainerBusy">
            <summary>
            An attempt was made to add a field to a map or stream while a sub map or stream is being built.
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidStructuredDataConversion">
            <summary>
            An attempt was made to retrieve structured data with wrong type.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.AttemptToModifySessionPropertyWhenNotIdle">
            <summary>
            An attempt was made to modify a property that cannot be modified while session is not idle.
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessageVPNNotAllowed">
            <summary>
            The Message VPN name configured for the session does not exist.
            <p>
            Appliance Response: 403 Message VPN Not Allowed
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientNameInvalid">
            <summary>
            The client name chosen has been rejected as invalid by the appliance.  
            <p>
            Appliance Response: 400 Client Name Parse Error
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessageVPNUnavailable">
            <summary>
            The Message VPN name set for the session (or the default Message VPN if no specific Message VPN name was set) is currently shutdown on the appliance.
            <p>
            Appliance Response: 503 Message VPN Unavailable
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientUserNameIsShutdown">
            <summary>
            The username for the client is administratively shutdown on the appliance.
            <p>
            Appliance Response: 403 Client Username Is Shutdown
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.DynamicClientsNotAllowed">
            <summary>
            The username for the session has not been set and dynamic clients are not allowed.
            <p>
            Appliance Response: 403 Dynamic Clients Not Allowed
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientNameAlreadyInUse">
            <summary>
            The session is attempting to use a client name that is in use by another client in the Message VPN, and the appliance is configured to reject the new session.
            <p>
            Appliance Response: 403 Client Name Already In Use
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheNoData">
            <summary>
            When the cache request returns ReturnCode.SOLCLIENT_INCOMPLETE, this subcode indicates that there is no cached data in the designated cache.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheSuspectData">
            <summary>
            When the designated cache responds to a cache request with suspect data, the API returns ReturnCode.SOLCLIENT_INCOMPLETE with this subcode.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheErrorResponse">
            <summary>
            The Cache Instance has returned an error response to the cache request. 
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheInvalidSession">
            <summary>
            The cache session operation failed because the session has been destroyed.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheOperationRequestTimeout">
            <summary>
            The cache session operation failed because the request timeout expired.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheLiveDataFulfill">
            <summary>
            The cache session operation completed when live data arrived on the topic requested.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheRequestAlreadyInProgress">
            <summary>
            A cache request has been made when there is already a cache request outstanding on the same topic and <see cref="F:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction.FLOW_THRU"/> was not set.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MissingReplyTo">
            <summary>
            A message does not have the reply-to field when it is needed. 
            <p>
            Appliance Response: N/A
            </p> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CannotBindToQueue">
            <summary>
            Already bound to the Guaranteed Messaging queue, or not authorized to bind to the Guaranteed Messaging queue. 
            <p>
            Appliance Response: "400 Cannot bind to another subscriber's topic queue." of "400 Already Bound" 
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicNameForTE">
            <summary>
            An attempt was made to bind to a Guaranteed delivery Topic Endpoint with an invalid topic.
            <p>
            Appliance Response: 400 Invalid Topic Name
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicNameForDTE">
            <summary>
            Deprecated; InvalidTopicNameForTE replaces it.
            <p>
            Appliance Response: 400 Invalid Topic Name 
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownQueueName">
            <summary>
            An attempt was made to bind to an unknown GQueue name (for example, a Queue that is not configured on the appliance).
            Or an attempt was made to deprovision a Queue that does not exist. 
            This subcode is only returned if <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Deprovision(SolaceSystems.Solclient.Messaging.IEndpoint,System.Int32,System.Object)"/> was called with
            ignoreIfEndpointDoesNotExist equals to false        
            <p>
            Appliance Response: 503 Unknown Queue
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownTEName">
            <summary>
            An attempt was made to create a flow to an unknown Topic Endpoint name (for example, a Topic Endpoint that is not configured on the appliance). 
            Or an attempt was made to deprovision a Topic Endpoint  that does not exist. 
            This subcode is only returned if <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Deprovision(SolaceSystems.Solclient.Messaging.IEndpoint,System.Int32,System.Object)"/> was called with
            ignoreIfEndpointDoesNotExist equals to false
            <p>
            Appliance Response: 503 Unknown Durable Topic Endpoint
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownDTEName">
            <summary>
            Deprecated; UnknownTEName replaces it.
            <p>
            Appliance Response: 503 Unknown Durable Topic Endpoint
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxClientsForQueueReached">
            <summary>
            An attempt was made to bind to a Queue that already has its maximum number of clients.
            <p>
            Appliance Response: 503 Max clients exceeded for queue
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxClientsForTEReached">
            <summary>
            An attempt was made to bind to a Topic Endpoint that already has its maximum number of clients. 
            <p>
            Appliance Response: 503 Max clients exceeded for durable topic endpoint 
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxClientsForDTEReached">
            <summary>
            Deprecated; MaxClientsForTEReached replaces it.
            <p>
            Appliance Response: 503 Max clients exceeded for durable topic endpoint
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnexpectedUnbind">
            <summary>
            An unexpected unbind response was received for a Queue or durable Topic Endpoint,
            and the queue or DTE was deleted from the appliance.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueNotFound">
            <summary>
            The specified Guaranteed Delivery queue was not found when publishing a message.
            <p>
            Appliance Response: 400 Queue Not Found 
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientACLDenied">
            <summary>
            The client login to the appliance was denied because the IP address/netmask combination used for the client 
            is designated in the ACL (Access Control List) as a deny connection for the given Message VPN and username.
            <p>
            Appliance Response: 403 Forbidden
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionACLDenied">
            <summary>
            The addition of a subscription was denied because it matched a subscription that was defined on 
            the ACL (Access Control List).
            <p>
            Appliance Response: 403 Subscription ACL Denied 
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.PublishACLDenied">
            <summary>
            A message could  not be published because its topic matched that of a topic defined on the ACL (Access Control List).
            <p>
            Appliance Response: 403 Publish ACL Denied
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.DTOInvalid">
            <summary>
            An attempt was made to set both Deliver-To-One and Guaranteed Delivery in the same message.
            (Deprecated: DTO will be applied to the corresponding demoted direct message)
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SpoolOverQuota">
            <summary>
            Message was not delivered because the Guaranteed Delivery message spool is over its allotted space quota.
            <p>
            Appliance Response: 503 Spool Over Quota 
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QueueShutdown">
            <summary>
            An attempt was made to create a flow to a shutdown Guaranteed Delivery queue.
            <p>
            Appliance Response: 503 Queue Shutdown
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TEShutdown">
            <summary>
            An attempt was made to create a flow to a shutdown Guaranteed Delivery Topic Endpoint.
            <p>
            Appliance Response: "503 Durable Topic Endpoint Shutdown", "503 TE Shutdown", or "503 Endpoint Shutdown" 
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoMoreNonDurableQueueOrTE">
            <summary>
            An attempt was made to create a flow to a non-durable Guaranteed Delivery Queue or Topic Endpoint, 
            and the appliance is out of resources.
            <p>
            Appliance Response: 503 No More Non-Durable Queue or Topic Endpoint
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.EndpointAlreadyExists">
            <summary>
            An attempt was made to provision a Queue or Topic Endpoint that already exists. 
            This subcode is only returned if <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Provision(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.EndpointProperties,System.Int32,System.Object)"/> was called with
            ignoreErrorIfEndpointAlreadyExists = false.
            <p>
            Appliance Response: 400 Endpoint Already Exists
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.PermissionNotAllowed">
            <summary>
            An attempt was made to delete or create a Queue or Topic Endpoint when the session does not 
            have authorization for the action. 
            <p>
            This subcode is also returned when an attempt it made to remove a message from an endpoint 
            when the session does not have 'consume' authorization and when an attempt is made to 
            add or remove a topic subscription from a queue when the session does not have 'modify-topic' authorization.
            </p>
            <p>
            Appliance Response: 403 Permission Denied
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidSelector">
            <summary>
            An attempt was made to crate a flow to a Queue or Topic Endpoint with an invalid selector.
            <p>
            Appliance Response: 406 Invalid Selector
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxMsgUsageExceeded">
            <summary>
            Publishing of message denied due to exceeding the maximum spooled message count.
            <p>
            Appliance Response: 503 Max message usage exceeded 
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.EndpointPropertyMismatch">
            <summary>
            Attempted to create a dynamic durable endpoint and it was found to exist with different properties.
            <p>
            Appliance Response: 401 Endpoint Property Mismatch
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionManagerDenied">
            <summary>
            Attempted to add a subscription to another client when session does not have subscription manager privileges.
            <p>
            Appliance Response: 403 Subscription Manager Denied 
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownClientName">
            <summary>
            Attempted to add a subscription to another client that is unknown on the appliance.
            <p>
            Appliance Response: 403 Unknown Client Name
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.QuotaOutOfRange">
            <summary>
            Attempted to provision an endpoint with a quota that is out of range.
            <p>
            Appliance Response: 400 Quota Out Of Range
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionAttributesConflict">
            <summary>
            The client attempted to add a subscription which already exists but it has different properties (such as <see cref="P:SolaceSystems.Solclient.Messaging.ITopic.IsReceiveAllDeliverToOne"/>).
            <p>
            Appliance Response: 400 Subscription Attributes Conflict With Existing Subscription
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoLocalNotSupported">
            <summary>
            The client attempted to establish a session or flow with No Local enabled and the capability is not supported by the appliance.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnsubscribeNotAllowed">
            <summary>
            The client attempted to unsubscribe a topic from a Topic Endpoint while there 
            were still flows bound to the endpoint.
            <p>
            Appliance Response: 400 Unsubscribe not allowed, client(s) bound to DTE
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CannotBlockInContext">
            <summary>
            An API was invoked in the <see cref="T:SolaceSystems.Solclient.Messaging.IContext"/> thread that would have blocked otherwise. 
            For example, a call was made to send a message when the session is configured 
            with <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/> enabled and the transport channel is full. 
            All application callback functions are executed in the <see cref="T:SolaceSystems.Solclient.Messaging.IContext"/> thread.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ActiveFlowIndicationUnsupported">
            <summary>
            A flow creation failed because the appliance didn't have support for the requested Active Flow Indication.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnresolvedHost">
            <summary>
            The client failed to connect because the host name could not be resolved. 
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidFlowOperation">
            <summary>
            An API call failed because the requested operation was invalid for the flow.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownFlowName">
            <summary>
            The session was disconnected due to loss of the publisher flow state. 
            All (unacked and unsent) messages held by the API were deleted. 
            To connect the session, applications need to call <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Connect"/> again.
            <p>
            Appliance Response: 400 Unknown Flow Name
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplicationIsStandby">
            <summary>
            An attempt to perform an operation using a VPN that is configured to be STANDBY for replication.
            <p>
            Appliance Response: 403 Replication Is Standby
            </p>
            </summary>
            
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.LowPriorityMsgCongestion">
            <summary>
            The message was rejected by the appliance as one or more matching endpoints exceeded the reject-low-priority-msg-limit configuration.
            <p>
            Appliance Response: 503 Low Priority Msg Congestion
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SSLLibraryNotLoaded">
            <summary>
            The client attempted to establish a SSL session with SSL library not loaded.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.LibraryNotLoaded">
            <summary>
            The client failed to find a required library or symbol
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.FailedLoadingTruststore">
            <summary>
            The client failed to load the trust store.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UntrustedCertificate">
            <summary>
            The client attempted to connect to an appliance that has a suspect certficate.
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UntrustedCommonName">
            <summary>
            The client attempted to connect to an appliance that has a suspect common name. 
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CertificateDateInvalid">
            <summary>
            The client attempted to connect to an appliance that does not have a valid certificate date. 
            <p>
            Appliance Response: N/A
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.FailedLoadingCertificateAndKey">
            <summary>
            The client failed to load certificate and/or private key files.
            <p>
            Appliance Response: N/A
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.BasicAuthenticationIsShutdown">
            <summary>
            The client attempted to connect to an appliance that has the basic authentication shutdown.
            <p>
            Appliance Response: 403 Basic Authentication is Shutdown
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientCertificateAuthenticationIsShutdown">
            <summary>
            The client attempted to connect to an appliance that has the client certificate authentication shutdown.
            <p>
            Appliance Response: 403 Client Certificate Authentication is Shutdown
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UntrustedClientCertificate">
            <summary>
            The client failed to connect to an appliance as it has a suspect client certificate.
            <p>
            Appliance Response: "403 Untrusted Certificate" or  "403 Certificate Chain Too Long" or "403 Certificate Error"
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientCertificateDateInvalid">
            <summary>
            The client failed to connect to an appliance as it does not have a valid client certificate date. 
            <p>
            Appliance Response: "403 Certificate Not Yet Valid" or "403 Certificate Expired"
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheRequestCancelled">
            <summary>
            The cache request has been cancelled by the user (by calling <see cref="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.CancelCacheRequests"/>)
            <p>
            Appliance Response: N/A
            </p> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.DeliveryModeUnsupported">
            <summary>
            Attempt was made from a Transacted Session to send a message with
            <see cref="F:SolaceSystems.Solclient.Messaging.MessageDeliveryMode.Direct"/> set
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.PublisherNotCreated">
            <summary>
            The client attempted to send a message without a publisher
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.FlowUnbound">
            <summary>
            Client attempted to receive messages from
            an unbound Flow with no queued messages in memory
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTransactedSessionID">
            <summary>
            The client attempted to commit or rollback a transaction with an invalid
            transacted session id
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTransactionID">
            <summary>
            Commit or rollback a transaction with an invalid transaction id
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxTransactedSessionsExceeded">
            <summary>
            Failed to open a transacted session as it exceeded the max transacted sessions
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TransactedSessionNameInUse">
            <summary>
            The client attempted to open a transacted session with a name already in use
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ServiceUnavailable">
            <summary>
            Guarenteed delivery services are not enabled on the appliance
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoTransactionStarted">
            <summary>
            The client attempted to commit an unknown transaction
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.PublisherNotEstablished">
            <summary>
            The client attempted to send a message from a transacted session before
            a publisher is established
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessagePublishFailure">
            <summary>
            The client attempted to commit a transaction after a guaranteed delivery
            publish failure occured
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TransactionFailure">
            <summary>
            The client attempted to commit a transaction with too many transaction
            steps
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessageConsumeFailure">
            <summary>
            The client attempted to commit a transaction with a consume failure
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.EndpointModified">
            <summary>
            The client attempted to commit a transaction involving an Endpoint which had been shutdown or deleted
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidConnectionOwner">
            <summary>
            The client attempted to commit a transaction with an unknown connection id
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.KerberosAuthenticationIsShutdown">
            <summary>
            The client attempted to connect to an appliance that has Kerberos authentication shutdown
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommitRollbackAlreadyInProgress">
            <summary>
            The client attemped to commit or rollback a transaction multiple times
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnbindResponseLost">
            <summary>
            The application called disposed or otherwise destroyed a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> object and the unbind-response was not received.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MaxTransactionsExceeded">
            <summary>
            The client failed to open a Transacted Session <see cref="T:SolaceSystems.Solclient.Messaging.ITransactedSession"/>as the maximum number of transactions was exceeded.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CommitStatusUnknown">
            <summary>
            The commit response was lost due to a transport layer reconnection to an alternate host in the host list. The commit may have 
            succeeded on the message-router before the response was lost. Or the commit request may have failed (roll back).  
            Applications that treat the failure as a rollback must allow for duplicate transactions.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ProxyAuthRequred">
            <summary>
            The host entry did not contain proxy authentication when required by the proxy server 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ProxyAuthFailure">
            <summary>
            The host entry contained invalid proxy authentication when required by the proxy server 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.NoSubscriptionMatch">
            <summary>
            The client attempted to publish a guaranteed message to a topic that did not have any guaranteed subscription matches or only matched a replicated topic.
            Appliance Response: "503 No Subscription Match"
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionMatchError">
            <summary>
            The client attempted to bind to a non-exclusive topic endpoint that is already bound with a different subscription.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SelectorMatchError">
            <summary>
            The client attempted to bind to a non-exclusive topic endpoint that is already bound with a different ingress selector.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayNotSupported">
             <summary>
            Replay is not supported on the Solace Message Router
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayDisabled">
             <summary>
            Replay is not enabled in the message-vpn
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientInitiatedReplayNonExclusiveNotAllowed">
             <summary>
            The client attempted to start replay on a flow bound to a non-exclusive endpoint
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientInitiatedReplayInactiveFlowNotAllowed">
             <summary>
            The client attempted to start replay on an inactive flow
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ClientInitiatedReplayBrowserFlowNotAllowed">
             <summary>
            The client attempted to bind with both {@link FlowHandle.PROPERTIES#BROWSER} enabled and {@link FlowHandle.PROPERTIES#REPLAY_START_LOCATION} set
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayTemporaryNotSupported">
             <summary>
            Replay is not supported on temporary endpoints
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.UnknownStartLocation">
            <summary>
             The client attempted to start a replay but provided an unknown start location type.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayMessageUnavailable">
             <summary>
            A replay in progress on a flow failed because messages to be replayed were trimmed from the replay log
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayStarted">
            <summary>
            A replay was started on the queue/topic endpoint, either by another client or by an adminstrator on the message router.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayCancelled">
             <summary>
            A replay in progress on a flow was administratively cancelled, causing the flow to be unbound
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayStartTimeNotAvailable">
             <summary>
            A replay was requested but the requested start time is not available in the replay log
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayMessageRejected">
             <summary>
            The Solace Message Router attempted to replay a message, but the queue/topic endpoint rejected the message to the sender
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayLogModified">
             <summary>
            A replay in progress on a flow failed because the replay log was modified
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MismatchedEndpointErrorId">
            <summary>
             Endpoint error ID in the bind request does not match the endpoint's error ID.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfReplayResources">
            <summary>
            A replay was requested, but the router does not have sufficient resources to fulfill the request, due to too many active replays.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.TopicOrSelectorModifiedOnDurableTopicEndpoint">
            <summary>
            A replay was in progress on a Durable Topic Endpoint (DTE) when its topic or selector was modified, causing the replay to fail.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayFailed">
             <summary>
            A replay in progress on a flow failed
             </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CompressedSslNotSupported">
            <summary>
            The client attempted to establish a Session or Flow with ssl and compression, but the capability is not supported by the appliance.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SharedSubscriptionsNotSupported">
            <summary>
            The client attempted to add a shared subscription, but the capability is not supported by the appliance.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SharedSubscriptionsNotAllowed">
            <summary>
            The client attempted to add a shared subscription on a client that is not permitted to use shared subscriptions.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SharedSubscriptionsEndpointNotAllowed">
            <summary>
            The client attempted to add a shared subscription to a queue or topic endpoint.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ObjectDestroyed">
            <summary>
            The operation cannot be completed because the object (context, session, flow) for the method has been destroyed in another thread.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.DeliveryCountNotSupported">
            <summary>
            The message was received from endpoint that does not support delivery count.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ReplayStartMessageUnavailable">
            <summary>
            A replay was requested but, the requested start message is not available in the replay log.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.MessageIdNotComparable">
            <summary>
            Replication Group Message Id are not comparable. Messages must be published to the same broker or HA pair for their Replicaton Group Message Id to be comparable.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SessionEvent">
            <summary>
            The session event enumeration; this is returned with session event delegate <c>EventArgs</c>.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.UpNotice">
            <summary>
            The session is established.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.DownError">
            <summary>
            The session was established and then went down.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.ConnectFailedError">
            <summary>
            The session attempted to connect but was unsuccessful.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.RejectedMessageError">
            <summary>
            The appliance rejected a published message.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.SubscriptionError">
            <summary>
            The appliance rejected a subscription (add or remove).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.MessageTooBigError">
            <summary>
            The API discarded a received message that exceeded the set session buffer size. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.Acknowledgement">
            <summary>
            The oldest transmitted Persistent/Non-persistent message has been acknowledged.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.AssuredDeliveryDown">
            <summary>
            Guaranteed Delivery publishing is not available. The guaranteed delivery capability on the session has been disabled by some action on the appliance.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.TEUnsubscribeError">
            <summary>
            The Topic Endpoint unsubscribe request failed.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.DTEUnsubscribeError">
            <summary>
            Deprecated; TEUnsubscribeError replaces it.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.TEUnsubscribeOk">
            <summary>
            The Topic Endpoint unsubscribe request was successful.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.DTEUnsubscribeOk">
            <summary>
            Deprecated; TEUnsubscribeOk replaces it.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.CanSend">
            <summary>
            Send is no longer blocked.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.Reconnecting">
            <summary>
            The session has gone down, and automatic reconnect attempt is in progress. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.Reconnected">
            <summary>
             The automatic reconnect of session was successful, and the session was reestablished. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.ProvisionError">
            <summary>
             The Endpoint provision/deprovision request failed. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.ProvisionOk">
            <summary>
             The Endpoint provision/deprovision request completed. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.SubscriptionOk">
            <summary>
            The subscribe or unsubscribe operation has succeeded. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.VirtualRouterNameChanged">
            <summary>
            The appliance's Virtual Router Name changed during a reconnect operation. 
            This might render existing queues or temporary topics invalid.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.ModifyPropertyOk">
            <summary>
            The session property modification completed. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.ModifyPropertyFail">
            <summary>
            The session property modification failed.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SessionEvent.RepublishUnackedMessages">
            <summary>
            After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name 
            response when reconnecting the GD publisher flow. If configured to auto-retry 
            (<see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.GdReconnectFailAction"/>)
            this event is generated to indicate how many unacknowledged messages are retransmitted on success.
            As the publisher state has been lost on failover, receiving this event may indicate that some
            messages have been duplicated in the system.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.FlowEvent">
            <summary>
            Flow event enumeration.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowEvent.UpNotice">
            <summary>
            The flow is established.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowEvent.DownError">
            <summary>
            The flow was established and then disconnected by the appliance, 
            likely due to operator intervention.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowEvent.BindFailedError">
            <summary>
            The flow attempted to connect but was unsuccessful.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowEvent.RejectedMessageError">
            <summary>
            The appliance rejected a published message.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowEvent.ParentSessionDown">
            <summary>
            The session for the flow was disconnected. 
            The flow will rebind automatically when the session is reconnected.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowEvent.FlowActive">
            <summary>
            The flow is active.
            This event is generated by the API when the flow is immediately active after creation
            or when the flow later becomes active.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowEvent.FlowInactive">
            <summary>
            The flow is inactive.
            This event is generated by the API when the flow becomes inactive.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowEvent.Reconnecting">
            <summary>
            The flow is reconnecting.
            This event is generated by the API when the flow is disconnected, but is configured to auto-rebind.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.FlowEvent.Reconnected">
            <summary>
            The flow reconneced.
            This event is generated by the API when the flow auto rebind succeeds.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ReturnCode">
            <summary>
            The return code from certain API calls.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK">
            <summary>
            The API call was successful.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK">
            <summary>
            An API call would block, but non-blocking was requested.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS">
            <summary>
            The API call is in progress (non-blocking mode).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY">
            <summary>
            The API could not complete because the object is not ready (for example, the session is not connected).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_EOS">
            <summary>
            A get next operation on structured container returned End-of-Stream.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_FOUND">
            <summary>
            A get for a named field in a MAP was not found.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOEVENT">
            <summary>
            The context had no events to process.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_INCOMPLETE">
            <summary>
            The API call completed some, but not all, of the requested function.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_ROLLBACK">
            <summary>
            <see cref="M:SolaceSystems.Solclient.Messaging.ITransactedSession.Commit"/> returns this when the transaction
            has already been rolled back.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_FAIL">
            <summary>
            The API call failed.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Description">
            <summary>
            The description tag.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Stats_Tx">
            <summary>
            An enumeration of the various transmit statistics. 
            This is used as a key in the transmit stats dictionary. See <c>GetTxStats()</c> in
            <see cref="T:SolaceSystems.Solclient.Messaging.IStatsAccessible"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.TotalDataBytes">
            <summary>
            The number of data bytes transmitted in total.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.Bytes">
            <summary>
            Deprecated; use <see cref="F:SolaceSystems.Solclient.Messaging.Stats_Tx.TotalDataBytes"/> instead.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.TotalDataMsgs">
            <summary>
            The number of data messages transmitted in total.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.Msgs">
            <summary>
            Deprecated; use <see cref="F:SolaceSystems.Solclient.Messaging.Stats_Tx.TotalDataMsgs"/> instead.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.WouldBlock">
            <summary>
            The number of messages not accepted due to would block (non-blocking only).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.SocketFull">
            <summary>
            The number of times the socket was full when send done (data buffered).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.DirectBytes">
            <summary>
            The number of bytes transmitted in Direct messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.DirectMsgs">
            <summary>
            The number of Direct messages transmitted.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.PersistentBytes">
            <summary>
            The number of bytes transmitted in Persistent messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.NonPeristentBytes">
            <summary>
            The number of bytes transmitted in Non-Persistent messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.PersistentMsgs">
            <summary>
            The number of Persistent messages transmitted.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.NonPersistentMsgs">
            <summary>
            The number of Non-Persistent messages transmitted.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.PersistentMsgsRedelivered">
            <summary>
            The number of Persistent messages redelivered.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.NonPeristentMsgsRedelivered">
            <summary>
            The number of Non-Persistent messages redelivered.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.PersistentBytesRedelivered">
            <summary>
            The number of bytes redelivered in Persistent messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.NonPersistentBytesRedelivered">
            <summary>
            The number of bytes redelivered in Non-Persistent messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.AcksReceived">
            <summary>
            The number of acknowledgements received. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.WindowClose">
            <summary>
            The number of times the transmit window closed.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.AckTimeout">
            <summary>
            The number of times the acknowledgement timer expired.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.ControlMsgs">
            <summary>
            The number of control (non-data) messages transmitted.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.ControlBytes">
            <summary>
            The number of bytes transmitted in control (non-data) messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.CompressedBytes">
            <summary>
            The number of bytes transmitted after compression.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.TotalConnectionAttempts">
            <summary>
            The total number of TCP connections attempted by this session.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.RequestMsgSent">
            <summary>
            Request messages sent.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.RequestTimeout">
            <summary>
            The request messages sent that did not receive a reply due to a timeout.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.CacheRequestSent">
            <summary>
            Cache Requests sent.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.GuaranteedMsgsSentConfirmed">
            <summary>
            Guaranteed messages (persistent/non-persistent) published that have been acknowledged.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.DiscardNoMatch">
            <summary>
            When the IPC add-on is in use, it represents the count of messages discarded due to no subscription match with connected peers
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.DiscardChannelError">
            <summary>
            Messages discarded due to channel failure.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Tx.BlockedOnSend">
            <summary>
            Number of times session blocked on socket full (blocking only).
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Stats_Rx">
            <summary>
            An Enumeration of the various receive statistics. 
            Used as a key in the receive stats dictionary. See <c>GetRxStats</c> in
            <see cref="T:SolaceSystems.Solclient.Messaging.IStatsAccessible"/>.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DirectBytes">
            <summary>
            The number of bytes received as Direct messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.Bytes">
            <summary>
            Deprecated; use <see cref="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DirectBytes"/> instead.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DirectMsgs">
            <summary>
            The number of Direct messages received.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.Msgs">
            <summary>
            Deprecated; use <see cref="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DirectMsgs"/> instead.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.NonEmptyReads">
            <summary>
            The number of messages discarded due to header incompatibilities.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardMsgIndication">
            <summary>
            The number of received messages with discard indication set.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardSMFUnknownElement">
            <summary>
            The number of messages discarded due to the presence of an unknown element or unknown protocol in the SMF header. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardMsgTooBig">
            <summary>
            The number of messages discarded due to msg too large. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.AcksSent">
            <summary>
            The number of acknowledgments sent for Guaranteed messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardsDuplicate">
            <summary>
            The number of Guaranteed messages dropped for being duplicates. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardsNoMatchingFlow">
            <summary>
            The number of Guaranteed messages discarded due to no match on the flowId. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardsOutOfOrder">
            <summary>
            The number of Guaranteed messages discarded for being received out of order.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.PersistentBytes">
            <summary>
            The number of persistent bytes received on the flow. 
            On the session it is the total number of persistent bytes received across all flows. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.PersistentMsgs">
            <summary>
            The number of Persistent messages received on the flow. 
            On the session it is the total number of Persistent messages received across all flows.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.NonPersitentBytes">
            <summary>
            The number of Persistent bytes received on the flow. 
            On the session it is the total number of Persistent bytes received across all flows.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.NonPersistentMsgs">
            <summary>
            The number of Persistent messages received on the flow. 
            On the session it is the total number of Persistent messages received across all flows. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.ControlMsgs">
            <summary>
            The number of control (non-data) messages received.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.ControlBytes">
            <summary>
            The number of bytes received in Control (non-data) messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.TotalDataBytes">
            <summary>
            The total number of data bytes received.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.TotalDataMsgs">
            <summary>
            The total number of data messages received.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.CompressedBytes">
            <summary>
            The number of bytes received before decompression.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.ReplyMsg">
            <summary>
            The reply messages received.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.ReplyMsgDiscard">
            <summary>
            The reply messages discarded due to no outstanding request.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.CacheRequestOkResponse">
            <summary>
            The cache requests completed OK. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.CacheRequestFulfillData">
            <summary>
            Cache requests fulfilled by live data.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.CacheRequestErrorResponse">
            <summary>
            Cache requests failed due to solCache error response.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.CacheRequestDiscardResponse">
            <summary>
            Cached request response discarded due to errors in response format.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.CacheMsg">
            <summary>
            Cached messages delivered to the application. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.FoundCutThroughSync">
            <summary>
            Deprecated: Cut-Through Forwarding Mode is not supported.
            On a cut-through Flow, the number of times the Flow entered cut-through delivery mode.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.LostCutThroughSync">
            <summary>
            Deprecated: Cut-Through Forwarding Mode is not supported.
            On a cut-through Flow, the number of times the Flow left cut-through delivery mode to resynchronize with the Guaranteed message storage on the appliance. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.LostCutThroughSyncGM">
            <summary>
            Deprecated: Cut-Through Forwarding Mode is not supported.
             On a cut-through Flow, the number of times the Flow left cut-through delivery mode to resynchronize with the Guaranteed message storage due to receiving a Guaranteed message that was not previously received as Direct.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.OverflowCutThroughSyncBuffer">
            <summary>
            Deprecated: Cut-Through Forwarding Mode is not supported.
            On a cut-through Flow, the number of times the synchronization buffer overflowed, delaying synchronization.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.AlreadyCutThrough">
            <summary>
            Deprecated: Cut-Through Forwarding Mode is not supported.
            On a cut-through Flow, the number of Guaranteed messages discarded because they had already been received on the cut-through Flow.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardFromCutThroughSync">
            <summary>
            Deprecated: Cut-Through Forwarding Mode is not supported.
            On a cut-through Flow, the number of messages discarded from the synchronization list other than those discarded due to overflow.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardMessageFlowUnboundPending">
            <summary>
            On a transacted flow, the number of messages discarded because the flow is in a UNBOUND pending state.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardMessageTransactionRollback">
            <summary>
            On a transacted flow, the number of messages discarded after a transaction rollback and becomes a message comes in with prevMsgId=0.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Stats_Rx.DiscardTransactionResponse">
            <summary>
            On a transacted session, the number of transaction responses discarded due to reconnection.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.MessageLevelStatistic">
            <summary>
            The statistics associated with message memory management at the message level.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.NumOfMessageAllocationPerformed">
            <summary>
            The number of message allocations performed as a consequence of CreateMessage().
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.NumOfMessageFreePerformed">
            <summary>
             Number of message frees performed as a consequence of implicit garbage collection or Dispose.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.NumOfMessageDupPerformed">
            <summary>
            Number of message duplications performed. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.NumOfMessageReallocationPerformed">
            <summary>
            Number of message re-allocations performed (results in growth in a message buffer).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.CurrentNumOfMessagesOnFreeFlist">
            <summary>
            The current number of messages on message free list.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.CurrentNumOfMessagesOnFreeList">
            <summary>
            The current number of messages on message free list.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.CurrentNumOfMessagesAllocated">
            <summary>
            The current number of currently allocated messages. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.CurrentNumOfMessagesCurrentlyAllocated">
            <summary>
            The current number of currently allocated messages. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.CurrentNumOfContainersOnFreeList">
            <summary>
            The current number of containers (for example, streams or maps) on container free list. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.CurrentNumOfContainersAllocated">
            <summary>
            The number of currently allocated containers (for example, streams or maps).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.CurrentTotalMemoryInBytes">
            <summary>
            The approximate amount of total memory consumed for a message pool (allocated and on free list).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.MessageLevelStatistic.CurrentTotalMemoryInUse">
            <summary>
            the approximate amount of allocated memory (in-use; not on free list).
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.QuantaLevelStatistic">
            <summary>
            The statistics associated with message memory management at the quanta level.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.QuantaLevelStatistic.CurrentNumOfFreeDataBlocks">
            <summary>
            The current number of free data blocks (of the specified quanta size from 0 to 4).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.QuantaLevelStatistic.CurentNumOfAllocatedDataBlocks">
            <summary>
            The current number of allocated data blocks (of the specified quanta size). 
            Quanta 5 indicates messages currently allocated that are larger than maximum quanta size.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.CapabilityType">
            <summary>
            Appliance capabilities that can vary depending on the appliance platform.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.PEER_SOFTWARE_VERSION">
            <summary>
            The software version string returned by the peer that the session is connected to.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.STRING"/>
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.PEER_SOFTWARE_DATE">
            <summary>
            The peer's software release date.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.STRING"/>
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.PEER_PLATFORM">
            <summary>
            The string that describes the hardware platform of the connected peer. 
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.STRING"/>
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.TEMP_ENDPOINT">
            <summary>
            The session allows the creation of temporary endpoints (Queues / TopicEndpoints).
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>  
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.SUB_FLOW_GUARANTEED">
            <summary>
            The session allows binding a Guaranteed message delivery flow to an endpoint.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.PUB_GUARANTEED">
            <summary>
            The session allows publishing of Guaranteed messages.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.COMPRESSION">
            <summary>
            The session accepts compressed (DEFLATE) transport.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.JNDI">
            <summary>
            The session accepts JNDI queries.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.PEER_PORT_SPEED">
            <summary>
            The maximum rate supported by the peer's port in Megabits/second.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.UINT32"/>
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.PEER_PORT_TYPE">
            <summary>
            The peer's port type, to which the client has connected.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.STRING"/>
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.MAX_GUARANTEED_MSG_SIZE">
            <summary>
            The maximum size of a Guaranteed message (in bytes); this includes all optional message 
            headers and data.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.UINT32"/>
            </p>  
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.MAX_DIRECT_MSG_SIZE">
            <summary>
            The maximum size of a Direct message (in bytes); this includes all optional message 
            headers and data.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.UINT32"/>
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.SUPPORTS_XPE_SUBSCRIPTIONS">
            <summary>
            The session supports XPath expression subscriptions.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.BROWSER">
            <summary>
            Peer supports creating message browsers on endpoints.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>  
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.SELECTOR">
            <summary>
            Peer supports specifying message selectors on Flows and Browsers.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.ENDPOINT_MANAGEMENT">
            <summary>
            Peer supports the ability to provision/deprovision durable Endpoints. 
            It also indicates the peer supports permission and quota management of non-durable Endpoints.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.PEER_ROUTER_NAME">
            <summary>
            The appliance/peer name, typically used to direct management requests .
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.STRING"/>
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.QUEUE_SUBSCRIPTIONS">
            <summary>
            Peer supports adding subscriptions to Queue endpoints.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>         
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.ENDPOINT_MESSAGE_TTL">
            <summary>
            Peer supports Time-to-Live (TTL) expiry on Guaranteed messages spooled to endpoints.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.SUBSCRIPTION_MANAGER">
            <summary>
            Peer supports subscription manager operations (add/remove subscriptions
            on behalf of client name).
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.MESSAGE_ELIDING">
            <summary>
            Peer supports message eliding. 
            Message eliding enables filtering of data to avoid transmitting every 
            single message to a subscribing client.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.NO_LOCAL">
            <summary>
            The session supports No Local. 
            Flows can be created to Queues and Topic-Endpoints that do not receive messages published on the same session.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>        
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING">
            <summary>
            The peer can insert per topic sequence numbers
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>        
            </summary> 
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.ENDPOINT_DISCARD_BEHAVIOR">
            <summary>
            The peer endpoints can be provisioned with discard behavior
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>          
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.ACTIVE_FLOW_INDICATION">
            <summary>
            The peer can send notifications when a flow become Active, or Inactive.
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.TRANSACTED_SESSION">
            <summary>
            The peer supports transacted sessions
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.MESSAGE_REPLAY">
            <summary>
            The peer can support message replay. It is possible for an application
            to request replay of guaranteed delivery messages.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.COMPRESSED_SSL">
            <summary>
             The peer can support compression over TLS connections
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.LONG_SELECTORS">
            <summary>
             The peer can support selectors longer than 1023 bytes
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.CapabilityType.SHARED_SUBSCRIPTIONS">
            <summary>
            The peer can support #shared and #noexport subscriptions
            <p>
            Type <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL"/>
            </p>
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ICapability">
            <summary>
            This represents the appliance capability type and value.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ICapability.Value">
            <summary>
            The value of the ICapability, an instance of <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISDTField"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ICapability.Type">
            <summary>
            One of <see cref="T:SolaceSystems.Solclient.Messaging.CapabilityType"/>
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IVersion">
            <summary>
            The version information for the messaging API.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IVersion.AssemblyVersion">
            <summary>
            The managed assembly version.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IVersion.AssemblyFileVersion">
            <summary>
            The managed assembly file version major.minor.build. 
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IVersion.AssemblyInformationalVersion">
            <summary>
            The managed assembly file semantic version major.minor.patch-tag-build. 
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IVersion.AssemblyBuildDate">
            <summary>
            The managed assembly build date.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IVersion.NatvieSolClientVersion">
            <summary>
            The native SolClient dll version.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IVersion.NativeSolClientBuildDate">
            <summary>
            The native SolClient dll build date.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IVersion.NativeSolClientVariant">
            <summary>
            The native SolClient dll variant.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo">
            <summary>
            This represents more detailed error information for a failed API call. This is in addition to the return code.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorInfo.SubCode">
            <summary>
            A subcode enum indicating the type of error.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorInfo.ResponseCode">
            <summary>
            A response code that is returned by the appliance for some subcodes; otherwise zero.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDKErrorInfo.ErrorStr">
            <summary>
            An information error string for certain types of subcodes (an empty string if not used).
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDKErrorInfo.#ctor(SolaceSystems.Solclient.Messaging.SDKErrorSubcode,System.Int32,System.String)">
            <summary>
            An internal class constructor.
            </summary>
            <param name="subCode">A subcode enum that indicates the type of error.</param>
            <param name="responseCode">A response code that is returned by the appliance for some sub codes, otherwise zero.</param>
            <param name="errorStr">An information error string for certain types of subcodes (an empty string if not used).</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDKErrorInfo.ToString">
            <summary>
            This returns a String that represents the current Object.
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.STDException">
            <summary>
            Standard SDT operation exception.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.STDException.#ctor(System.String)">
            <summary>
            Initalizes a new instance of STDException with a specified
            error message.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.STDException.#ctor(System.String,System.Exception)">
            <summary>
            Initalizes a new instance of STDException with a specified
            error message and cause exception.
            </summary>
            <param name="message">Error message.</param>
            <param name="cause">Cause exception.</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.STDException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is for Serialization purposes.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            <summary>
            This exception is thrown from various <c>IMessage</c> and SDT container accessors.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.FieldNotFoundException.EntityNotFound">
            <summary>
            The name of the entity that is not found.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FieldNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initalizes a new instance of the <c>FieldNotFoundException</c> class with a specified
            error message and entity string.
            </summary>
            <param name="entity">Name of the entity not found.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FieldNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initalizes a new instance of the <c>FatalErrorException</c> class with a specified
            error message, entity string, and cause exception.
            </summary>
            <param name="entity">The name of the entity not found.</param>
            <param name="message">The error message.</param>
            <param name="cause">The cause exception.</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FieldNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For Serialization purposes.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FieldNotFoundException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>Type: System.String</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            <summary>
            An operation error exception thrown when an API call fails.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.OperationErrorException.#ctor(SolaceSystems.Solclient.Messaging.SDKErrorInfo,System.String)">
            <summary>
            This initializes a new instance of the <c>OperationErrorException</c> class with a specified
            SDKErrorInfo structure and message.
            </summary>
            <param name="errorInfo">The SDKErrorInfo structure</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.OperationErrorException.#ctor(SolaceSystems.Solclient.Messaging.ReturnCode,System.String)">
            <summary>
            This initializes a new instance of the <c>OperationErrorException</c> class with a specified
            error message string and return code.
            </summary>
            <param name="returnCode">The return code that caused the exception.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.OperationErrorException.#ctor(SolaceSystems.Solclient.Messaging.ReturnCode,System.String,System.Exception,System.Boolean)">
            <summary>
            This initializes a new instance of the <c>OperationErrorException</c> class with a specified
            error message string, return code, and cause exception.
            </summary>
            <param name="returnCode">The return code from the API call that caused the exception.</param>
            <param name="message">The error message.</param>
            <param name="cause">The cause exception.</param>
            <param name="fetchLastSDKError">If true, the last API error info is also fetched.</param>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ReturnCode">
            <summary>
            A return code from the API call.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ErrorInfo">
            <summary>
            If available, return more detailed error information for a failed API call.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.OperationErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is for serialization purposes.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.OperationErrorException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>Type: System.String</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            <summary>
            A fatal error exception thrown when a serious and unrecoverable exception
            is encountered.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FatalErrorException.#ctor(System.String)">
            <summary>
            This initializes a new instance of the <c>FatalErrorException</c> class with a specified
            error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FatalErrorException.#ctor(System.String,System.Exception)">
            <summary>
            This initializes a new instance of the <c>FatalErrorException</c> class with a specified
            error message and cause exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="cause">The cause exception.</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.FatalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is for serialization purposes.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.OnSolLogInfo">
            <summary>
            Log event info delegate.
            </summary>
            <param name="logInfo"></param>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SolLogInfo">
            <summary>
            This represents a log info object.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SolLogInfo.LogMessage">
            <summary>
            This represents a log message.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SolLogInfo.LogLevel">
            <summary>
            This represents the log level for this log info.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SolLogInfo.LogException">
            <summary>
            Optional log info exception.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SolLogInfo.DateTime">
            <summary>
            The DateTime of this log info.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SolLogInfo.LoggerName">
            <summary>
            This represents the logger name that logged this message.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SolLogInfo.ToString">
            <summary>
            This returns a String that represents the current object.
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.TimerMode">
            <summary>
            Possible modes of <see cref="T:SolaceSystems.Solclient.Messaging.TimerTask"/>.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.TimerMode.OneShot">
            <summary>
            The timer expires once and then it is automatically stopped and disposed.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.TimerMode.Repeat">
            <summary>
            The timer is automatically rescheduled for same duration upon expiry until stopped or disposed.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.TimerTask">
            <summary>
            Represents a timer task to be executed in the context of the corresponding <see cref="T:SolaceSystems.Solclient.Messaging.IContext"/> thread.
            To create and start a TimerTask please see <see cref="M:SolaceSystems.Solclient.Messaging.TimerTask.Start(SolaceSystems.Solclient.Messaging.IContext,System.Threading.TimerCallback,SolaceSystems.Solclient.Messaging.TimerMode,System.Int64,System.Object)"/>.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.TimerTask.Start(SolaceSystems.Solclient.Messaging.IContext,System.Threading.TimerCallback,SolaceSystems.Solclient.Messaging.TimerMode,System.Int64,System.Object)">
            <summary>
            Factory method of TimerTasks. 
            A <see cref="T:SolaceSystems.Solclient.Messaging.TimerTask"/> allows applications to execute a user-defined delegate in the context of a given <see cref="T:SolaceSystems.Solclient.Messaging.IContext"/> thread.
            The timer duration is subject to the timer resolution specified by the context property '<see cref="P:SolaceSystems.Solclient.Messaging.ContextProperties.TimerResolutionInMsecs"/>',
            up to the nearest timer resolution interval. 
            For example, if the context timer resolution is 50 ms, 
            and a timer is started with a duration of 60 ms, then the timer duration is rounded up to 100 ms (2 ticks), 
            and then one further tick is added for a total timer duration of 150 ms. This extra tick accounts for the fact that the current tick might
            be just about to advance when the timer is started. Thus, the actual timeout in this example is approximately in the range of 100 ms to 150 ms.
            <p> 
            The timer callback delegate is invoked in the context of the context thread. 
            The timer durations are approximate; the actual duration can be affected by the
            processing time spent in other callbacks by the context thread, such as for session or flowEvent events and received messages. 
            <p>
            <strong>Note:</strong> disposing the corresponding context (<see cref="T:SolaceSystems.Solclient.Messaging.IContext"/>) 
            or any of its contained context timers (<see cref="T:SolaceSystems.Solclient.Messaging.TimerTask"/>), sessions (<see cref="T:SolaceSystems.Solclient.Messaging.ISession"/>) 
            or flows (<see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/>) 
            <b>must not</b> be performed from within the registered userCallbackDelegate.
            </p>        
            </p>
            <p>
            This timer service should only be used for applications that require a coarse timer service 
            (for example, a guard timer, or other timer uses that do not require a highly accurate timer service).
            </p>
            When a one-shot timer expires, the timer is automatically cancelled. When a repeat 
            timer expires, the timer is automatically rescheduled for the same duration, and
            continues to run until stopped using <see cref="M:SolaceSystems.Solclient.Messaging.TimerTask.Dispose"/>.
            <p>
            Note that the invoked timer callback delegate routine is allowed to start and stop timers.
            </p>
            </summary>
            <param name="context">The <see cref="T:SolaceSystems.Solclient.Messaging.IContext"/> to schedule the timer on</param>
            <param name="userCallbackDelegate">The user callback delegate to call when the timer expires. The call occurs over the <see cref="T:SolaceSystems.Solclient.Messaging.IContext"/> thread </param>.
            <param name="timerMode">
            Use <see cref="F:SolaceSystems.Solclient.Messaging.TimerMode.OneShot"/> to create a one shot timer, <see cref="F:SolaceSystems.Solclient.Messaging.TimerMode.Repeat"/> otherwise 
            </param>
            <param name="durationInMsecs">The timer interval in milliseconds. This is subject to the specified timer resolution see <see cref="M:SolaceSystems.Solclient.Messaging.TimerTask.Start(SolaceSystems.Solclient.Messaging.IContext,System.Threading.TimerCallback,SolaceSystems.Solclient.Messaging.TimerMode,System.Int64,System.Object)"/> for more details</param>.
            <param name="userState">An object reference that's passed to the userCallbackDelegate when the timer expires, can be null</param>.
            <returns>Returns a TimerTask</returns>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.TimerTask.DurationInMsecs">
            <summary>
            The duration in milliseconds of the timer.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.TimerTask.Mode">
            <summary>
            The TimerMode specified when the timer is created <see cref="M:SolaceSystems.Solclient.Messaging.TimerTask.Start(SolaceSystems.Solclient.Messaging.IContext,System.Threading.TimerCallback,SolaceSystems.Solclient.Messaging.TimerMode,System.Int64,System.Object)"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.TimerTask.UserState">
            <summary>
            A reference to a user userState object. Passed in with the timer callback invocation.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.TimerTask.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.BrowserProperties">
            <summary>
            Used when creating a new Browser instance.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.BrowserProperties.PROPERTY">
            <summary>
            Enumeration of public properties.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.BrowserProperties.PROPERTY.Selector">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.BrowserProperties.Selector"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.BrowserProperties.PROPERTY.WaitTimeout">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.BrowserProperties.WaitTimeout"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.BrowserProperties.PROPERTY.TransportWindowSize">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.BrowserProperties.TransportWindowSize"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.BrowserProperties.PROPERTY.MaxReconnectTries">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.BrowserProperties.MaxReconnectTries"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.BrowserProperties.PROPERTY.ReconnectRetryIntervalMs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.BrowserProperties.ReconnectRetryIntervalMs"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.BrowserProperties.Selector">
            <summary>
            Browser's selector string; null means unspecified.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.BrowserProperties.WaitTimeout">
            <summary>
            When calling GetNext(), if no messages become available in the local API message buffer,
            the calling thread can be blocked up for up the amount of time specified (in
            milliseconds)by this property. The unit of WaitTimeout is msec. The default is 10000
            msecs (10 secs). The valid range is within [50...MaxSignedInt32].
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.BrowserProperties.TransportWindowSize">
            <summary>
            The TransportWindowSize affects the number of local messages which are
            pre-fetched by the Browser.
            The default is 255.
            The valid range is within [1..255].
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.BrowserProperties.MaxReconnectTries">
            <summary>
            Browsers can be configured to attempt re-binding automatically, mainly when a replay is started.
            This property controls the number of times the re-bind is attempted.
            -1 means infinite retries.
            0 means no auto rebind.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.BrowserProperties.ReconnectRetryIntervalMs">
            <summary>
            Browsers can be configured to attempt re-binding automatically, mainly when a replay is started.
            This property controls how long to wait between re-bind attempts, in milliseconds.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BrowserProperties.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance. 
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.BrowserProperties.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IBrowser">
             <summary>
            A Browser allows client applications to look at messages spooled on Endpoints without removing them.
            <item>Messages are browsed from oldest to newest. </item>
            <item> After being browsed, messages are still available for consumption over normal flows. However, it is possible to selectively remove messages from the persistent store of an Endpoint, in this case, these removed messages will no longer be available for consumption. </item>
             One typical application is to use browsers to allow message bus administrators to remove “stuck” Guaranteed messages from an endpoint without having to modify or disrupt existing applications. A message can get stuck if:
            <item> It hass been received by an application, but for some reason, that application has failed to acknowledge it. </item>
            <item> All active message selectors have failed to match this particular message and therefore the message bus has not delivered it to any client yet. </item>
             The current release only supports browsing Endpoints of type Queue.
             Note that the delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive), do not apply when browsing messages with a Browser. 
             </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IBrowser.HasMore">
            <summary>
             Returns true if there is at least one message available in the Browser's local message buffer.
             Note: If this method returns false, it does not mean that the queue is empty; 
             subsequent calls to <see cref="M:SolaceSystems.Solclient.Messaging.IBrowser.HasMore"/> or <see cref="M:SolaceSystems.Solclient.Messaging.IBrowser.GetNext"/> might return true and a <see cref="T:SolaceSystems.Solclient.Messaging.IMessage"/> respectively.
            </summary>
            <returns>Returns a boolean indicating if there is at least one message available in the Browser's local message buffer</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Browser is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the underlying browser encountered an error 
            Note: The ErroInfo property in OperationErrorException will have a specific SubCode indicating what error case the Browser
            encountered.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IBrowser.GetNext">
            <summary>
            If there is at least one message available in the Browser’s local message buffer, return it    
            immediately. Otherwise wait up to WaitTimeout(in BrowserProperties) until one is available.
            </summary>
            <returns>Returns next available IMessage</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Browser is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the underlying browser encountered an error 
            Note: The ErroInfo property in OperationErrorException will have a specific SubCode indicating what error case the Browser
            encountered.
            </exception>       
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IBrowser.GetNext(System.Int32)">
            <summary>
            If there is at least one message available in the Browser’s local message buffer, return it immediately.
            Otherwise wait up to WaitTimeout(as specified in BrowserProperties) until one is available.
            - If timeout is &lt; 0, return immediately if there are no messages available locally
            - If  timeout is equal to 0, wait forever. This blocks the calling thread; to unblock it, call <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
            <param name="timeout"></param>
            <returns>Returns next available IMessage given the specified timeout</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Browser is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the underlying browser encountered an error. 
            Note: The ErroInfo property in OperationErrorException will have a specific SubCode indicating what error case the Browser
            encountered.
            </exception>        
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IBrowser.GetNextNoWait">
            <summary>
            As the name implies, this method returns a message if there is at least one available in the Browser's
            local buffer; otherwise, it returns null. 
            </summary>
            <returns>Returns next available IMessage or null if none was available</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Browser is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the underlying Browser encountered an error. 
            Note: The ErroInfo property in OperationErrorException will have a specific SubCode indicating what error case the Browser
            encountered.
            </exception>      
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IBrowser.Remove(SolaceSystems.Solclient.Messaging.IMessage)">
            <summary>
            Remove a message from the appliance queue endpoint that this Browser is bound to, given its <see cref="T:SolaceSystems.Solclient.Messaging.IMessage"/> reference.
            </summary>
            <param name="msg"></param>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the Browser is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the underlying browser encountered an error. 
            Note: The ErroInfo property in OperationErrorException has a specific SubCode indicating the error case the Browser
            encountered.
            </exception>       
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IBrowser.Remove(System.Int64)">
            <summary>
            Remove a message from the appliance queue endpoint that this Browser is bound to, given its <see cref="P:SolaceSystems.Solclient.Messaging.IMessage.ADMessageId"/>. 
            </summary>
            <param name="ADMessageId"></param>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the browser is already disposed (terminal state).
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the underlying browser encountered an error. 
            Note: the ErroInfo property in OperationErrorException will have a specific SubCode indicating what error case the browser
            encountered.
            </exception>        
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IMessageDispatcher">
            <summary>
            <p>
            In the typical scenarios, using <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Subscribe(SolaceSystems.Solclient.Messaging.ISubscription,System.Boolean)"/> , 
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.CreateFlow(SolaceSystems.Solclient.Messaging.FlowProperties,SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.FlowEventArgs})"/> or
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.CreateFlow(SolaceSystems.Solclient.Messaging.FlowProperties,SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.FlowEventArgs},SolaceSystems.Solclient.Messaging.EndpointProperties)"/>
            client applications can register interest to receive messages with destinations matching the set of added subscription(s). 
            All matching messages are received within the context of the message callback delegate. There's one delegate registered 
            per session or flow.
            </p>
            <p>
            IMessageDispatcher is an interface abstraction which enables the API to further demultiplex messages to 
            consumers based on registered subscriptions (within a<see cref="T:SolaceSystems.Solclient.Messaging.ISession"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/>).
            Dispatching/demultiplexing incoming messages based on topics allows different callback delegates to be invoked based 
            on the received message's topic. Full wildcard subscription syntax is supported see <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> for more details.
            </p>
            <p>
            To better illustrate the usage of this feature, consider the following examples:
            <item>
            A client application registers interest to receive messages matching 'car/>', it does so by calling the Subscribe method
            on an ISession instance. All messages matching this wildcard topic are received over the message callback delegate. In this
            case, the client receives any message matching 'car/>', for example: 'car/gmc' or 'car/toyota'
            </item>
            <item>
            Using the Topic dispatch feature, the client application (as described above) can demultiplex incoming messages 
            to different callback delegates. For example, it can create a couple of IDispatchTarget instances; 
            the first one with 'car/gmc' as topic subscription and the second with 'car/toyota'. 
            Then it can call the ISession's Subscribe(IDispatchTarget...) method to add these subscriptions along with the 
            delegates to invoke when receiving matching messages on 'car/gmc' or 'car/toyota'. 
            Delivered message with destinations outside of these two topic subscriptions, are still received 
            over the default message callback delegate associated with the ISession instance.
            </item>
            </p>
            <p>
            Note: In order to use this feature, the parent ISession's SessionProperties must have TopicDispatch set to true.
            </p>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.Subscribe(SolaceSystems.Solclient.Messaging.IDispatchTarget,System.Int32,System.Object)">
             <summary>
             Adds a <see cref="T:SolaceSystems.Solclient.Messaging.IDispatchTarget"/> subscription to the given IMessageDispatcher. 
             <p>
             Note: In order to use this feature, the parent ISession's SessionProperties must have TopicDispatch set to true.
             </p>
             </summary>
             <param name="dispatchTarget"></param>
             <param name="flags"> 
             Possible values are:
             <item>0, this signals to the API not to request or wait for a confirmation.</item>
             <item>
             One or more flags from <see cref="T:SolaceSystems.Solclient.Messaging.SubscribeFlag"/> ORed. Valid flags are <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.RequestConfirm"/>,
             <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.WaitForConfirm"/> and <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.LocalDispatchOnly"/>. If 
             <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.LocalDispatchOnly"/> is used, it should be the only flag in the set.
             </item>       
             </param>
             <param name="correlationKey">
             If subscribeFlags is <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.RequestConfirm"/>, client applications can specify a non-null
             correlationKey object reference which is returned to the application as a CorrelationKey field within 
             a <see cref="T:SolaceSystems.Solclient.Messaging.SessionEventArgs"/> event.
             </param>
             <returns> 
             <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>, if the operation cannot be accepted by the API immediately,
             <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful, or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> if in progress.
             </returns>
             <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
             Thrown when the Subscribe operation fails. More details are available in the fields
             of the OperationErrorException.        
             Possible sub-codes:
             <list type="">
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfResources"/> 
             </item>
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionAlreadyPresent"/> 
             </item>
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionTooMany"/> 
             </item>
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionACLDenied"/> 
             </item>		
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionOther"/> 
             </item>
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidSessionOperation"/> 
             </item>
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicSyntax"/> 
             </item>
            
             <item>
             Topic dispatch not enabled for transacted flows.
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidFlowOperation"/>
             </item>
              
             </list>
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Thrown when the session is already disposed (terminal state).
             </exception> 
             <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
             Thrown when an unrecoverable error occurs.
             </exception>  
             <exception cref="T:System.ArgumentNullException">
             Thrown if dispatchTarget is null.
             </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.Unsubscribe(SolaceSystems.Solclient.Messaging.IDispatchTarget,System.Int32,System.Object)">
             <summary>
             Removes an IDispatchTarget subscription from the given IMessageDispatcher.
             <p>
             Note: To use this feature, the parent ISession's SessionProperties must have TopicDispatch set to true.
             </p>        
             </summary>
             <param name="dispatchTarget"></param>
             <param name="flags"> 
             Possible values are:
             <item>0, this signals to the API not to request or wait for a confirmation.</item>
             <item>
             One or more flags from <see cref="T:SolaceSystems.Solclient.Messaging.SubscribeFlag"/> ORed. Valid flags are <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.RequestConfirm"/>,
             <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.WaitForConfirm"/> and <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.LocalDispatchOnly"/>. If 
             <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.LocalDispatchOnly"/> is used, it should be the only flag in the set.
             </item>       
             </param>
             <param name="correlationKey">
             If subscribeFlags is <see cref="F:SolaceSystems.Solclient.Messaging.SubscribeFlag.RequestConfirm"/>, client applications can specify a non-null
             correlationKey object reference which is returned to the application as a CorrelationKey field within 
             a <see cref="T:SolaceSystems.Solclient.Messaging.SessionEventArgs"/> event.
             </param>
             <returns> 
             <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/>, if the operation cannot be accepted by the API immediately,
             <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful, or <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/> if in progress.
             </returns>        
             <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
             Thrown when the Unsubscribe operation fails. More details are available in the fields
             of the OperationErrorException.        
             Possible sub-codes:
             <list type="">
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidTopicSyntax"/> 
             </item>
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidSessionOperation"/> 
             </item>
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionNotFound"/> 
             </item>
             
             <item>
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.SubscriptionOther"/> 
             </item>			
            
             <item>
             Topic dispatch is not enabled for transacted flows
             <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InvalidFlowOperation"/>
             </item>
              
             </list>
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Thrown when the session is already disposed (terminal state).
             </exception> 
             <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
             Thrown when an unrecoverable error occurs.
             </exception>  
             <exception cref="T:System.ArgumentNullException">
             Thrown if dispatchTarget is null.
             </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.CreateDispatchTarget(SolaceSystems.Solclient.Messaging.ISubscription,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs})">
            <summary>
            Creates a <see cref="T:SolaceSystems.Solclient.Messaging.IDispatchTarget"/> instance to be used in the <see cref="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.Subscribe(SolaceSystems.Solclient.Messaging.IDispatchTarget,System.Int32,System.Object)"/>
            and <see cref="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.Unsubscribe(SolaceSystems.Solclient.Messaging.IDispatchTarget,System.Int32,System.Object)"/> methods.
            <p>
            <strong>
            Note: </strong>Client applications must keep IDispatchTarget object references accessible if they want to Unsubscribe from 
            the given IMessageDispatcher, and remove already added Topic subscriptions.
            IDispatchTarget internal object ID constitutes a unique key. Forgetting to keep a reference to IDispatchTarget objects make subsequent <see cref="M:SolaceSystems.Solclient.Messaging.IMessageDispatcher.Unsubscribe(SolaceSystems.Solclient.Messaging.IDispatchTarget,System.Int32,System.Object)"/> calls impossible.
            
            </p>
            </summary>
            <param name="subscription">An <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> instance.</param>
            <param name="messageCallback">The callback delegate to dispatch matching messages to.</param>
            <returns>Returns a <see cref="T:SolaceSystems.Solclient.Messaging.IDispatchTarget"/> instance</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>   
            <exception cref="T:System.ArgumentNullException">
            Thrown if subscription or messageCallback are null.
            </exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>         
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.IDispatchTarget">
            <summary>
            It encapsulates an ISubscription and message callback delegate. This tuple is used
            as an argument for <see cref="T:SolaceSystems.Solclient.Messaging.IMessageDispatcher"/> operations.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IDispatchTarget.Subscription">
            <summary>
            The <see cref="T:SolaceSystems.Solclient.Messaging.ISubscription"/> used to attract messages with matching destinations.
            </summary>
            <returns>Returns the <see cref="T:SolaceSystems.Solclient.Messaging.ISubscription"/> used to attract messages with matching destinations</returns>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.IDispatchTarget.MessageHandler">
            <summary>
            The callback delegate to which the matching messages are
            delivered to.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.TopicUtil.ValidateTopic(System.String)">
            <summary>
            Return null if valid, error message on invalid.
            Topic can contain any UTF-8 character and must be &lt;=250 bytes in length.
            '*', if present in a level, must be the last character in that level.
            Topic may not have empty levels.
            </summary>
            <param name="topicName"></param>
            <returns>Null if valid, error message if invalid</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.TopicUtil.ValidateTopicLength(System.String)">
            <summary>
            Return null if valid, error message on invalid.
            Topic can contain any UTF-8 character and must be &lt;=250 bytes in length.
            </summary>
            <param name="topicName"></param>
            <returns>Null if valid, error message if invalid</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties">
            <summary>
            Defines cache session properties.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.PROPERTY">
            <summary>
            Cache Sessions properties
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.PROPERTY.CacheName">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.CacheName"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.PROPERTY.MaxMessagesPerTopic">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.MaxMessagesPerTopic"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.PROPERTY.MaxMessageAgeInSecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.MaxMessageAgeInSecs"/>
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.PROPERTY.CacheRequestTimeoutInMsecs">
            <summary>
            <see cref="P:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.CacheRequestTimeoutInMsecs"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.CacheRequestTimeoutInMsecs">
            <summary>
             The timeout period (in milliseconds) to wait for a response from the cache. 
             The default value is 10000 (10 seconds)
             The minimum configurable value is 3000 (3 seconds). 
             This is a protocol timer used internally by the API on each message exchange with solCache.
             A single call to ICacheSession.SendCacheRequest() may lead to many request-reply exchanges 
             with solCache and so is not bounded by this timer as long as each internal request is satisified in time.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.MaxMessageAgeInSecs">
            <summary>
            The age (in seconds) of the oldest message to retrieve from the cache.
            Default: 0 scecs
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.MaxMessagesPerTopic">
            <summary>
            The maximum number of messages to retrieve from the cache for any one topic.
            Default: 1
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.CacheName">
            <summary>
            The identifier for the cache to send cache requests to.
            Default: ""
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates and returns a new CacheSessionProperties from a dictionary of key/value strings
            <p>where:</p>
            <p>key: is a string representation of a given CacheSessionProperties property <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.PROPERTY"/></p>
            <p>value: is a string representation of the value of that property</p>
            <p>Rules:</p>
            <p>1. Keys that are not in the CacheSessionProperties's property set <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.PROPERTY"/>, are ignored and a warning log is generated.</p>
            <p>2. If a property is omitted, the default value will be used.</p>
            <p>3. Validation and type checking will be performed on the provided values, a conversion exception will be thrown if
               any of the provided values cannot be converted.</p>
            <p>4. Read-only properties are ignored.</p>
            </summary>
            <param name="dictionary"></param>
            <returns>Returns a new CacheSessionProperties from a dictionary of key/value strings</returns>
            <exception cref="T:System.FormatException">
            </exception>
            <exception cref="T:System.OverflowException">
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.ToDictionary">
            <summary>
            Returns a new IDictionary instance where:
            <p>key: is a string representation of a given SessionProperties property <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY"/></p>
            <p>value: is a string representation of the value of that property, or null if the property's value is null</p>
            Note that only readable and writable properties are returned in the dictionary. Read-only properties are ignored.
            </summary>
            <returns>Returns a new IDictionary instance</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.FromDictionaryWithPrefix(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Creates and returns a new CacheSessionProperties from a dictionary of key/value strings
            <p>where:</p>
            <p>key: is a string representation of a given CacheSessionProperties property <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.PROPERTY"/> prefixed with a string "prefix"</p>
            <p>value: is a string representation of the value of that property</p>
            <p>Rules:</p>
            <p>1. Keys that are not in the CacheSessionProperties's property set <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.PROPERTY"/>, are ignored and a warning log is generated.</p>
            <p>2. If a property is omitted, the default value is used.</p>
            <p>3. Validation and type checking are performed on the provided values, a conversion exception is thrown if
               any of the provided values cannot be converted.</p>
            <p>4. Read-only properties are ignored. </p>
            </summary>
            <param name="dictionary"></param>
            <param name="prefix">The prefix to prepend to the property name (using '.' as a separator). If null is passed in, "CacheSessionProperties" is assumed</param>
            <returns>Returns a new CacheSessionProperties from a dictionary of key/value strings</returns>
            <exception cref="T:System.FormatException">
            </exception>
            <exception cref="T:System.OverflowException">
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.ToDictionaryWithPrefix(System.String)">
            <summary>
            Returns a new IDictionary instance where:
            <p>key: is a string representation of a given SessionProperties property <see cref="T:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY"/> prefixed with a string "prefix"</p>
            <p>value: is a string representation of the value of that property, or null if the property's value is null</p>
            Note that only readable and writable properties are returned in the dictionary. Read-only properties are ignored.
            </summary>
            <param name="prefix">The prefix that was passed in to <see cref="M:SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties.FromDictionaryWithPrefix(System.Collections.Generic.IDictionary{System.String,System.String},System.String)"/></param>         
            <returns>Returns a new IDictionary instance</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction">
            <summary>
            One of the live data actions must be chosen. The live 
            data action dictates the disposition of live data received while
            the cache request is outstanding to the solCache. Additionally,
            if FULFILL is chosen, the cache request itself is deemed
            complete.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction.FULFILL">
            <summary>
             Consider the cache request finished when live data
             arrives that matches the topic.
             Wildcard cache requests must always be 
             FlowThru. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction.QUEUE">
            <summary>
            Queue live data that arrives that matches the topic  
            until the cache request completes. 
            Wildcard cache requests must always be 
            FlowThru. 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction.FLOW_THRU">
            <summary>
            Pass through to the application live data that arrives 
            that matches the topic while a cache request is outstanding. 
            Wildcard cache requests must always be 
            FlowThru.         
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEvent">
            <summary>
            Cache event enum
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEvent.RequestCompletedNotice">
            <summary>
            The Cache Request has finished. The event returnCode and subCode provide status information
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Cache.ICacheSession">
            <summary>
            Session for performing cache requests. This is created through <see cref="M:SolaceSystems.Solclient.Messaging.ISession.CreateCacheSession(SolaceSystems.Solclient.Messaging.Cache.CacheSessionProperties)"/>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.GetSession">
            <summary>
            Gets the ISession that created this ICacheSession.
            </summary>
            <returns>
            The ISession that created this ICacheSession.
            </returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.SendCacheRequest(System.Int64,SolaceSystems.Solclient.Messaging.ITopic,System.Boolean,SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction)">
            <summary>
            A synchronous cache request that waits for the cache response to be
            fulfilled according to the <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction"/> handling
            options.
            <p>
            <strong>Note:</strong>
            Cache requests may be flow controlled if the underlying transport is flow controlled.  
            The transport is considered flow controlled if  the library is unable to write to transport device 
            (for example, the TCP socket is full), or if there are more than 1000 session requests 
            (ICacheSession.SendCacheRequest(...) + ISession.SendRequest(...)) outstanding. 
            This will cause ICacheSession.SendCacheRequest(...) to block if the session property, 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/> is enabled. If <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/>  
            is disabled and it is not possible to write 
            the cache request to the underlying transport, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> is returned.
            </p>
            <p>
            Cached messages received in response to the cache request are delivered to the application 
            through the usual receive message callback delegate as the messages arrive. 
            This function returns when all cache responses have been returned, 
            and the request is either completed by live data (<see cref="F:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction.FULFILL"/>),
            or by timeout. 
            </p>        
            </summary>
            <param name="requestId">
            A positive Int64 that is returned to the application in the cache request response
            and is available in every cached message that is returned.
            </param>
            <param name="topic">
            An ITopic instance representing the topic being requested from the cache.
            </param>
            <param name="subscribe">
            If true, send a subscription request to the appliance before sending a cache request
            to the cache.
            </param>
            <param name="liveDataAction">
            One of <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction"/>
            </param>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful; 
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY"/> if the session is being connected, or is disconnected; 
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_INCOMPLETE"/> for the following reasons (<see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetLastSDKErrorInfo"/>):
            <ul>
            <li>
            ProtocolError, if the cache response is malformed;
            </li>
            <li>
            CacheOperationRequestTimeout, if the request timed out;
            </li>
            <li>
            CacheNoData, if no data was returned in the cache response;
            </li>
            <li>
            CacheSuspectData, if the cached data is suspect;
            </li>
            <li>
            CacheErrorResponse, if an error was returned in the cache response.
            </li>
            </ul>
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails, see <see cref="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ErrorInfo"/> for specific failure reason
            reasons
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>  
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            If any of the required arguments is null.
            </exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">
            If any of the arguments is out of range.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.SendCacheRequest(System.Int64,SolaceSystems.Solclient.Messaging.ITopic,System.Boolean,SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction,System.Int64,System.Int64)">
            <summary>
            <p>
            <strong>This method is used for SolCache-RS only.</strong>
            </p>
            A synchronous cache request that waits for the cache response to be
            fulfilled according to the <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction"/> handling
            options.
            <p>
            <strong>Note:</strong>
            Cache requests may be flow controlled if the underlying transport is flow controlled.  
            The transport is considered flow controlled if  the library is unable to write to transport device 
            (for example, the TCP socket is full), or if there are more than 1000 session requests 
            (ICacheSession.SendCacheRequest(...) + ISession.SendRequest(...)) outstanding. 
            This will cause ICacheSession.SendCacheRequest(...) to block if the session property, 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/> is enabled. If <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/>  
            is disabled and it is not possible to write 
            the cache request to the underlying transport, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> is returned.
            </p>
            <p>
            Cached messages received in response to the cache request are delivered to the application 
            through the usual receive message callback delegate as the messages arrive. 
            This function returns when all cache responses have been returned, 
            and the request is either completed by live data (<see cref="F:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction.FULFILL"/>),
            or by timeout. 
            </p>        
            </summary>
            <param name="requestId">
            A positive Int64 that is returned to the application in the cache request response
            and is available in every cached message that is returned.
            </param>
            <param name="topic">
            An ITopic instance representing the topic being requested from the cache.
            </param>
            <param name="subscribe">
            If true, send a subscription request to the appliance before sending a cache request
            to the cache.
            </param>
            <param name="liveDataAction">
            One of <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction"/>
            </param>
            <param name="startSequenceId">
            Starting sequence number for retrieved messages. If set to 0, then start at the oldest available message
            If both sequence Id parameters are set to 0 then the most recent message is returned.               
            </param>
            <param name="endSequenceId">
            End sequence number for retrieved messages, if set to 0, then all available messages starting at startSequenceId are retrieved.
            If both sequence Id parameters are set to 0 then the most recent message is returned.               
            </param>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/> if successful; 
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY"/> if the session is being connected, or is disconnected; 
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_INCOMPLETE"/> for the following reasons (<see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetLastSDKErrorInfo"/>):
            <ul>
            <li>
            ProtocolError, if the cache response is malformed;
            </li>
            <li>
            CacheOperationRequestTimeout, if the request timed out;
            </li>
            <li>
            CacheNoData, if no data was returned in the cache response;
            </li>
            <li>
            CacheSuspectData, if the cached data is suspect;
            </li>
            <li>
            CacheErrorResponse, if an error was returned in the cache response.
            </li>
            </ul>
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails, see <see cref="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ErrorInfo"/> for specific failure reason
            reasons
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>  
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            If any of the required arguments is null.
            </exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">
            If any of the arguments is out of range.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.SendCacheRequest(System.Int64,SolaceSystems.Solclient.Messaging.ITopic,System.Boolean,SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction,System.EventHandler{SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs})">
            <summary>
            Asynchronous cache request, returns immediately upon successful buffering of the
            cache request for transmission. The result of the request is reported through
            the cacheRequestListener.
            <p>
            <strong>Note:</strong>
            Cache requests may be flow controlled if the underlying transport is flow controlled.  
            The transport is considered flow controlled if  the library is unable to write to transport device 
            (for example, the TCP socket is full), or if there are more than 1000 session requests 
            (ICacheSession.SendCacheRequest(...) + ISession.SendRequest(...)) outstanding. 
            This will cause ICacheSession.SendCacheRequest(...) to block if the session property, 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/> is enabled. If <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/>  
            is disabled and it is not possible to write 
            the cache request to the underlying transport, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> is returned.
            </p>  
            <p>
            Cached messages received in response to the cache request are delivered to the application 
            through the usual receive message callback delegate as the messages arrive. 
            </p>         
            </summary>
            <param name="requestId">
            A positive Int64 that is returned to the application in the cache request response
            and is available in every cached message returned.
            </param>
            <param name="topic">
            An ITopic instance representing the topic being requested from the cache.
            </param>
            <param name="subscribe">
            If true, send a subscription request to the appliance before sending a cache request
            to the cache.
            </param>
            <param name="liveDataAction">
            One of <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction"/>
            </param>
            <param name="cacheRequestListener">Delegate for cache request completion</param>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/>, if buffering of the request was successful;
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY"/>, if the underlying session is being connected or is disconnected
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails, see <see cref="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ErrorInfo"/> for specific failure reason
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>  
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            If any of the required arguments is null.
            </exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">
            If any of the arguments is out of range.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.SendCacheRequest(System.Int64,SolaceSystems.Solclient.Messaging.ITopic,System.Boolean,SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction,System.EventHandler{SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs},System.Int64,System.Int64)">
            <summary>
            <p>
            <strong>This method is used for SolCache-RS only.</strong>
            </p>        
            Asynchronous cache request, returns immediately upon successful buffering of the
            cache request for transmission. The result of the request is reported through
            the cacheRequestListener.
            <p>
            <strong>Note:</strong>
            Cache requests may be flow controlled if the underlying transport is flow controlled.  
            The transport is considered flow controlled if  the library is unable to write to transport device 
            (for example, the TCP socket is full), or if there are more than 1000 session requests 
            (ICacheSession.SendCacheRequest(...) + ISession.SendRequest(...)) outstanding. 
            This will cause ICacheSession.SendCacheRequest(...) to block if the session property, 
            <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/> is enabled. If <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.SendBlocking"/>  
            is disabled and it is not possible to write 
            the cache request to the underlying transport, <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_WOULD_BLOCK"/> is returned.
            </p>  
            <p>
            Cached messages received in response to the cache request are delivered to the application 
            through the usual receive message callback delegate as the messages arrive. 
            </p>         
            </summary>
            <param name="requestId">
            A positive Int64 that is returned to the application in the cache request response
            and is available in every cached message returned.
            </param>
            <param name="topic">
            An ITopic instance representing the topic being requested from the cache.
            </param>
            <param name="subscribe">
            If true, send a subscription request to the appliance before sending a cache request
            to the cache.
            </param>
            <param name="liveDataAction">
            One of <see cref="T:SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction"/>
            </param>
            <param name="cacheRequestListener">Delegate for cache request completion</param>
            <param name="startSequenceId">
            Starting sequence number for retrieved messages. If set to 0, then start at the oldest available message.
            If both sequence Id parameters are set to 0 then the most recent message is returned.               
            </param>
            <param name="endSequenceId">
            End sequence number for retrieved messages, if set to 0, then all available messages starting at startSequenceId are retrieved.
            If both sequence Id parameters are set to 0 then the most recent message is returned.               
            </param>      
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_IN_PROGRESS"/>, if buffering of the request was successful;
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_NOT_READY"/>, if the underlying session is being connected or is disconnected
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails, see <see cref="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ErrorInfo"/> for specific failure reason
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>  
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            If any of the required arguments is null.
            </exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">
            If any of the arguments is out of range.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.CancelCacheRequests">
            <summary>
            Cancel all in progress cache requests for a given cache session.
            This function is thread safe and can be called from any thread. When this function is invoked:
            <li> 
            All blocked synchronous cache requests will return immediately with <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_INCOMPLETE"/> return code 
            and <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheRequestCancelled"/> subcode. </li>
            <li> A cache event <see cref="F:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEvent.RequestCompletedNotice"/> with a subcode of <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.CacheRequestCancelled"/> 
            is generated for each in progress asynchronous cache request.</li>
            <li> The associated cache session is still valid to use. </li>
            <li> Live messages that have been queued (if any) will be delivered. </li>
            </summary>
            <returns>
            <see cref="F:SolaceSystems.Solclient.Messaging.ReturnCode.SOLCLIENT_OK"/>, if successful, otherwise an exception is thrown
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when the operation fails, see <see cref="P:SolaceSystems.Solclient.Messaging.OperationErrorException.ErrorInfo"/> for specific failure reason.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the session is already disposed (terminal state).
            </exception>  
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>           
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs">
            <summary>
            Asynchronous cache request event arguments
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs.#ctor(SolaceSystems.Solclient.Messaging.ReturnCode,System.String,SolaceSystems.Solclient.Messaging.Cache.CacheRequestEvent,System.Int64,SolaceSystems.Solclient.Messaging.SDKErrorSubcode)">
            <summary>
            Internal class constructor
            </summary>
            <param name="returnCode"></param>
            <param name="topicStr"></param>
            <param name="cacheRequestEvent"></param>
            <param name="cacheRequestId"></param>
            <param name="subCode"></param>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs.TopicStr">
            <summary>
            The topic string being requested from the cache.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs.ReturnCode">
            <summary>
            See synchronous cache request <see cref="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.SendCacheRequest(System.Int64,SolaceSystems.Solclient.Messaging.ITopic,System.Boolean,SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction)"/>
            or <see cref="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.SendCacheRequest(System.Int64,SolaceSystems.Solclient.Messaging.ITopic,System.Boolean,SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction,System.Int64,System.Int64)"/>
            return codes.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs.SubCode">
            <summary>
            See synchronous cache request <see cref="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.SendCacheRequest(System.Int64,SolaceSystems.Solclient.Messaging.ITopic,System.Boolean,SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction)"/>
            or <see cref="M:SolaceSystems.Solclient.Messaging.Cache.ICacheSession.SendCacheRequest(System.Int64,SolaceSystems.Solclient.Messaging.ITopic,System.Boolean,SolaceSystems.Solclient.Messaging.Cache.CacheLiveDataAction,System.Int64,System.Int64)"/>
            return subcodes.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs.RequestId">
            <summary>
            The request Id passed into the cache request API.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs.RequestEvent">
            <summary>
            The cache request event.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Cache.CacheRequestEventArgs.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType">
            <summary>
            Data types that can be transmitted and received by the machine-independent get/set operations.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BOOL">
            <summary>
            Corresponds to System.Boolean {true,false}.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.UINT8">
            <summary>
            Corresponds to System.Byte [0,255].
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.INT8">
            <summary>
            Corresponds to System.Int16 within [-128,127].
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.UINT16">
            <summary>
            Corresponds to System.Int32 within [0,65535].
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.INT16">
            <summary>
            Corresponds to System.Int16 within [-32768,32767].
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.UINT32">
            <summary>
            Corresponds to System.Int64 within [0,4294967295].
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.INT32">
            <summary>
            Corresponds to System.Int32 within [-2147483648,2147483647].
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.UINT64">
            <summary>
            Maps to System.Int64 within [0,2power(63)-1].
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.INT64">
            <summary>
            Corresponds to System.Int64 within [2power(63),2power(63)-1].
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.WCHAR">
            <summary>
            Corresponds to System.Char (16-bit unicode character).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.STRING">
            <summary>
            Corresponds to string (utf-8 encoded on the wire).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.BYTEARRAY">
            <summary>
            byte[].
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.FLOAT">
            <summary>
            Corresponds to float.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.DOUBLE">
            <summary>
            Corresponds to double.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.MAP">
            <summary>
            Corresponds to IMapContainer.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.STREAM">
            <summary>
            Corresponds to IStreamContainer.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.NULL">
            <summary>
            Corresponds to null.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.DESTINATION">
            <summary>
            Corresponds to IDestination.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.SMF_MESSAGE">
            <summary>
            Corresponds to <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISmfMessage"/> (a complete SMF message that is encapsulated in the container).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.UNKNOWN">
            <summary>
            A validly formatted but unrecognized data type.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDT.ISDTField">
            <summary>
            Encapsulates a Structured Data Type (SDT) field of type SDTFieldType.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SDT.ISDTField.Type">
            <summary>
            This represents the type of the field as defined in <see cref="T:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType"/>.
            </summary>
            <returns>Returns the type of the field as defined in <see cref="T:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType"/></returns>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.SDT.ISDTField.Value">
            <summary>
            This represents the value of the field.
            </summary>
            <exception cref="T:System.OverflowException">
            Thrown when the value cannot be represented by a valid CTS type.
            </exception>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDT.ISDTContainer">
            <summary>
            The parent interface of any Structured Data Type (SDT) container. Subinterfaces of ISDTContainer include
            <see cref="T:SolaceSystems.Solclient.Messaging.SDT.IMapContainer"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer"/>. 
            <p>
            Note: Calling Dispose() on a message-dependent container has no effect on it. The lifecycle of the container
            in this case is tied to that of the containing message.
            </p>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.ISDTContainer.Close">
            <summary>
            Closes the ISDTContainer, making it unusable for read or write operations.
            <p>
            It is an error to invoke this method in the following cases (An OperationErrorException will be thrown):
            <li>The <see cref="T:SolaceSystems.Solclient.Messaging.IMessage"/> holding this container is already sent (after calling <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Send(SolaceSystems.Solclient.Messaging.IMessage)"/>).</li>
            <li>The <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISDTContainer"/> holding this container is already closed (after calling <see cref="M:SolaceSystems.Solclient.Messaging.SDT.ISDTContainer.Close"/>).</li>
            </p>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>                 
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> will be accessible from OperationErrorException
            and will contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.ISDTContainer.Rewind">
            <summary>
            Rewinds the container. Normally when <see cref="M:SolaceSystems.Solclient.Messaging.SDT.ISDTContainer.HasNext"/> returns 
            false, client applications must call Rewind if they want to reiterate over the container's fields.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>                 
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs>. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and will contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs
            </exception>    
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.ISDTContainer.HasNext">
            <summary>
            When iterating through a container (map or stream), this method will return false when the end of the container is 
            reached without advancing the read cursor. It will return true otherwise.
            </summary>
            <returns>True or False</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>                 
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and will contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDT.IMapContainer">
            <summary>
            Represents a Structured Data Type (SDT) map container. 
            <p>
            Very similar to a hash map with one notable exception.
            IMapContainer does not detect duplicate key names on 'add'. If a 
            field is added to the map with a key name that already exist, both fields will 
            be present in the map.  Only one field can be retrieved by that key name and it 
            is not defined which field will be retrieved.
            </p>
            <p>
            The key name field in Solace maps is case sensitive.  For example, adding
            a field with the name key "field_1" and a field with name key "FIELD_1" will
            create two distinct fields that can both be retrieved.
            </p>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.DeleteField(System.String)">
            <summary>
            Deletes the named field from the map.
            </summary>
            <param name="name">The name of the field to delete.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>  
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>       
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and will contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no such field exists with the given name.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetField(System.String)">
            <summary>
            This method returns a field of the given name.
            <p>
            If the returned ISDTField is of type SDTFieldType.MAP or SDTFieldType.STREAM, it is recommended to Close the container when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed
            or the associated message (if it is a message-dependent container) is disposed.
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container results in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.       
            </p>         
            </summary>
            <param name="name">The name of the field to get.</param>
            <returns>The field with the given name.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>  
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>                 
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/>are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field exists with the given name.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetNext">
            <summary>
            Gets the next KeyValuePair(where key is a <see cref="T:System.String"/> and value is a <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISDTField"/>).
            If the returned ISDTField is of type SDTFieldType.MAP or SDTFieldType.STREAM, it is recommended to close the container when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed
            or the associated message (if it is a message-dependent container) is disposed.        
            </summary>
            <returns>KeyValuePair(null, null) if end of Map is reached.</returns>  
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>                 
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddBool(System.String,System.Boolean)">
            <summary>
            Adds a bool field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddUInt8(System.String,System.Byte)">
            <summary>
            Adds a UInt8 field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>   
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddInt8(System.String,System.Int16)">
            <summary>
            Adds a Int8 field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>     
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddUInt16(System.String,System.Int32)">
            <summary>
            Adds a UInt16 field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddInt16(System.String,System.Int16)">
            <summary>
            Adds a Int16 field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddUInt32(System.String,System.Int64)">
            <summary>
            Adds a UInt32 field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddInt32(System.String,System.Int32)">
            <summary>
            Adds a Int32 field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>     
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddInt64(System.String,System.Int64)">
            <summary>
            Adds a Int64 field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>   
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddUInt64(System.String,System.Int64)">
            <summary>
            Adds a UInt64 field with the given name.
            </summary>
            <param name="name">Field name, cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddChar(System.String,System.Char)">
            <summary>
            Adds a char field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddFloat(System.String,System.Single)">
            <summary>
            Adds a float field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when anunrecoverable error occurs.
            </exception>     
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddDouble(System.String,System.Double)">
            <summary>
            Adds a double field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> will be accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddString(System.String,System.String)">
            <summary>
            Adds a string field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="value">Field Value; cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddDestination(System.String,SolaceSystems.Solclient.Messaging.IDestination)">
            <summary>
            Adds a <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/> instance field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="destination">Destination value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>          
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddByteArray(System.String,System.Byte[])">
            <summary>
            Adds a byte array field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="values">Byte array values</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddNull(System.String)">
            <summary>
            Adds a null field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddSmfMsg(System.String,SolaceSystems.Solclient.Messaging.SDT.ISmfMessage)">
            <summary>
            Adds a <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISmfMessage"/> field with the given name.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="message">ISMFMessage value</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddUnknownField(System.String,SolaceSystems.Solclient.Messaging.SDT.IUnknownSDTField)">
            <summary>
            Adds a <see cref="T:SolaceSystems.Solclient.Messaging.SDT.IUnknownSDTField"/> field with a given name.
            <p>An unknown field is by definition a valid SDT field, that's
            not known to the current version of the API.
            </p>
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <param name="field">IUnknownSDTField instance</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the input parameter is null.
            </exception>       
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetBool(System.String)">
            <summary>
            Gets the field with the given name as a boolean.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Boolean field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name,
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetUInt8(System.String)">
            <summary>
            Gets the field with the given name as a Byte (UInt8).
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>UInt8 field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name,
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetInt8(System.String)">
            <summary>
            Gets the field with the given name as a Int8.(converted to Int16) 
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Int8 field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetUInt16(System.String)">
            <summary>
            Gets the field with the given name as a UInt16 (converted to Int32).
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>UInt16 field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetInt16(System.String)">
            <summary>
            Gets the field with the given name as a Int16.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Int16 field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetUInt32(System.String)">
            <summary>
            Gets the field with the given name as a UInt32 (converted to Int64).
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>UInt32 field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>   
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetInt32(System.String)">
            <summary>
            Gets the field with the given name as a Int32.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Int32 Field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetInt64(System.String)">
            <summary>
            Gets the field with a given name as a Int64.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Int64 field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetUInt64(System.String)">
            <summary>
            Gets the field with the given name as a UInt64 (converted to Int64, therefore there could be loss of precision).
            Note: The .NET API is CLS-compliant and therefore unsigned integers are not supported.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>UInt64 field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
            <exception cref="T:System.OverflowException">
            Thrown when the field's value is a UInt64 that is greater than Int64.MaxValue.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetChar(System.String)">
            <summary>
            Gets the field with the given name as a Char.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Char field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetFloat(System.String)">
            <summary>
            Gets the field with the given name as a float.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Float field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetDouble(System.String)">
            <summary>
            Gets the field with the given name as a double.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Double field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no such field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetString(System.String)">
            <summary>
            Gets the field with the given name as a string.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>String field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetDestination(System.String)">
            <summary>
            Gets the field with the given name as a <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/>.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Destination field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            When no such field with the given name.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no such field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetByteArray(System.String)">
            <summary>
            Gets the field with the given name as a byte array.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>ByteArray field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetNull(System.String)">
            <summary>
            Gets the field with the given name as a null. This is a special accessor; any SDT type with the inclusion 
            of map and stream can be read as null.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when there is no field with the given name.
            In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetSmfMsg(System.String)">
            <summary>
            Gets the field with the given name as a <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISmfMessage"/>.
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>SMF Message field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetMap(System.String)">
            <summary>
            Opens the contained submap with the given name. The returned IMapContainer is ready
            for read/write operations.
            It is recommended to Close the IMapContainer when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed 
            or the associated message (if it is a message-dependent container) is disposed.
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.       
            </p>         
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Map field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no such field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>    
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.GetStream(System.String)">
            <summary>
            Opens the contained substream with the given name. The returned IStreamContainer is
            ready for read and write operations.
            It is recommended to Close the IStreamContainer when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed 
            or the associated message (if it is a message-dependent container) is disposed.
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.       
            </p>        
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>Stream field value</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FieldNotFoundException">
            Thrown when no field with the given name exists.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when one of the following occurs: 
            there is no field with the given name
            or it is an invalid data conversion. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.CreateMap(System.String)">
            <summary>
            Creates a submap with the given name. The returned IMapContainer
            is ready for read and write operations.
            It is recommended to Close the IMapContainer when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed
            or the associated message (if it is a message-dependent container) is disposed.
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.       
            </p>
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>The Map container</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error condition occurs when trying to create this container. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>          
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.CreateStream(System.String)">
            <summary>
            Creates a substream with the given name. The returned IStreamContainer is
            ready for read and write operations.
            It is recommended to Close the IStreamContainer when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed
            or the associated message (if it is a message-dependent container) is disposed.
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.       
            </p>        
            </summary>
            <param name="name">Field name; cannot be null.</param>
            <returns>The Stream container</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error condition occurs when trying to create this continer. In this case <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and 
            <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IMapContainer.AddSDTContainer(System.String,SolaceSystems.Solclient.Messaging.SDT.ISDTContainer)">
            <summary>
            Adds a <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISDTContainer"/> field with the given name to this map container.
            </summary>
            <param name="name">Field name; cannot be null.</param>        
            <param name="container">ISDTContainer to add</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>  
            <exception cref="T:System.ArgumentNullException">
            Thrown when name or container parameter is null
            </exception>          
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>          
            <exception cref="T:System.ArgumentNullException">
            Thrown when container is null.
            </exception>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer">
            <summary>
            Represents a structured data types (SDT) stream container.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetNext">
            <summary>
            Gets the next <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISDTField"/>.
            If the returned ISDTField is of type SDTFieldType.MAP or SDTFieldType.STREAM, it is recommended to Close the container when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed
            or the associated message (if it is a message-dependent container) is disposed.        
            </summary>
            <returns>The next value in the stream. Null if the end of stream is reached.</returns>  
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>                 
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddBool(System.Boolean)">
            <summary>
            Adds a bool field to the stream.
            </summary>
            <param name="value">Boolean value to add.</param>     
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddUInt8(System.Byte)">
            <summary>
            Adds a UInt8 field to the stream.
            </summary>
            <param name="value">UInt8 value to add</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddInt8(System.Int16)">
            <summary>
            Adds an Int8 field to the stream.
            </summary>
            <param name="value">Int8 value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more informtion.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddUInt16(System.Int32)">
            <summary>
            Adds a UInt16 field to the stream.
            </summary>
            <param name="value">UInt16 value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddInt16(System.Int16)">
            <summary>
            Adds a Int16 field to the stream.
            </summary>
            <param name="value">Int16 value to add</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddUInt32(System.Int64)">
            <summary>
            Adds a UInt32 field to the stream.
            </summary>
            <param name="value">UInt32 value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddInt32(System.Int32)">
            <summary>
            Adds a Int32 field to the stream.
            </summary>
            <param name="value">Int32 value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddInt64(System.Int64)">
            <summary>
            Adds a Int64 field to the stream.
            </summary>
            <param name="value">Int64 value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddUInt64(System.Int64)">
            <summary>
            Adds a UInt64 field to the stream.
            </summary>
            <param name="value">UInt64 value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddChar(System.Char)">
            <summary>
            Adds a char field to the stream.
            </summary>
            <param name="value">Char value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddFloat(System.Single)">
            <summary>
            Adds a float field to the stream.
            </summary>
            <param name="value">The float value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> will be accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>      
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddDouble(System.Double)">
            <summary>
            Adds a double field to the stream.
            </summary>
            <param name="value">The double value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddString(System.String)">
            <summary>
            Adds a string field to the stream.
            </summary>
            <param name="value">String value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>   
            <exception cref="T:System.ArgumentNullException">
            Thrown when value is null.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddDestination(SolaceSystems.Solclient.Messaging.IDestination)">
            <summary>
            Adds a <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/> field to the stream.
            </summary>
            <param name="destination">Destination value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>          
            <exception cref="T:System.ArgumentNullException">
            Thrown when value is null.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddByteArray(System.Byte[])">
            <summary>
            Adds a byte array field to the stream.
            </summary>
            <param name="values">Byte array value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>          
            <exception cref="T:System.ArgumentNullException">
            Thrown when value is null.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddNull">
            <summary>
            Adds a null (<see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.NULL"/>) field to the stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddSmfMsg(SolaceSystems.Solclient.Messaging.SDT.ISmfMessage)">
            <summary>
            Adds a <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISmfMessage"/> field to the stream.
            </summary>
            <param name="message">SMF message value to add.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>          
            <exception cref="T:System.ArgumentNullException">
            Thrown when message is null.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddUnknownField(SolaceSystems.Solclient.Messaging.SDT.IUnknownSDTField)">
            <summary>
            Adds a <see cref="T:SolaceSystems.Solclient.Messaging.SDT.IUnknownSDTField"/> field to the stream.
            </summary>
            <param name="field">An IUnknownSDTField instance.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>          
            <exception cref="T:System.ArgumentNullException">
            Thrown when message is null.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetBool">
            <summary>
            Gets the next field as a Boolean.
            </summary>
            <returns>Boolean value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetUInt8">
            <summary>
            Gets the next field as a UInt8 (byte).
            </summary>
            <returns>UInt8 value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetInt8">
            <summary>
            Gets the next field as a Int8 (converted to Int16).
            </summary>
            <returns>Int8 value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetUInt16">
            <summary>
            Gets the next field as a UInt16 (converted to Int32).
            </summary>
            <returns>UInt16 value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetInt16">
            <summary>
            Gets the next field as a Int16.
            </summary>
            <returns>Int16 value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetUInt32">
            <summary>
            Gets the next field as a UInt32 (converted to Int64).
            </summary>
            <returns>UInt32 value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/>are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetInt32">
            <summary>
            Gets the next field as a Int32.
            </summary>
            <returns>Int32 value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetInt64">
            <summary>
            Gets the next field as a Int64.
            </summary>
            <returns>Int64 value from the stream</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            When end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetUInt64">
            <summary>
            Gets the next field as a UInt64 (converted to Int64, therefore there could a loss of precision).
            </summary>
            <returns>UInt64 value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
            <exception cref="T:System.OverflowException">
            Thrown when field's value is a UInt64 that's greater than Int64.MaxValue.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetChar">
            <summary>
            Gets the next field as a Char.
            </summary>
            <returns>Char value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetFloat">
            <summary>
            Gets the next field as a float.
            </summary>
            <returns>Float value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            When end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> aree accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetDouble">
            <summary>
            Gets the next field as a double.
            </summary>
            <returns>Double value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetString">
            <summary>
            Gets the next field as a string.
            </summary>
            <returns>String value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetDestination">
            <summary>
            Gets the next field as a <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/>.
            </summary>
            <returns>Destination value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetByteArray">
            <summary>
            Gets the next field as a byte array.
            </summary>
            <returns>Byte array value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetNull">
            <summary>
            Gets the next field as a <see cref="F:SolaceSystems.Solclient.Messaging.SDT.SDTFieldType.NULL"/>. This is a special accessor; any SDT type with the inclusion 
            of map and stream can be read as null.
            </summary>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetSmfMsg">
            <summary>
            Gets the next field as <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISmfMessage"/>.
            </summary>
            <returns>SMF Message value from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetMap">
            <summary>
            Opens the contained sub-map with the given name. The returned IMapContainer is ready
            for read and write operations. 
            It is recommended to Close the IMapContainer when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed
            or the associated message (if it is a message-dependent container) is disposed.        
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.       
            </p>         
            </summary>
            <returns>An opened sub-map.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            When end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs. 
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.GetStream">
            <summary>
            Opens the contained sub-stream with the given name. The returned IStreamContainer is
            ready for read and write operations. 
            It is recommended to Close the IStreamContainer when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed
            or the associated message (if it is a message-dependent container) is disposed.        
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.       
            </p>         
            </summary>
            <returns>An opened sub-stream</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of stream is reached.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.CreateMap">
            <summary>
            Creates a sub-map with the given name. The returned IMapContainer is
            is ready for read and write operations.
            It is recommended to Close the IMapContainer when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed
            or the associated message (if it is a message-dependent container) is disposed.        
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.       
            </p>          
            </summary>
            <returns>The created sub-map.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.CreateStream">
            <summary>
            Creates a sub-stream with the given name. The returned IStreamContainer is
            ready for read/write operations.  
            It is recommended to Close the IStreamContainer when done. If it is not explicitly closed, 
            the container is automatically closed when the associated parent container is closed
            or the associated message (if it is a message-dependent container) is disposed.        
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.       
            </p>         
            </summary>
            <returns>The created sub-stream.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>    
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer.AddSDTContainer(SolaceSystems.Solclient.Messaging.SDT.ISDTContainer)">
            <summary>
            Adds a <see cref="T:SolaceSystems.Solclient.Messaging.SDT.ISDTContainer"/> field to this stream container.
            </summary>
            <param name="container">ISDTContainer to add</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the container is already closed.
            </exception>         
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>          
            <exception cref="T:System.ArgumentNullException">
            Thrown when container is null.
            </exception>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDT.SDTUtils">
            <summary>
            Used to manipulate SDT components in a message.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.GetText(SolaceSystems.Solclient.Messaging.IMessage)">
            <summary>
            If the message's binary payload contains a string, this method will
            return it. Otherwise it will return <c>null</c>. 
            </summary>
            <param name="message">The message to get the string from.</param>
            <returns>The string from the binary payload; or <c>null</c>, if none exists.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when message is <c>null</c>.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>          
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.SetText(SolaceSystems.Solclient.Messaging.IMessage,System.String)">
            <summary>
            Sets the binary attachment part of the message to the specified utf8 encoded string.
            </summary>
            <param name="message">Message to set the binary attachment on.</param>
            <param name="text">Text to set the binary attachment to.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when message or string is <c>null</c>.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.GetContainer(SolaceSystems.Solclient.Messaging.IMessage)">
            <summary>
            Returns an ISDTContainer (if available) within a message.
            The ISDTContainer could be either a IMapContainer or IStreamContainer.
            It is recommended to Close the ISDTContainer when done. If it is not explicitly closed, 
            the container is automatically closed when the associated message is sent or disposed <see cref="T:System.IDisposable"/>. 
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this container will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/> 
            error subcode.
            </p>      
            </summary>
            <param name="message">Message to get the container from.</param>
            <returns>A IMapContainer or IStreamContainer, if they exist; null, otherwise</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when message is null.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateMap(SolaceSystems.Solclient.Messaging.IMessage,System.Int32)">
            <summary>
            This method creates a map container (IMapContainer) in the binary attachment part of the 
            given message, and any existing data is overwritten. The returned IMapContainer instance
            can be later used to add SDT fields.
            It is recommended to Close the IMapContainer when done. If it is not explicitly closed, 
            the IMapContainer is automatically closed when the associated message is disposed <see cref="T:System.IDisposable"/>. 
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this map will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/>
            error subcode.
            </p>        
            </summary>
            <param name="message">The message to create the map container in.</param>
            <param name="initialSize">
            This value must be greater or equal to zero.
            It hints to the size of the map that will be created, it is used to 
            determine the size of datablock to allocate. If it is too small for the
            subsequently created map, a larger datablock is allocated when
            necessary and existing SDT data is copied into place. This reallocation
            can negatively affect performance.
            </param>
            <returns>The created map container.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.ArgumentNullException">
            Thrown when the message is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when initial size is less than zero.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateStream(SolaceSystems.Solclient.Messaging.IMessage,System.Int32)">
            <summary>
            Creates a stream container (IStreamContainer) in the binary attachment part of the 
            given message. Any existing data is overwritten. The returned IStreamContainer instance
            can be later used to add SDT fields.
            It is recommended to Close the IStreamContainer when done. If it is not explicitly closed, 
            the stream is automatically closed when the associated message is disposed <see cref="T:System.IDisposable"/>.
            <p>
            Whether it is explicitly closed by the client application, or implicitly by the API, any attempt to use
            this stream will result in an <see cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException"/> with <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamNullReference"/>
            error subcode.
            </p>        
            </summary>
            <param name="message">The message to create the map container in.</param>
            <param name="initialSize">
            This parameter must be greater than or equal to zero.
            It hints to the size of the stream to be created, it is used to 
            determine the size of the datablock to allocate. If it is too small for the
            subsequently created stream, a larger datablock is allocated when
            necessary and existing SDT data is copied into place. This reallocation
            can negatively affect performance.
            </param>
            <returns>The created stream container.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the message is null.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when initialSize is less than zero.
            </exception>       
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateStream(System.Int32)">
            <summary>
            Allocates a memory buffer of size bufferSize on the heap and creates a 
            message-independent (free standing) <see cref="T:SolaceSystems.Solclient.Messaging.SDT.IStreamContainer"/> within.
            <p>
            If the subsequent calls to add structured data types exceeds the buffer size an error (<see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InsufficientSpace"/>)
            is returned to the application.
            </p>
            <p>
            Note: When using message-indpendent streams, it's an error to have more than one open subcontainer at once. In other words, client
            applications must close the open subcontainer before creating a new one. If such attempt is made, client applications will get an error
            with SDKErrorSubcode equal to <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfMemory"/>. Note that this limitation is not present with streams created with 
            <see cref="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateStream(SolaceSystems.Solclient.Messaging.IMessage,System.Int32)"/>.
            </p>        
            <p>
            Note: Applications should call <see cref="M:System.IDisposable.Dispose"/> as soon as they're done
            with the stream. Message-independent containers, when created, allocate memory resources.
            </p>        
            </summary>
            <param name="bufferSize">max size (in bytes) of the backing memory buffer to allocate on the heap</param>
            <returns>The created container.</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contains more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>  
            <exception cref="T:System.OutOfMemoryException">
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateMap(System.Int32)">
            <summary>
            Allocates a memory buffer of size maxSize on the heap and creates a 
            message-independent (free standing) <see cref="T:SolaceSystems.Solclient.Messaging.SDT.IMapContainer"/> within.
            <p>
            If the subsequent calls to add structured data types exceeds the buffer size an error (<see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.InsufficientSpace"/>)
            is returned to the application.
            </p>
            <p>
            Note: When using message-indpendent maps, it's an error to have more than one open subcontainer at once. In other words, client
            applications must close the open subcontainer before creating a new one. If such attempt is made, client applications will get an error
            with SDKErrorSubcode equal to <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.OutOfMemory"/>. Note that this limitation is not present with maps created with 
            <see cref="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateMap(SolaceSystems.Solclient.Messaging.IMessage,System.Int32)"/>.
            </p>
            <p>
            Note: Applications should call <see cref="M:System.IDisposable.Dispose"/> as soon as they're done
            with the map. Message-independent containers, when created, allocate memory resources.
            </p>       
            </summary>
            <param name="bufferSize">max size (in bytes) of the backing memory buffer to allocate on the heap</param>
            <returns>Returns a memory buffer of size maxSize on the heap</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from OperationErrorException
            and contains more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
            <exception cref="T:System.OutOfMemoryException">
            </exception>  
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrwon when bufferSize is invalid 
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.SetSDTContainer(SolaceSystems.Solclient.Messaging.IMessage,SolaceSystems.Solclient.Messaging.SDT.ISDTContainer)">
            <summary>
            Sets an SDT container as the binary attachment of a message.
            <p>
            Any existing data in
            the message is overwritten. This method copies in from the given container, therefore
            changes to the container after this method returns will not be propagated to the message.
            </p>
            <p>
            WARNING: This method is intended to be used to add an existing
            message independent container to a message.That is, a container created by
            either  <see cref="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateMap(System.Int32)"/> or <see cref="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateStream(System.Int32)"/>.
            Do not call this method with a container that is already in the message,
            returned from a call to <see cref="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateMap(SolaceSystems.Solclient.Messaging.IMessage,System.Int32)"/> or
            <see cref="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.CreateStream(SolaceSystems.Solclient.Messaging.IMessage,System.Int32)"/>. That is unnecessary as the container
            is already in the message. Further, the first operation of
            <see cref="M:SolaceSystems.Solclient.Messaging.SDT.SDTUtils.SetSDTContainer(SolaceSystems.Solclient.Messaging.IMessage,SolaceSystems.Solclient.Messaging.SDT.ISDTContainer)"/> is to wipe out the existing binary
            attachment.
            </p>
            </summary>
            <param name="msg">an <c>IMessage</c> instance</param>
            <param name="container">a <c>ISDTContainer</c> </param>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when an error occurs. In this case
            <see cref="T:SolaceSystems.Solclient.Messaging.ReturnCode"/> and <see cref="T:SolaceSystems.Solclient.Messaging.SDKErrorInfo"/> are accessible from <c>OperationErrorException</c>
            and contain more information.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception> 
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDT.ISmfMessage">
            <summary>
            A tagging interface of an SMF (Solace Messaging Format) encoded message handle.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.SDT.IUnknownSDTField">
            <summary>
            A tagging interface of an unknown SDT field; a field that the current API version does not yet understand
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.ContextFactory">
            <summary>
            ContextFactory is a singleton which represents the first point of contact or entry
            point to the APIs. It has the following responsibilities:
            <li> Exposes the initialization and cleanup routines. API initialization is required
            before using any of its components.
            </li>
            <li> 
            Acts as a factory of the different components of the API, such as contexts, messages, 
            non-temporary destinations, durable endpoint instances, and subscriptions.
            </li>
            <li> Exposes a number of useful statistics at the message and memory pool levels. </li>
            <li> Exposes logging facilities to enable client applications to receive log events and control the log level. </li> 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.ContextFactory.NUM_MSG_QUANTA">
            <summary>
            The number of message size quanta available. Useful when calling <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetQuantaLevelStat(SolaceSystems.Solclient.Messaging.QuantaLevelStatistic,System.Int32)"/> 
            to anchor the "quantaIndex" argument to  <see cref="F:SolaceSystems.Solclient.Messaging.ContextFactory.NUM_MSG_QUANTA"/>-1
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactory.Instance">
            <summary>
            A Singleton accessor.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.Init(SolaceSystems.Solclient.Messaging.ContextFactoryProperties)">
            <summary>
            Initializes the Messaging API. This method must be called at least once, before using 
            any of the messaging APIs. Typically ContextFactory.Init() is called once during
            program initialization.
            One property of interest is <see cref="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.LogDelegate"/>, it allows
            client applications to receive API log information. 
            </summary>
            <param name="props"></param>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            If unable to ready the API for use.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.SetLogLevel(SolaceSystems.Solclient.Messaging.SolLogLevel)">
            <summary>
            Change the log level in the native API. When the logging level is high,
            more messages and strings are generated. Each generated log must be marshalled across
            the native Interop layer, so setting high log levels like SolLogLevel.Debug can cause
            poor messaging performance.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetVersion">
            <summary>
            Returns version information.
            ContextFactory.Instance.Init(...) must be called before invoking this method, otherwise
            the NativeSolClient library version information will be missing (IVersion.Native* properties)
            </summary>
            <returns>Returns version information</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.Cleanup">
            <summary>
            This method may be called after use of the API is completed. 
            <p>
            This method takes care of any global clean-up that might be required. It 
            automatically frees all allocated resources, including those for Contexts 
            and Sessions that have been previously created but are not destroyed. Note that
            if Cleanup() is called while sessions are connected, any messages buffered for 
            transmission are discarded and not sent.
            
            In most applications, it is not necessary to call ContextFactory.Cleanup() as the resources in 
            use are automatically recovered when the application exits. ContextFactory.Cleanup() exists for 
            rare applications that may want recover all API resources and continue operating without using
            the API further.
            </p>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.ContextFactory.Contexts">
            <summary>
            Returns a read-only list of of active (that is, not yet disposed) contexts created by this Factory.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateContext(SolaceSystems.Solclient.Messaging.ContextProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.ContextEventArgs})">
            <summary>
            Creates a new IContext instance.
            </summary>
            <param name="contextProperties">Context properties</param>
            <param name="contextEventHandler">An EventHandler delegate</param>        
            <returns>A new IContext instance</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            thrown when unable to create a new context instance
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            thrown when unrecoverable error occurs
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateTopic(System.String)">
            <summary>
            Creates a non-temporary Topic with the given name.
            </summary>
            <param name="name">Topic name</param>
            <returns>Returns a non-temporary Topic with the given name</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateTopic(System.String,System.Boolean)">
            <summary>
            Creates a non-temporary ITopic instance with the option to set receive-all-deliver-to-one flag.
            <p>
            This flag, when set on a Topic subscription, overrides the DeliverToOne message property. If
            the Topic in the message matches, it is delivered to clients with matching subscriptions with the
            ReceiveAllDeliverToOne set, in addition to being round-robined amongst clients subscribed to the Topic 
            without this override.
            </p>
            </summary>
            <param name="name">Topic Name</param>
            <param name="receiveAllDeliverToOne">option to set receive-all-deliver-to-one flag</param>
            <returns>Returns a non-temporary ITopic instance with the option to set receive-all-deliver-to-one flag</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateTopic(SolaceSystems.Solclient.Messaging.TopicProperties)">
            <summary>
            Creates a non-temporary ITopic instance given a TopicProperties.
            <p><see cref="P:SolaceSystems.Solclient.Messaging.TopicProperties.IsReceiveAllDeliverToOne"/> specifies the DTO behavior. </p>
            </summary>
            <param name="properties">Topic Properties <see cref="T:SolaceSystems.Solclient.Messaging.TopicProperties"/></param>
            <returns>Returns a non-temporary ITopic instance given a TopicProperties</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateXpe(SolaceSystems.Solclient.Messaging.XpeProperties)">
            <summary>
            Creates an Xpath expression (XPE) with the specified parameters.
            </summary>
            <param name="xpeProperties">Xpe Properties <see cref="T:SolaceSystems.Solclient.Messaging.XpeProperties"/></param>
            <returns>Returns an Xpath expression (XPE) with the specified parameters</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateQueue(System.String)">
            <summary>
            Creates a representation of a durable/non-temporary Queue in the API.
            <p>
            Before creating a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> instance to a durable Queue on the appliance, the queue must be first provisioned. Applications can provision
            durable/non-temporary queues using <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Provision(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.EndpointProperties,System.Int32,System.Object)"/>.
            </p>
            <p>
            Applications can send or receive Guaranteed messages from a Queue, messages received on a Queue have a single consumer. Multiple subscribing clients can listen for messages on the same Queue, 
            but once any client retrieves a particular message from the Queue and acknowledges it, that message is consumed and is no longer available to other potential subscribing clients.
            To consume messages from a Queue, client applications must create a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow">Flow</see> using CreateFlow(...) on <see cref="T:SolaceSystems.Solclient.Messaging.ISession"/> passing
            in the corresponding <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> instance. 
            </p>
            <p>
            An exclusive Queue can have multiple active flows at any given time, but only one flow in the set of bound flows can actually consume messages.
            If the currently consuming flow is closed, one of the standby flows take over and start consuming messages from that
            Queue.
            </p>
            <p>
            A non-exclusive Queue can also have multiple active flows at any given time, but all flows in the set of bound flows can consume messages.
            Messages are forwarded to bound flows by the appliance in a round-robin fashion. If an application does not consume the message (does not acknowledge it),
            then when that application closes the flow, or exits, all non-consumed messages are re-delivered, in a round-robin fashion, to any flows
            still currently bound.
            </p>
            </summary>
            <param name="name"></param>
            <returns>IQueue</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception> 
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateQueue(System.String,System.String)">
            <summary>
            <p>
            <strong>Note:</strong> This method is obsolete, and its usage with appliances running SolOS Version 5.4 and greater is strongly discouraged. 
            Applications should use <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateQueue(System.String)"/> instead.
            </p>
            Creates a representation of a durable/non-temporary queue in the API, given its name and the Virtual Router Name of the hosting appliance.
            <p>
            Before creating a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> instance to a durable queue on the appliance, the queue must be first provisioned. Applications can provision
            durable/non-temporary queues using <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Provision(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.EndpointProperties,System.Int32,System.Object)"/>.
            </p>
            <p>
            Applications can send or receive Guaranteed messages from a Queue, messages received on a Queue have a single consumer. Multiple subscribers can listen for messages on the same Queue, 
            but once any subscriber retrieves a particular message from the Queue and acknowledge it, that message is consumed and is no longer available to other potential subscribers.
            To consume messages from a Queue, client applications must create a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow">Flow</see> using CreateFlow(...) on <see cref="T:SolaceSystems.Solclient.Messaging.ISession"/> passing
            in the corresponding <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> instance. 
            </p>      
            </summary>
            <param name="name">the local queue name</param>
            <param name="virtualRouterName">The network virtual router name of the appliance configured with the Queue.  
            You must get this string from your network administrator or query the session 
            property <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.VirtualRouterName"/>.</param>
            <returns>A durable queue instance</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when unable to create the queue 
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateMessage">
            <summary>
            Creates an IMessage instance. Applications are responsible for disposing all messages allocated by this method
            as soon as they are done with them.
            </summary>
            <returns>Returns a new IMessage</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateClientName(System.String)">
            <summary>
            Creates a representation of a remote client endpoint, which can be used to add/remove
            subscriptions on behalf of that client.
            </summary>
            <param name="clientName">The client name obtained from a connected session through <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientName"/>.</param>
            <returns>IClientName</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateDurableTopicEndpoint(System.String)">
            <summary>
            Deprecated, please use <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateDurableTopicEndpointEx(System.String)"/> instead.
            </summary>
            <param name="name"></param>
            <returns>IDurableTopicEndpoint</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateDurableTopicEndpointEx(System.String)">
            <summary>
            Creates a representation of a durable Topic Endpoint (DTE) in the API.
            <p>
            A DTE is a holding area which allows a subscriber to attract 
            Guaranteed messages matching a given <see cref="T:SolaceSystems.Solclient.Messaging.ITopic">Topic</see> subscription. Durable means that
            the subscriber that is bound to the given DTE, does not have to be online to attract matching messages.
            </p>
            <p>
            This method does not provision the DTE on the appliance. The represented DTE must be first provisioned on the appliance before 
            any use by the API. Applications are able to provision
            DTEs on the appliance using <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Provision(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.EndpointProperties,System.Int32,System.Object)"/> where capability <see cref="F:SolaceSystems.Solclient.Messaging.CapabilityType.ENDPOINT_MANAGEMENT"/>
            exists.
            The name parameter is the name given to the Topic Endpoint when provisioning it on the appliance. Applications can call
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Provision(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.EndpointProperties,System.Int32,System.Object)"/> to provision it on the appliance.
            </p>
            <p>
            To consume messages from a given DTE, client applications
            must create a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow">Flow</see> using CreateFlow(...) on <see cref="T:SolaceSystems.Solclient.Messaging.ISession"/> passing
            in the corresponding DTE. Also, there can be only one active flow per DTE.
            </p>
            <p>
            DTEs are only supported on appliances with an Assured Delivery Blade (ADB).
            </p>
            </summary>
            <param name="name"></param>
            <returns>ITopicEndpoint</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateSubscriberEndpoint(SolaceSystems.Solclient.Messaging.ISession)">
            <summary>
            Deprecated.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateReplicationGroupMessageId(System.String)">
            <summary>
            Create an Replication Group Message Id object from a string.
            A IReplicationGroupMessageId is a <see cref="T:SolaceSystems.Solclient.Messaging.IReplayStartLocation"/> instance that when set in 
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocationEx"/> indicates that only messages spooled in the replay
            log after the given IReplicationGroupMessageId should be replayed.
            </summary>
            <param name="replicationGroupMessageIdString">formatted id string from <see cref="M:SolaceSystems.Solclient.Messaging.IReplicationGroupMessageId.ToString"/></param>
            <returns>
            Returns a valid Replication Group Message Id instance.
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            When create operation fails.
            Possible subcodes:
            <list type="">
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamOutOfRange"/>, When replicationGroupMessageIdString is an invalid format.
            </item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            When replicationGroupMessageIdString is null.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetLastSDKErrorInfo">
            <summary>
            Returns a SDKErrorInfo instance, which contains the last captured error information
            for the calling thread. This information is captured on a per-thread basis. The returned
            structure is only valid until the thread makes the next API call.
            <p>
            This method is typically invoked from within event delegates (Session and Flow), to get more info on the 
            reported event.
            </p>
            </summary>
            <returns>An SDKErrorInfo</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            thrown when unrecoverable error occurs
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetMessageLevelStat(SolaceSystems.Solclient.Messaging.MessageLevelStatistic)">
            <summary>
            Returns the value of the specified message level statistic.
            </summary>
            <param name="stat"><see cref="T:SolaceSystems.Solclient.Messaging.MessageLevelStatistic"/></param>
            <returns>-1, if it fails</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.ContextFactory.GetQuantaLevelStat(SolaceSystems.Solclient.Messaging.QuantaLevelStatistic,System.Int32)">
            <summary>
            Returns the value of the specified quanta level statistic.
            </summary>
            <param name="stat"></param>
            <param name="quantaIndex">Index of the quanta, an integer in [0,<see cref="F:SolaceSystems.Solclient.Messaging.ContextFactory.NUM_MSG_QUANTA"/>]</param>
            <returns>-1, if it fails</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Helper">
            <summary>
            A Helper Utilities class
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Helper.CreateUniqueName(System.String)">
            <summary>
            Provided for convenience only; creates a unique ID, to be used by applications
            when naming <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> instances.
            </summary>
            <param name="prefix">Optional, if specified, the UniqueName will have the following format prefix/uuid.</param>
            <returns>Returns a unique ID</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Helper.Destination">
            <summary>
            Utilities class for working with <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/>, it includes:
            <li> 
            Helper method to get the string encoding of a given <see cref="T:SolaceSystems.Solclient.Messaging.IDestination"/>.
            </li>
            <li> 
            Helper methods to create <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> and <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> given their corresponding
            string encoding.
            </li> 
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Helper.Destination.GetEncodedName(SolaceSystems.Solclient.Messaging.IDestination)">
            <summary>
            Returns a string encoded representation of a <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/>
            destination.
            </summary>
            <param name="destination"></param>
            <returns>Returns a string encoded representation of a <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> or <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> destination</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Helper.Destination.QueueFromEncodedName(System.String)">
            <summary>
            Creates a <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> instance given its encoded string form. 
            The durability of the queue is inferred 
            from the encoded string form (encodedQueueName).
            </summary>
            <param name="encodedQueueName">Must be obtained from <see cref="M:SolaceSystems.Solclient.Messaging.Helper.Destination.GetEncodedName(SolaceSystems.Solclient.Messaging.IDestination)"/></param>
            <returns>Returns a <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> instance given its encoded string form</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Helper.Destination.TopicFromEncodedName(System.String)">
            <summary>
            Creates a <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> instance given its encoded string form. Whether the topic
            is temporary or not is inferred from the encoded string form (encodedTopicName).
            </summary>
            <param name="encodedTopicName">Must be obtained from <see cref="M:SolaceSystems.Solclient.Messaging.Helper.Destination.GetEncodedName(SolaceSystems.Solclient.Messaging.IDestination)"/></param>
            <returns>Returns a <see cref="T:SolaceSystems.Solclient.Messaging.ITopic"/> instance given its encoded string form</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Constants">
            <summary>
            Some constants
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Adapter.ISDTUtils">
            <summary>
            The concrete implementation depends on the API flavor 
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Adapter.SDTUtilsAdapter">
            <summary>
            Adapter implementation of ISDTUtils. It decides which ISDUtils implementation to use
            based on the API flavor
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Adapter.IContextFactory">
            <summary>
            The concrete implemenation depends on the API flavor,
            For SL, there's no concept of context factory, sessions are directly created fro SolclientFactory
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Adapter.ContextFactoryAdapter">
            <summary>
            Adapter implementation of IContextFactory. It decides which IContextFactory to use
            based on the API flavor
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl">
            <summary>
            Represents a timer task to be executed in the context of the corresponding <see cref="T:SolaceSystems.Solclient.Messaging.IContext"/> thread.
            To create and start a TimerTask please see <see cref="M:SolaceSystems.Solclient.Messaging.TimerTask.Start(SolaceSystems.Solclient.Messaging.IContext,System.Threading.TimerCallback,SolaceSystems.Solclient.Messaging.TimerMode,System.Int64,System.Object)"/>.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.#ctor(SolaceSystems.Solclient.Messaging.IContext,System.Threading.TimerCallback,SolaceSystems.Solclient.Messaging.TimerMode,System.Int64,System.Object)">
            <summary>
            Private constructor to restrict instance creation to factory method
            </summary>
            <param name="context"></param>
            <param name="userCallbackDelegate"></param>
            <param name="timerMode"></param>
            <param name="durationInMsecs"></param>
            <param name="userState"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.Stop">
             <summary>
             Stops the previously started timer. Once stopped, a TimerTask instance
             cannot be scheduled again. Stops also disposes the TimerTask.
             This method is equivalent to <see cref="M:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.Dispose"/>
             </summary>
            
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.DurationInMsecs">
            <summary>
            The duration in Msecs of the timer.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.Mode">
            <summary>
            The TimerMode specified when the timer is created <see cref="M:SolaceSystems.Solclient.Messaging.TimerTask.Start(SolaceSystems.Solclient.Messaging.IContext,System.Threading.TimerCallback,SolaceSystems.Solclient.Messaging.TimerMode,System.Int64,System.Object)"/>
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.UserState">
            <summary>
            A reference to a user userState object. Passed in with the timer callback invocation.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.ToString">
            <summary>
            Overriden from object
            </summary>
            <returns>A string representation</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.Dispose">
            <summary>
            Stops and disposes the timer task
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Adapter.TimerTaskImpl.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.AbstractEntity.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name">string</param>
            <param name="allocateUnmanaged">true to allocate equivalent unmanaged memory</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.AbstractDestination.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name">string</param>
            <param name="allocateUnmanaged">true to allocate equivalent unmanaged memory</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.AbstractDestination.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name">string</param>
            <param name="allocateUnmanaged">true to allocate equivalent unmanaged memory</param>
            <param name="temporary">true for temporary destinations</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.TopicImpl.Equals(System.Object)">
            <summary>
            Equality by value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.TopicImpl.GetHashCode">
            <summary>
            Implementation of GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.TopicImpl.ToString">
            <summary>
            From Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.QueueImpl.Equals(System.Object)">
            <summary>
            Equality by value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.QueueImpl.GetHashCode">
            <summary>
            Implementation of GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.QueueImpl.ToString">
            <summary>
            From Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.TopicEndPointImpl.Equals(System.Object)">
            <summary>
            Equality by value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.TopicEndPointImpl.GetHashCode">
            <summary>
            Implementation of GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.TopicEndPointImpl.ToString">
            <summary>
            From Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.SubscriberEndpointImpl.Equals(System.Object)">
            <summary>
            Equality by value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.SubscriberEndpointImpl.GetHashCode">
            <summary>
            Implementation of GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.ClientNameImpl.Equals(System.Object)">
            <summary>
            Equality by value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.ClientNameImpl.GetHashCode">
            <summary>
            Implementation of GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.ResourceBundle.GetInstance">
            <summary>
            ResourceBundle is singleton
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.ResourceBundle.#ctor">
            <summary>
            singleton class, GetInstance() is the only place 
            that will instantiate a ResourceBundle
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Impl.ResourceBundle.Locale">
            <summary>
            Set Locale for the application, such as "en-US"
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Impl.ResourceBundle.AddResourceFile(System.String)">
            <summary>
            Bundle a .resx file in sub locale folder
            The file will be used to retrieve resource later according to 
            the locale used by the application
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties.Url">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties.UrlInUse">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties.ConnectTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties.ReadTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties.UseBase64">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties.MaxWebPayload">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties.RecvBufferSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties.TcpNoDelay">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties.Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProxy">
            <summary>
            
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProxy.#ctor(SolaceSystems.Solclient.Messaging.Transport.HttpTransportProperties)">
            <summary>
            
            </summary>
            <param name="props"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProxy.connect">
            <summary>
            
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Transport.HttpTransportProxy.close">
            <summary>
            
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.MAdapter.HandleInteropException(System.Exception)">
            <summary>
            Wraps and return an interop exception
            </summary>
            <param name="ex"></param>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException"/>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.MAdapter.SessionPropertyToObject(SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY,System.String)">
            <summary>
            Maps a string value of a Session property to an object
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.MAdapter.FlowInternalPropertyToObject(SolaceSystems.Solclient.Messaging.FlowProperties.CSDKPROPERTY,System.String)">
            <summary>
            Maps a string value of a Flow property to an object
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.CacheSessionImpl.CacheRequestEventAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextImpl.#ctor(SolaceSystems.Solclient.Messaging.ContextProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.ContextEventArgs})">
            <summary>
            Internal Constructor, only to be used by the ContextFactory
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextImpl.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextImpl._IsDisposed">
            <summary>
            Internal Use Only
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextImpl.Start">
            <summary>
            Starts the context if it's not already started or disposed
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextImpl.Stop">
            <summary>
            Stops the context if it's not already stopped or disposed, waits until
            the context thread has stoppped.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextImpl.CreateSession(SolaceSystems.Solclient.Messaging.SessionProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.SessionEventArgs})">
            <summary>
            Creates a session
            </summary>
            <param name="props"></param>
            <param name="messageEventHandler"></param>
            <param name="sessionEventHandler"></param>
            <returns></returns>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Native.ContextImpl.Sessions">
            <summary>
            Returns a snapshot readonly IList of the current sessions created by this context
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Native.ContextImpl.Properties">
            <summary>
            Returns a copy of the ContextProperties used when creating this context
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextImpl.CreateSessionEx``1(SolaceSystems.Solclient.Messaging.SessionProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.SessionEventArgs},System.Action{``0},``0)">
            <summary>
            A volatile api extension used for testing purposes.
            Allows an Action callback to be execute on the Session topic dispatch Destroy callback
            </summary> 
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl">
            <summary>
            ContextFactory is a singleton which represents the first point of contact or entry
            point to the APIs. It has the following responsibilities:
            <li> Exposes the initialization and cleanup routines. API initialization is required
            before using any of its components.
            </li>
            <li> 
            Acts as a factory of the different components of the API, such as contexts, messages, 
            non-temporary destinations, durable endpoint instances, and subscriptions.
            </li>
            <li> Exposes a number of useful statistics at the message and memory pool levels. </li>
            <li> Exposes logging facilities to enable client applications to receive log events and control the log level. </li> 
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.Instance">
            <summary>
            Singleton accessor
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.Init(SolaceSystems.Solclient.Messaging.ContextFactoryProperties)">
            <summary>
            Initializes the Messaging API. This method must be called at least once, before using 
            any of the messaging APIs.
            One property of interest is <see cref="P:SolaceSystems.Solclient.Messaging.ContextFactoryProperties.LogDelegate"/>, it allows
            client applications to receive API log information. 
            </summary>
            <param name="props"></param>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            If unable to ready the API for use
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.SetLogLevel(SolaceSystems.Solclient.Messaging.SolLogLevel)">
            <summary>
            Change the log level in the native API. When the logging level is high,
            more messages and strings are generated. Each generated log must be marshalled across
            the native Interop layer, so setting high log levels like SolLogLevel.Debug can cause
            poor messaging performance.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.GetVersion">
            <summary>
            Returns version information; Init must be called before invoking this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.Cleanup">
            <summary>
            Cleanup of global data within an AppDomain.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.Contexts">
            <summary>
            Returns a read-only list of of contexts created by this Factory.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateContext(SolaceSystems.Solclient.Messaging.ContextProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.ContextEventArgs})">
            <summary>
            Creates a new IContext instance.
            </summary>
            <param name="contextProperties">Context properties</param>
            <param name="contextEventHandler">An EventHandler delegate</param>        
            <returns>A new IContext instance</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            thrown when unable to create a new context instance
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            thrown when unrecoverable error occurs
            </exception>         
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateTopic(System.String)">
            <summary>
            Creates a non temporary Topic
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateTopic(System.String,System.Boolean)">
            <summary>
            Creates a non temporary ITopic instance with the option to set receive-all-deliver-to-one flag.
            <p>
            This flag, when set on a topic subscription, overrides the DeliverToOne message property. If
            the topic in the message matches, it will be delivered to clients with matching subscriptions with the
            ReceiveAllDeliverToOne set, in addition to being round-robined amongst clients subscribed to the topic 
            without this override.
            </p>
            </summary>
            <param name="name"></param>
            <param name="receiveAllDeliverToOne"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateTopic(SolaceSystems.Solclient.Messaging.TopicProperties)">
            <summary>
            Creates a non temporary ITopic instance given a TopicProperties.
            <p><see cref="P:SolaceSystems.Solclient.Messaging.TopicProperties.IsReceiveAllDeliverToOne"/> specifies the DTO behavior. </p>
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateXpe(SolaceSystems.Solclient.Messaging.XpeProperties)">
            <summary>
            Creates an Xpath expression.
            </summary>
            <param name="xpeProperties"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateQueue(System.String)">
            <summary>
            Creates a representation of a durable/non-temporary queue in the API.
            <p>
            Before creating a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow"/> instance to a durable queue on the appliance, the queue must be first provisioned. Applications can provision
            durable/non-temporary queues using <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Provision(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.EndpointProperties,System.Int32,System.Object)"/>.
            </p>
            <p>
            Applications can send or receive Guaranteed messages from a Queue, messages received on a Queue have a single consumer. Multiple subscribers can listen for messages on the same Queue, 
            but once any subscriber retrieves a particular message from the Queue and acknowledge it, that message is consumed and is no longer available to other potential subscribers.
            To consume messages from a Queue, client applications must create a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow">Flow</see> using CreateFlow(...) on <see cref="T:SolaceSystems.Solclient.Messaging.ISession"/> passing
            in the corresponding <see cref="T:SolaceSystems.Solclient.Messaging.IQueue"/> instance. 
            </p>
            <p>
            An exclusive Queue can have multiple active flows at any given time, but only one flow in the set of bound flows can actually consume messages.
            If the currently consuming flow is closed, one of the standby flows will take over and start consuming messages from that
            Queue.
            </p>
            <p>
            A non-exclusive Queue can also have multiple active flows at any given time, but all flows in the set of bound flows can consume messages.
            Messages are forwarded to bound flows by the appliance in a round-robin fashion. If an application does not consume the message (does not acknowledge it), 
            then when that application closes the flow, or exits, all non-consumed messages are re-delivered, in a round-robin fashion, to any flows
            still currently bound.
            </p>
            <p>
            Use of this method with Appliances running SolOS r5.0+ is strongly discouraged. To allow addressing queues in a multiple-router 
            network, applications should always use <see cref="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateQueue(System.String,System.String)"/>.
            </p>
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>        
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateQueue(System.String,System.String)">
            <summary>
            This version of CreateQueue() is similar to <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateQueue(System.String)"/> with the following exception:
            Applications can specify the virtual router name of the appliance where the represented queue resides.       
            </summary>
            <param name="name">the local queue name</param>
            <param name="virtualRouterName">The network virtual router name of the appliance configured with the queue.  
            You must get this string from your network administrator or query the session 
            property <see cref="F:SolaceSystems.Solclient.Messaging.SessionProperties.PROPERTY.VirtualRouterName"/>.</param>
            <returns>A durable queue instance</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            Thrown when unable to create the queue 
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateMessage">
            <summary>
            Creates an IMessage instance. Applications are responsible for disposing all messages allocated by this method
            as soon as they are done with them.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateReplicationGroupMessageId(System.String)">
            <summary>
            Create an Replication Group Message Id object from a string.
            A IReplicationGroupMessageId is a <see cref="T:SolaceSystems.Solclient.Messaging.IReplayStartLocation"/> instance that when set in 
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocationEx"/> indicates that only messages spooled in the replay
            log since the message after the given IReplicationGroupMessageId should be replayed.
            </summary>
            <param name="rmidString">formatted id string from <see cref="M:SolaceSystems.Solclient.Messaging.IReplicationGroupMessageId.ToString"/></param>
            <returns>
            Returns a valid Replication Group Message Id instance.
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            When create operation fails.
            Possible subcodes:
            <list type="">
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamOutOfRange"/>, When replicationGroupMessageIdString is an invalid format.
            </item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            When replicationGroupMessageIdString is null.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateClientName(System.String)">
            <summary>
            Creates a representation of a remote client endpoint, which can be used to add/remove
            subscriptions on behalf of that client.
            </summary>
            <param name="clientName">The client name obtained from a connected session through <see cref="P:SolaceSystems.Solclient.Messaging.SessionProperties.ClientName"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateDurableTopicEndpoint(System.String)">
            <summary>
            Deprecated, please use <see cref="M:SolaceSystems.Solclient.Messaging.ContextFactory.CreateDurableTopicEndpointEx(System.String)"/> instead.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.CreateDurableTopicEndpointEx(System.String)">
            <summary>
            Creates a representation of a durable Topic Endpoint (DTE) in the API.
            <p>
            A DTE is a holding area which allows a subscriber to attract 
            Guaranteed messages matching a given <see cref="T:SolaceSystems.Solclient.Messaging.ITopic">Topic</see> subscription. Durable means that
            the subscriber that's bound to the given DTE, does not have to be online to attract matching messages.
            </p>
            <p>
            This method does not provision the DTE on the appliance. The represented DTE must be first provisioned on the appliance before 
            any use by the API. Applications are able to provision
            DTEs on the appliance using <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Provision(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.EndpointProperties,System.Int32,System.Object)"/> where capapbility <see cref="F:SolaceSystems.Solclient.Messaging.CapabilityType.ENDPOINT_MANAGEMENT"/>
            exists.
            The name parameter is the name given to the Topic Endpoint when provisioning it on the appliance. Applications can call
            <see cref="M:SolaceSystems.Solclient.Messaging.ISession.Provision(SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.EndpointProperties,System.Int32,System.Object)"/> to provision it on the appliance.
            </p>
            <p>
            To consume messages from a given DTE, client applications
            must create a <see cref="T:SolaceSystems.Solclient.Messaging.IFlow">Flow</see> using CreateFlow(...) on <see cref="T:SolaceSystems.Solclient.Messaging.ISession"/> passing
            in the corresponding DTE. Also, there can be only one active flow per DTE.
            </p>
            <p>
            DTEs are only supported on appliances with an Assured Delivery Blade (ADB).
            </p>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.GetLastSDKErrorInfo">
            <summary>
            Returns a SDKErrorInfo instance, which contains the last captured error information
            for the calling thread. This information is catpured on a per-thread basis. The returned
            structure is only valid until the thread makes the next API call.
            </summary>
            <returns>An SDKErrorInfo</returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            thrown when unrecoverable error occurs
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.GetMessageLevelStat(SolaceSystems.Solclient.Messaging.MessageLevelStatistic)">
            <summary>
            Returns the value of the specified message level statistic.
            </summary>
            <param name="stat"></param>
            <returns>-1, if it fails</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.GetQuantaLevelStat(SolaceSystems.Solclient.Messaging.QuantaLevelStatistic,System.Int32)">
            <summary>
            Returns the value of the specified quanta level statistic.
            </summary>
            <param name="stat"></param>
            <param name="quantaIndex">Index of the quanta, an integer in [0,4/>]</param>
            <returns>-1, if it fails</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.Context_LogCallbackFunc(SolaceSystems.Solclient.Messaging.Native.Interop.LogCallbackInfo@,System.IntPtr)">
            <summary>
            Called back by the Context Thread when you have log event
            </summary>
            <param name="logCallBack"></param>
            <param name="user"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ContextFactoryImpl.ReleaseDisposedContext(SolaceSystems.Solclient.Messaging.IContext)">
            This utility is used to release a disposed context from the
            set of Contexts, so it can be garbage collected.
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Version">
            <summary>
            Represents the version information
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.FlowImpl.#ctor(SolaceSystems.Solclient.Messaging.Native.Interop.FlowTopicDispatchDestroyCallback,SolaceSystems.Solclient.Messaging.Native.SessionImpl,SolaceSystems.Solclient.Messaging.Native.TransactedSessionImpl,SolaceSystems.Solclient.Messaging.FlowProperties,SolaceSystems.Solclient.Messaging.IEndpoint,SolaceSystems.Solclient.Messaging.ISubscription,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.FlowEventArgs},SolaceSystems.Solclient.Messaging.EndpointProperties)">
            <summary>
            Field member constructor,
            used to initialize member fields, should be the root contructor
            </summary>
            <param name="flowTopicDispatchDestroyCallback"></param>
            <param name="parentSession"></param>
            <param name="parentTransactedSession"></param>
            <param name="flowProps"></param>
            <param name="endPoint"></param>
            <param name="subscription"></param>
            <param name="messageEventHandler"></param>
            <param name="flowEventHandler"></param>
            <param name="endpointProps"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.FlowImpl.InitFlow">
            <summary>
            Private Initializer for interop layer 
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.FlowImpl.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoIndex">
            <summary>
            Index into array of solClient_bufInfo_t (SolaceSystems.Solclient.Messaging.Native.Interop.BufInfo)
            to access different message portions.
            A given message portion may or may not be present. A non-present portion is indicated
            by a NULL buffer pointer and a zero buffer size on receive. For send, setting the pointer
            for non-present parts to NULL is sufficient. In addition, for send, fewer parts can be
            provided (thus the buffer info array can be less than SOLCLIENT_BUFINFO_MAX_PARTS).
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoIndex.SOLCLIENT_BUFINFO_BINARY_ATTACHMENT_PART">
            <summary>
            The binary payload.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoIndex.SOLCLIENT_BUFINFO_TOPIC_PART">
            <summary>
            The topic payload.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoIndex.SOLCLIENT_BUFINFO_CONSUMER_ID_PART">
            <summary>
            An array of consumer IDs, not valid for send.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoIndex.SOLCLIENT_BUFINFO_USER_DATA_PART">
            <summary>
            The user-data payload.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoIndex.SOLCLIENT_BUFINFO_XML_PART">
            <summary>
            The XML payload.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoIndex.SOLCLIENT_BUFINFO_CORRELATION_TAG_PART">
            <summary>
             For AD application use, this field is returned with acknowledgement 
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoIndex.SOLCLIENT_BUFINFO_QUEUENAME_PART">
            <summary>
            Queue to publish to
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoIndex.SOLCLIENT_BUFINFO_MAX_PARTS">
            <summary>
            The maximum number of defined parts (max size of array).
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfo">
            <summary>
            An array of solClient_bufInfo_t that is used to represent a message. This
            array elements are enumerated with enum solClient_bufInfo_index and must have
            a size of SOLCLIENT_BUFINFO_MAX_PARTS. This array is used by the message
            passing functions SolaceNativeAPI.SessionSend() and the callback registered
            in the call to SolaceNativeAPI.SessionCreate(). It is also used in the utility
            functions solClient_bufInfo_getConsumerIdCount and
            solClient_bufInfo_getConsumerId
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfo.Buffer">
            <summary>
            Pointer to buffer.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfo.BufferSize">
            <summary>
            Number of valid bytes in buffer.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the BufInfoCollection class.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoCollection.#ctor(SolaceSystems.Solclient.Messaging.Native.Interop.BufInfo[])">
            <summary>
            Initializes a new instance of the BufInfoCollection class.
            </summary>
            <param name="bufInfoPtrs"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.BufInfoCollection.Init(System.Boolean)">
            <summary>
            
            </summary>
            <param name="autodispose"> true to dispose unmanaged memory reference by the internal buffers</param>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._boolean">
            unsigned char // solClient_bool_t        boolean;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._uint8">
            unsigned char // solClient_uint8_t       uint8;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._int8">
            char //solClient_int8_t        int8;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._uint16">
            unsinged short //solClient_uint16_t      uint16;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._int16">
            short //solClient_int16_t       int16;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._uint32">
            unsigned long //solClient_uint32_t      uint32;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._int32">
            long //solClient_int32_t      int32;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._uint64">
            unsigned __int64 //solClient_uint64_t      uint64;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._int64">
             __int64 //solClient_int64_t       int64;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._wchar">
            unsigned int //solClient_wchar_t       wchar;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._float32">
            float //float                   float32;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._float64">
            double //double                  float64;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._string">
            const char* //const char             *string;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._bytearray">
            unsigned char* //solClient_uint8_t      *bytearray;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._map">
            struct*//solClient_opaqueContainer_pt map;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._stream">
            struct* //solClient_opaqueContainer_pt stream;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._dest">
            struct* //solClient_destination_t dest;
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Union_Value._smf">
            unsigned char* // solClient_uint8_t      *smf
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDTField_Struct.value">
            solClient_field_foo
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CACHEREQUEST_FLAGS_NO_SUBSCRIBE">
            <summary>
            Do not Send a subscription request to the appliance before sending Cache Request to cache cluster
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_FULFILL">
            <summary>
            Consider the cache request finished when live data
            arrives that matches the topic.  When this is set, ::SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_QUEUE and ::
            SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_FLOWTHRU must be reset
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_QUEUE">
            <summary>
            Queue live data that arrives that matches the topic
            until the cache request completes.  When this is set, ::SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_CANCEL and ::
            SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_FLOWTHRU must be reset
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_FLOWTHRU">
            <summary>
            pass thrugh to the application live data that
            arrives that matches the topic while a cache request is outstanding. When this is set, ::
            SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_QUEUE and ::SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_CANCEL must be reset
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CACHEREQUEST_FLAGS_NOWAIT_REPLY">
            <summary>
            If this flag is set,
            ICacheSession.SendCacheRequest() returns immediately (::SOLCLIENT_IN_PROGRESS) and the cache request
            status is returned later via callback.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_PROP_ENABLE_VAL">
            <summary>
            The value used to enable the property.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_PROP_DISABLE_VAL">
            <summary>
            The value used to disable the property.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_MAX_SESSIONS">
            <summary>
            The maximum number of sessions allowed.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_MAX_APP_FDS">
            <summary>
            The maximum number of application FDs that can be registered.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_MAX_APP_TIMERS">
            <summary>
            The maximum number of application timers allowed.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_MULTI_THREAD">
            <summary>
            Use 1 to enable multi-thread support in context
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_TIME_RES_MS">
            <summary>
            Internal timer resolution in milliseconds.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_DEFAULT_MAX_SESSIONS">
            <summary>
            The default value for max sessions.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_DEFAULT_MAX_APP_FDS">
            <summary>
            The default value for max application FDs.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_DEFAULT_MAX_APP_TIMERS">
            <summary>
            The default value for max application timers.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_DEFAULT_MULTI_THREAD">
            <summary>
            The default value for multi-thread support in context.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SOLCLIENT_CONTEXT_PROP_DEFAULT_TIME_RES_MS">
            <summary>
            The default value for timer resolution in milliseconds.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.LogSetCallback(SolaceSystems.Solclient.Messaging.Native.Interop.LogCallbackHandler,System.IntPtr)">
            <summary>
            Sets the Log callback.
            C: solClient_log_setCallback
            </summary>
            <param name="callback">The callback_p.</param>
            <param name="user">The user_p.</param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.LogSetFilterLevel(SolaceSystems.Solclient.Messaging.Native.Interop.SDKLogCategory,SolaceSystems.Solclient.Messaging.SolLogLevel)">
            <summary>
            Allows the log level filter to be set. Any logs of lower severity
            than the filter level specified are not emitted by the API.  For example, if the
            filter level is set to solClient_LOG_ERROR, then only logs of this severity or
            higher (for example, solClient_LOG_CRITICAL) are emitted. Less severe logs are filtered
            out. The log filter level is applied globally to ALL API sessions.
            If this function is not called, then the default log filter level of
            SOLCLIENT_LOG_DEFAULT_FILTER is in force.
            </summary>
            <param name="category">The log category to which the new log level applies.</param>
            <param name="level">The new log level at which logs are emitted.</param>
            <returns>SOLCLIENT_OK or SOLCLIENT_FAIL</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.LogOutput(SolaceSystems.Solclient.Messaging.Native.Interop.SDKLogCategory,SolaceSystems.Solclient.Messaging.SolLogLevel,System.String,System.String)">
            <summary>
            NEVER call directly; always use solClient_log()
            </summary>
            <param name="category"></param>
            <param name="level"></param>
            <param name="format"></param>
            <param name="arglist"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.ClientInitialize(SolaceSystems.Solclient.Messaging.SolLogLevel,System.IntPtr[])">
            <summary>
            Must be called before any other API interface call is made, with the exception of
            solClient_log_setCallback(), which may be called first to intercept all logs, and
            solClient_log_setFile(), which may be used to change the log destination when the
            log callback is not in use.
            This function takes care of any global initialization that may be required.
            </summary>
            <param name="initialSDKLogLevel">The initial log level for logs for all log categories. 
            This value may be later changed using solClient_log_setFilterLevel. If the default 
            log level is desired, use SOLCLIENT_LOG_DEFAULT_FILTER. However, it is preferred 
            that the application supply the log level from its own command line (or some other 
            form of configuration) so that the log level can quickly be changed without recompiling</param>
            <param name="properties">array of name and value String pairs for 
            global config properities, or NULL if no global properties to set</param>
            <returns>SOLCLIENT_OK or SOLCLIENT_FAIL</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.ClientCleanup">
            <summary>
            Must be called after use of the API is completed.
            This function takes care of any global clean-up that may required.
            It will automatically free all allocated resources, including those for contexts and
            sessions that have previously been created but not destroyed.
            </summary>
            <returns>SOLCLIENT_OK or SOLCLIENT_FAIL</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.ContextCreate(System.IntPtr[],System.IntPtr@,SolaceSystems.Solclient.Messaging.Native.Interop.ContextCreateFuncInfo@,System.UInt32)">
            <summary>
            Creates a new context. The context properties are supplied as an array of
            name/value pointer pairs, where the name and value are both Strings.
            Any values not supplied are set to default values. When the context is created, an opaque
            context pointer is returned to the caller, and this value is then used for any context-level
            operations, such as creating a session.
            There are no threads within the API. Instead, the application must supply a thread to do the work on
            behalf of a context. The application does this by having a context thread call call solClient_context_processEvents.
            A context also provides an optional FD event service for application FDs. Applications may register
            application FDs for events using solClient_context_registerForFdEvents and the FD event callback routine that has
            been registered is invoked by the context thread when the event occurs.
            As an alternative, the application can provide the FD event registration mechanism itself, which then
            results in the API using the application-provided events. The application can optionally provide an FD event
            register and deregister function at the time of context creation. If the register/deregister function
            pointers provided are NULL, then the internal API event mechanism is used.
            </summary>
            <param name="props">Array of name/value String pair pointers to configure session properties.</param>
            <param name="opaqueContext">Opaque context pointer is returned that refers to the created context.</param>
            <param name="funcInfo">Pointer to a structure that provides information on optional FD event functions.</param>
            <param name="funcInfoSize">The size of the passed in funcInfo structure (in bytes) to allow the structure to grow in the future.</param>
            <returns>SOLCLIENT_OK, SOLCLIENT_FAIL</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.ContextDestroy(System.IntPtr@)">
            <summary>
            Destroys a previously created context. On return, the opaque context pointer
            is set to NULL.
            </summary>
            <param name="opaqueContext">Opaque context returned when context was created.</param>
            <returns>SOLCLIENT_OK, SOLCLIENT_FAIL</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionGetProperty(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Gets a property on a session
            </summary>
            <param name="opaqueSession"></param>
            <param name="propertyName"></param>
            <param name="buffer"></param>
            <param name="sizet"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionCreate(System.IntPtr[],System.IntPtr,System.IntPtr@,SolaceSystems.Solclient.Messaging.Native.Interop.Session_CreateFuncInfoV2@,System.UInt32,System.IntPtr[],System.UInt32[],System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.IntPtr[],System.UInt32[],System.UInt32)">
            <summary>
            Session Create
            </summary>
            <param name="props"></param>
            <param name="opaqueContext"></param>
            <param name="opaqueSession"></param>
            <param name="funcInfo"></param>
            <param name="funcInfoSize"></param>
            <param name="chainCerts"></param>
            <param name="chainCertSizes"></param>
            <param name="numChainCerts"></param>
            <param name="pkeyBufSize"></param>
            <param name="pkeyBuf_p"></param>
            <param name="pkeyType"></param>
            <param name="trustStoreBufs"></param>
            <param name="trustStoreBufSizes"></param>
            <param name="numTrustedRoots"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.ModifyProperties(System.IntPtr,System.IntPtr[])">
            <summary>
            Modify session properties
            </summary>
            <param name="opaqueSession"></param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.ModifyClientInfo(System.IntPtr,System.IntPtr[],System.UInt32,System.IntPtr)">
            <summary>
            Modify clientinfo
            </summary>
            <param name="opaqueSession"></param>
            <param name="props"></param>
            <param name="flags"></param>
            <param name="correlationTag_p"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionDestroy(System.IntPtr@)">
            <summary>
            Session Destroy
            </summary>
            <param name="opaqueSession"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionModifyProperties(System.IntPtr,System.IntPtr[])">
            <summary>
            Session Modify properties
            </summary>
            <param name="opaqueSession"></param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionConnect(System.IntPtr)">
            <summary>
            Session Connect
            </summary>
            <param name="opaqueSession"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionStartADPublishing(System.IntPtr)">
            <summary>
            Session Start AD publishing
            </summary>
            <param name="opaqueSession"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionDisconnect(System.IntPtr)">
            <summary>
            Session Disconnect
            </summary>
            <param name="opaqueSession"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionGetRxStats(System.IntPtr,System.UInt64[],System.UInt32)">
            <summary>
            Session Get Rx Stats
            </summary>
            <param name="opaqueSession"></param>
            <param name="rxStats_p"></param>
            <param name="arraySize"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionGetRxStat(System.IntPtr,SolaceSystems.Solclient.Messaging.Stats_Rx,System.UInt64@)">
            <summary>
            Session Get Rx Stat
            </summary>
            <param name="opaqueSession"></param>
            <param name="rxStatType"></param>
            <param name="rxStat_p"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionGetTxStats(System.IntPtr,System.UInt64[],System.UInt32)">
            <summary>
            Session Get Tx Stats
            </summary>
            <param name="opaqueSession"></param>
            <param name="txStats_p"></param>
            <param name="arraySize"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionGetTxStat(System.IntPtr,SolaceSystems.Solclient.Messaging.Stats_Tx,System.UInt64@)">
            <summary>
            Session Get Tx Stat
            </summary>
            <param name="opaqueSession"></param>
            <param name="rxStatType"></param>
            <param name="rxStat_p"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionSend(System.IntPtr,SolaceSystems.Solclient.Messaging.Native.Interop.BufInfo[],System.UInt32,System.UInt32)">
            <summary>
            Session Send
            </summary>
            <param name="opaqueSession"></param>
            <param name="bufInfoPtrs"></param>
            <param name="bufInfoSize"></param>
            <param name="sendFlags"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionDTEUnsubscribe(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Session DTE unsubscribe
            </summary>
            <param name="opaqueSession"></param>
            <param name="dteName"></param>
            <param name="correlationTag"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionClearStats(System.IntPtr)">
            <summary>
            Clears the stats on a session
            </summary>
            <param name="opaqupeSession"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.TransactedSessionCreateFlow(System.IntPtr[],System.IntPtr,System.IntPtr@,SolaceSystems.Solclient.Messaging.Native.Interop.Flow_CreateFuncInfoV2@,System.UInt32)">
            <summary>
            Creates a Flow
            </summary>
            <param name="props"></param>
            <param name="opaqueTransactedSession"></param>
            <param name="opaqueFlow"></param>
            <param name="funcInfo"></param>
            <param name="funcInfoSize"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.FlowCreate(System.IntPtr[],System.IntPtr,System.IntPtr@,SolaceSystems.Solclient.Messaging.Native.Interop.Flow_CreateFuncInfoV2@,System.UInt32)">
            <summary>
            Creates a Flow
            </summary>
            <param name="props"></param>
            <param name="opaqueSession"></param>
            <param name="opaqueFlow"></param>
            <param name="funcInfo"></param>
            <param name="funcInfoSize"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.FlowDestroy(System.IntPtr@)">
            <summary>
            Destroys the flow
            </summary>
            <param name="opaqueFlow"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.FlowStop(System.IntPtr)">
            <summary>
            Stops the flow
            </summary>
            <param name="opaqueFlow"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.FlowStart(System.IntPtr)">
            <summary>
            Starts the flow
            </summary>
            <param name="opaqueFlow"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.FlowGetRxStats(System.IntPtr,System.UInt64[],System.UInt32)">
            <summary>
            Get Rx Stats on a Flow
            </summary>
            <param name="opaqueFlow"></param>
            <param name="rxStatsArray"></param>
            <param name="rxStatsArraySize"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.FlowGetRxStat(System.IntPtr,SolaceSystems.Solclient.Messaging.Stats_Rx,System.UInt64@)">
            <summary>
            Get the Rx Stat on a Flow
            </summary>
            <param name="opaqueFlow"></param>
            <param name="rxStatType"></param>
            <param name="rxStatValue"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.FlowGetTxStat(System.IntPtr,SolaceSystems.Solclient.Messaging.Stats_Tx,System.UInt64@)">
            <summary>
            Get the Tx Stat on a Flow
            </summary>
            <param name="opaqueFlow"></param>
            <param name="txStatType"></param>
            <param name="txStatValue"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.FlowClearStats(System.IntPtr)">
            <summary>
            Clear the Stats on a Flow
            </summary>
            <param name="opaqueFlow"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.FlowSendAck(System.IntPtr,System.UInt64)">
            <summary>
            Acks a message Id
            </summary>
            <param name="opaqueFlow"></param>
            <param name="msgId"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.XmlSubscribe(System.IntPtr,System.IntPtr,System.IntPtr[],System.Int32,System.UInt32)">
            <summary>
            Xml Subscribe
            </summary>
            <param name="opaqueSession"></param>
            <param name="xmlSubscription"></param>
            <param name="namespaces"></param>
            <param name="isFilter"></param>
            <param name="consumerId"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.XmlUnSubscribe(System.IntPtr,System.IntPtr,System.IntPtr[],System.Int32,System.UInt32)">
            <summary>
            Xml Unsubscribe
            </summary>
            <param name="opaqueSession"></param>
            <param name="xmlSubscription"></param>
            <param name="namespaces"></param>
            <param name="isFilter"></param>
            <param name="consumerId"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.TopicSubscribe(System.IntPtr,System.IntPtr)">
            <summary>
            Topic subscribe
            </summary>
            <param name="opaqueSession"></param>
            <param name="topicSubscription"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.TopicUnSubscribe(System.IntPtr,System.IntPtr)">
            <summary>
            Topic unsubscribe
            </summary>
            <param name="opaqueSession"></param>
            <param name="topicSubscription"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.TopicSubscribeExt(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="opaqueSession"></param>
            <param name="flags"></param>
            <param name="topicSubscription"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.TopicUnSubscribeExt(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="opaqueSession"></param>
            <param name="flags"></param>
            <param name="topicSubscription"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.GetLastError">
            <summary>
            Gets the last error
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.ResetLastError">
            <summary>
            Resets the last error
            </summary>
            <returns></returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Context_Timer_Callback">
            <summary>
            Callback prototype for timers
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.LogCallbackInfo">
            <summary>
            Structure that is returned (as a pointer) for each log to the log callback routine
            that has been optinally registered. A structure is used so that new fields can be added
            in the future without affecting existing applications.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.SDKLogCategory">
            <summary>
            API Log Category
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDKLogCategory.All">
            <summary>
            Set log level filter for all categories.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDKLogCategory.Sdk">
            <summary>
            Set log level filter for API internal logs.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.SDKLogCategory.Application">
            <summary>
            Set log level filter for application logs.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.RxMsgCallbackReturnCode">
            <summary>
            see solClient_rxMsgCallback_returnCode
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.RxMsgCallbackReturnCode.SOLCLIENT_CALLBACK_OK">
            <summary>
             Normal return - the message is destroyed by the API upon return
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.RxMsgCallbackReturnCode.SOLCLIENT_CALLBACK_TAKE_MSG">
            <summary>
            Application is keeping the rxMsg and it must not be released or reused by the API
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.VersionInfoStruct">
            <summary>
            Represents the CCSMP API version
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.RxCallbackInfo">
            <summary>
            Structure that is returned (as a pointer) with each received message in the message
            receive callback for a session. A structure is used so that new fields can be added
            in the future without affecting existing applications.
            solClient_session_rxCallbackInfo_t,
            solClient_flow_rxCallbackInfo_t,
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_rxMsgDispatchFuncInfo">
            <summary>
            Callback structure for session message receive dispatch call. Set on a per session message dispatch consumer basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_rxMsgDispatchFuncInfo">
            <summary>
            Callback structure for flow message receive dispatch call. Set on a per flow message dispatch consumer basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_EventCallbackInfo">
            <summary>
            Structure that is returned (as a pointer) for each event in the event callback
            callback for a session. A structure is used so that new fields can be added
            in the future without affecting existing applications.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.Session_EventCallbackInfo.SessionEvent">
            <summary>
            The session event that has occurred
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.Session_EventCallbackInfo.ResponseCode">
            <summary>
            A response code that is returned for some events, otherwise zero
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.Session_EventCallbackInfo.Info">
            <summary>
            Pointer to a NUL-terminated String providing further information about the event, when avaialable.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.Session_EventCallbackInfo.Correlation">
            <summary>
            application supplied correlation pointer where applicable - used when acknowledging or rejecting Guaranteed messages and in solClient_session_dteUnsubscribe() 
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_CreateEventCallbackFuncInfo">
            <summary>
            Callback information for session event callback. Set on a per-session basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_CreateRxCallbackFuncInfo">
            <summary>
            Callback information for session message receive callback. Set on a per-session basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_CreateRxCallbackFuncInfoV2">
            <summary>
            Callback information for session message receive callback. Set on a per-session basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_CreateFuncInfo">
            <summary>
            Function information for session creation. Set on a per-session basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_CreateFuncInfoV2">
            <summary>
            Function information for session creation. Set on a per-session basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_EventCallbackInfo">
            <summary>
            Structure that is returned (as a pointer) for each event in the event callback
            callback for a flow. A structure is used so that new fields can be added
            in the future without affecting existing applications.
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_EventCallbackInfo.FlowEvent">
            <summary>
            The flow event that has occurred
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_EventCallbackInfo.ResponseCode">
            <summary>
            A response code that is returned for some events, otherwise zero
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_EventCallbackInfo.Info">
            <summary>
            Pointer to a NUL-terminated String providing further information about the event, when avaialable.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_CreateFuncInfo">
            <summary>
            Function information for flow creation. Set on a per-flow basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_CreateFuncInfoV2">
            <summary>
            Function information for flow creation. Set on a per-flow basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_CreateRxCallbackFuncInfo">
            <summary>
            Callback information for flow message receive callback. Set on a per-flow basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_CreateRxCallbackFuncInfoV2">
            <summary>
            Callback information for flow message receive callback. Set on a per-flow basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_CreateEventCallbackFuncInfo">
            <summary>
            Callback information for flow event callback. Set on a per-session basis.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.LogCallbackHandler">
            <summary>
            Callback prototype for generated logs.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.ContextFdCallbackFunc">
            <summary>
            Callback prototype for FD events. The callback with this prototype that is
            registered for an FD event is called for each FD event that occurs.
            Multiple registered FD events can be returned in a single callback.
            see solClient_context_registerForFdEvents
            </summary>
            <param name="opaqueContext">Pointer to context under which the FD event occurred.</param>
            <param name="fd">The FD for which the event has occurred.</param>
            <param name="events">A bit vector containing the FD events that have occurred ORed together.</param>
            <param name="user">Pointer to opaque user data provided when callback registered.</param>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.ContextRegisterFdFunc">
            <summary>
            Function prototype for optional application-supplied FD registration service.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.ContextUnregisterFdFunc">
            <summary>
            Function prototype for optional application-supplied FD unregistration service.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.SessionTopicDispatchDestroyCallback">
            <summary>
            Function prototype for TopicDispatchDestroy callback.  This is for internal use 
            only and informs the CSCSMP library when the native objects are released.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.FlowTopicDispatchDestroyCallback">
            <summary>
            Function prototype for TopicDispatchDestroy callback.  This is for internal use 
            only and informs the CSCSMP library when the native objects are released.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_RxCallbackFunc">
            <summary>
            Callback prototype for recevied messages.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_RxCallbackFuncV2">
            <summary>
            Callback prototype for recevied messages. V2
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_RxCallbackFunc">
            <summary>
            Callback prototype for recevied messages.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Flow_RxCallbackFuncV2">
            <summary>
            Callback prototype for recevied messages. V2
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.Interop.Session_EventCallbackFunc">
            <summary>
            Callback prototype for session events. The callback with this prototype that is
            registered for a context is called for each session event that occurs.
            <param name="opaqueSession">Pointer to the session to which the event applies.</param>
            <param name="eventCallbackInfo">Pointer to information about the session event, such as the event type.</param>
            <param name="user">Pointer to opaque user data provided when callback is registered.</param>
            <seealso cref="M:SolaceSystems.Solclient.Messaging.Native.Interop.SolaceNativeAPI.SessionCreate(System.IntPtr[],System.IntPtr,System.IntPtr@,SolaceSystems.Solclient.Messaging.Native.Interop.Session_CreateFuncInfoV2@,System.UInt32,System.IntPtr[],System.UInt32[],System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.IntPtr[],System.UInt32[],System.UInt32)"/>
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.DynamicUnmanagedBuffer.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.Interop.UnManagedStrings.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.CustomMarshaller.RX_SESSION_STATS_MAP">
            <summary>
            The index of this table represents the Stats_Rx enum value; The value represents the equivalent C API
            </summary>
        </member>
        <member name="F:SolaceSystems.Solclient.Messaging.Native.Interop.CustomMarshaller.TX_SESSION_STATS_MAP">
            <summary>
            The index of this table represents the Stats_Tx enum value; The value represents the equivalent C API
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.BasicMessageImpl">
            <summary>
            Provides implementation of a message, based on D18, D19 new message paradigm functionality
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BasicMessageImpl.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Native.BasicMessageImpl.InternalMessageId">
            <summary>
            Internal 
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BasicMessageImpl.SetAsReplyMessage">
            <summary>
            </summary>
            <tested></tested>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.ReplicationGroupMessageIdImpl.Create(System.String)">
            <summary>
            Create an Replication Group Message Id object from a string.
            A IReplicationGroupMessageId is a <see cref="T:SolaceSystems.Solclient.Messaging.IReplayStartLocation"/> instance that when set in 
            <see cref="P:SolaceSystems.Solclient.Messaging.FlowProperties.ReplayStartLocationEx"/> indicates that only messages spooled in the replay
            log since the message after the given IReplicationGroupMessageId should be replayed.
            </summary>
            <param name="rmidString">formatted id string from <see cref="M:SolaceSystems.Solclient.Messaging.IReplicationGroupMessageId.ToString"/></param>
            <returns>
            Returns a valid Replication Group Message Id instance.
            </returns>
            <exception cref="T:SolaceSystems.Solclient.Messaging.OperationErrorException">
            When create operation fails.
            Possible subcodes:
            <list type="">
            <item>
            <see cref="F:SolaceSystems.Solclient.Messaging.SDKErrorSubcode.ParamOutOfRange"/>, When replicationGroupMessageIdString is an invalid format.
            </item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            When replicationGroupMessageIdString is null.
            </exception>
            <exception cref="T:SolaceSystems.Solclient.Messaging.FatalErrorException">
            Thrown when an unrecoverable error occurs.
            </exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.SDTFieldImpl.GetHashCode">
            <summary>
            Implementation of GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.SDTUtilsImpl">
            <summary>
            Used to get and create SDT concepts in a message.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.SessionImpl.#ctor(SolaceSystems.Solclient.Messaging.Native.ContextImpl,SolaceSystems.Solclient.Messaging.SessionProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.SessionEventArgs})">
            <summary>
            Internal Constructor
            </summary>
            <param name="parentContext"></param>
            <param name="sessionProps"></param>
            <param name="messageEventHandler"></param>
            <param name="sessionEventHandler"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.SessionImpl.CreateSessionImpl``1(SolaceSystems.Solclient.Messaging.Native.ContextImpl,SolaceSystems.Solclient.Messaging.SessionProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.SessionEventArgs},System.Action{``0},``0)">
            <summary>
            Internal Factory method to create SessionImpl
            </summary>
            <param name="parentContext"></param>
            <param name="sessionProps"></param>
            <param name="messageEventHandler"></param>
            <param name="sessionEventHandler"></param>
            <param name="topicDispatchDestroyHook"></param>
            <param name="closure"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.SessionImpl.#ctor(System.Object,SolaceSystems.Solclient.Messaging.Native.ContextImpl,SolaceSystems.Solclient.Messaging.SessionProperties,System.EventHandler{SolaceSystems.Solclient.Messaging.MessageEventArgs},System.EventHandler{SolaceSystems.Solclient.Messaging.SessionEventArgs})">
            <summary>
            Internal Constructor
            </summary>
            <param name="_">ignored, used to create common constructor base for internal and external constructors</param>
            <param name="parentContext"></param>
            <param name="sessionProps"></param>
            <param name="messageEventHandler"></param>
            <param name="sessionEventHandler"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.SessionImpl._IsDisposed">
            <summary>
            Internal Use Only
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.SessionImpl.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.SessionImpl.ClearStats">
            <summary>
            Clears the stats
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.SessionImpl.GetTxStats">
            <summary>
            Returns the Tx Stats
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.SessionImpl.GetRxStats">
            <summary>
            Returns the Rx Stats
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.CapabilityImpl.GetHashCode">
            <summary>
            Implementation of GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.TransactedSessionImpl.Dispose(System.Boolean)">
            <summary>
            Clean up resources used by this transacted session
            </summary>
            <param name="disposing">True if initiated manually, false otherwise</param>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.CorrelationKeyHelper">
            <summary>
            Correlates CorrelationKeys to async events from the API 
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1">
            <summary>
            A BlockingQueue implementation 
            - This class does not need to be synchronized
            - It's unbounded (has no size limit)
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Create new BlockingQueue with a given capacity 
            </summary>
            <param name="capacity">The initial number of elements that the queue can contain</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.#ctor">
            <summary>
            Create new BlockingQueue.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.Finalize">
            <summary>
            BlockingQueue Destructor (Close queue, resume any waiting thread).
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.Clear">
            <summary>
            Remove all objects from the Queue.
            Does not close the queue
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.Close">
            <summary>
            Removes all objects from the BlockingQueue and resumes all consuming threads.
            Closed is a terminal state
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.Close(System.Exception)">
            <summary>
            Removes all objects from the BlockingQueue and resumes all consuming threads
            </summary>
            <param name="closedException">Exception to throw at consuming and producing threads threads</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.Close(System.Exception,System.Boolean)">
            <summary>
            Optionally Removes all objects from the BlockingQueue and resumes all consuming threads
            </summary>
            <param name="closedException">Exception to throw at consuming and producing threads</param>
            <param name="purgeQueueMessages">if true, it will remove the already queued objects</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.Dequeue(System.TimeSpan)">
            <summary>
            Removes and returns the object at the beginning of the BlockingQueue.
            </summary>
            <param name="timeout">time to wait before returning</param>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.DequeueNoWait">
            <summary>
            Returns default(T) if no object is available in the BlockingQueue
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.Dequeue(System.Int32)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <param name="timeout">time to wait before returning (in milliseconds)</param>
            <returns>T in queue.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the Queue.
            </summary>
            <param name="obj">Object to put in queue</param>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.HasMore">
            <summary>
            Returns true if the queue is not empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolaceSystems.Solclient.Messaging.Native.BlockingQueue`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.ObjectHashSet">
            <summary>
            Since .NET 2.0 does not have set implementation.
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.SynchronizedObjectHashMap">
            <summary>
            A thread-safe version of IDictionary
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Messaging.Native.SynchronizedObjectHashSet">
            <summary>
            A thread-safe version of ObjectHashSet
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.DERWriter.WriteSequenceToSameStream(System.IO.MemoryStream,System.Int32,System.Int32)">
            <summary>
            This is a rather specialized method.  The assumption is that a single buffer is going to be used to write a
            sequence.  The problem can be that the total length of the sequence is unknown until the data is written.
            The simplest approach is to write the contents into a single buffer first, then start a new buffer starting
            with the sequence header once the length is known, then copy the data from the first stream into the second.
            For sensitive data, such as private keys, this places more copies of the sensitive data in memory.  So the
            assumed approach here is that bytes are reserved in the buffer for a header.  We support streams up to
            64KiB, which means a header length of 2-4 bytes.  So if 4 bytes are always reserved for the header, this
            will work for streams up to 64KiB.  After the header is written before the data, the data is shifted in the
            buffer if necessary so that it will be immediately after the header and therefore result in a properly
            formatted sequence.
            </summary>
            <param name="stream">The memory stream to write the sequence header into.  The Position of stream must be
            set to the location where the seqeunce header is to be written.</param>
            <param name="sequenceOffset">The number of bytes beyond stream.Position where the sequence data is located.
            </param>
            <param name="sequenceLength">The number of data bytes in the sequence</param>
            <returns>The number of bytes that the sequence data was moved to accommodate a header smaller than
            sequenceOffset.  In other words, returns sequenceHeaderLen - sequenceOffset.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Messaging.Native.XpeImpl.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="fromDispose"></param>
        </member>
        <member name="T:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1">
            <summary>
            One Lock Bounded Blocking Queue (e.g. Bounded Buffer).
            This queue is internally synchronized (thread-safe) and designed for one-many producers and one-many
            consumer threads.  This is ideal for pipelining or other consumer/producer needs.
            Fast and thread safe on single or multiple cpu machines.
            
            Consumer thread(s) will block on Dequeue operations until another thread performs a Enqueue
            operation, at which point the first scheduled consumer thread will be unblocked and get the
            current object.  Producer thread(s) will block on Enqueue operations until another
            consumer thread calls Dequeue to free a queue slot, at which point the first scheduled producer
            thread will be unblocked to finish its Enqueue operation.  No user code is needed to
            handle this "ping-pong" between locking/unlocking consumers and producers. 
            
             This source is distributed WITHOUT ANY WARRANTY or support;
             without even the implied warranty of MERCHANTABILITY or FITNESS FOR
             A PARTICULAR PURPOSE.  All parts of this program are subject to
             change without notice including the program's CLI options.
             
             Unlimited use and re-distribution of this unmodified source code is   
             authorized only with written permission.  Use of part or modified  
             source code must carry prominent notices stating that you modified it, 
             and give a relevant date.
             
             Note: This class is derived from the Bounded Blocking Queue provided at:
             http://www.codeproject.com/KB/recipes/boundedblockingqueue.aspx
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Create instance of Queue with Bounded number of elements.  After that
            many elements are used, another Enqueue operation will "block" or wait
            until a Consumer calls Dequeue to free a slot.  Likewise, if the queue
            is empty, a call to Dequeue will block until another thread calls
            Enqueue.
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Values">
            <summary>
            Gets the object values currently in the queue.  If queue is empty, this
            will return a zero length array.  The returned array length can be
            0 to Size.  This method does not modify the queue, but returns a shallow copy
            of the queue buffer containing the objects contained in the queue.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Activate">
            <summary>
            Open the queue for use.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Close">
            <summary>
            Close the queue and signal any waiting threads that the 
            queue is closed.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Adds to the end of the queue. If queue is full, this method will
            block until another thread calls one of the Dequeue methods.  This method will wait
            "Timeout.Infinite" until queue has a free slot.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Adds to the end of the queue. If queue is full, this method will
            block until another thread calls one of the Dequeue methods or millisecondsTimeout
            expires.  If timeout, method will throw QueueTimeoutException.
            </summary>
            <param name="value"></param>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.TryEnqueue(`0)">
            <summary>
            Non-blocking version of Enqueue().  If Enqueue is successfull, this will
            return true; otherwise false if queue is full.
            </summary>
            <param name="value"></param>
            <returns>true if successfull, otherwise false.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Dequeue(`0@)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            If queue is empty, method will block until another thread calls one of
            the Enqueue methods.   This method will wait "Timeout.Infinite" until another
            thread Enqueues and object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Dequeue(`0@,System.Int32)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            If queue is empty, method will block until another thread calls one of
            the Enqueue methods or millisecondsTimeout expires.
            If timeout, method will throw QueueTimeoutException.
            </summary>
            <returns>The object that is removed from the beginning of the Queue.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.TryDequeue(`0@)">
            <summary>
            Non-blocking version of Dequeue.  Will return false if queue is empty and set
            value to null, otherwise will return true and set value to the dequeued object.
            </summary>
            <param name="value">The object that is removed from the beginning of the Queue or null if empty.</param>
            <returns>true if successfull, otherwise false.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the queue without removing it.
            </summary>
            <returns>The object at the beginning of the queue.</returns>
            <remarks>
            This method is similar to the Dequeue method, but Peek does not modify the queue. 
            A null reference can be added to the Queue as a value. 
            To distinguish between a null value and the end of the queue, check the Count property or
            catch the InvalidOperationException, which is thrown when the Queue is empty.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The queue is empty.</exception>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.TryPeek(`0@)">
            <summary>
            Returns the object at the beginning of the Queue without removing it.
            Similar to the Peek method, however this method will not throw exception if
            queue is empty, but instead will return false.
            </summary>
            <param name="value">The object at the beginning of the Queue or null if empty.</param>
            <returns>The object at the beginning of the Queue.</returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Clear">
            <summary>
            Removes all objects from the Queue.
            </summary>
            <remarks>
            Count is set to zero. Size does not change.
            </remarks>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.IsReadOnly">
            <summary>
            Gets a value indicating whether access to the Queue is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Size">
            <summary>
            Returns the max elements allowed in the queue before blocking Enqueue
            operations.  This is the size set in the constructor.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Count">
            <summary>
            Gets the number of elements contained in the Queue.
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the Queue elements to an existing one-dimensional Array,
            starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from Queue. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Add(`0)">
            <summary>
            The following method is not implemented.  Use Enqueue instead.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Contains(`0)">
            <summary>
            The following method is not implemented.  Use Enqueue and Dequeue instead.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.Remove(`0)">
            <summary>
            The following method is not implemented.  Use Dequeue instead.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.BlockingQueue`1.GetEnumerator">
            <summary>
            GetEnumerator not implemented.  You can't enumerate the active queue
            as you would an array as it is dynamic with active gets and puts.  You could
            if you locked it first and unlocked after enumeration, but that does not
            work well for GetEnumerator.  The recommended method is to Get Values
            and enumerate the returned array copy.  That way the queue is locked for
            only a short time and a copy returned so that can be safely enumerated using
            the array's enumerator.  You could also create a custom enumerator that would
            dequeue the objects until empty queue, but that is a custom need. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Utils.Types.QueueTimeoutException">
            <summary>
            
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.UnManagedString.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="allocateUnmanaged"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.UnManagedString.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:SolaceSystems.Solclient.Utils.Types.Tuple`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.ContainerUtils.RemoveAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Removes all entries from a target list where the predicate is true.
            </summary>
            <typeparam name="T">The type of item that must exist in the list.</typeparam>
            <param name="list">The list to remove entries from</param>
            <param name="predicate">The predicate that contains a testing criteria to determine if an entry should be removed from the list.</param>
            <returns>The number of records removed.</returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Utils.Types.Utilities">
            <summary>
            A group of static helper methods
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.Utilities.ToEnum``1(System.Int32)">
            <summary>
            Converts Enums
            </summary>
            <typeparam name="D"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.Utilities.ToEnum``1(System.String)">
            <summary>
            Converts strings to enums
            </summary>
            <typeparam name="D"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.Utilities.DeepCopy``1(``0)">
            <summary>
            Deep copy a Solace.Messageing assembly object or primitive object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.Utilities.AdaptiveDeepCopy``1(``0)">
            <summary>
            Deep copy a Solace.Messageing assembly object or primitive object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.Utilities.ShallowCopy``1(``0)">
            <summary>
            Makes a shallow copy of an object using Property fields by reflection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.Utilities.ReflectiveCopy``1(``0)">
            <summary>
            Makes a copy using reflection of private instance fields.
            Note traverses the object hierachy to assess parent object fields nd assigns them.
            Assumes source type is Copyable via DeepCopy, this is limit the type space to the solace messaging assembly
            </summary>
            <typeparam name="T">Type of instance to copy</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Types.Utilities.ObjectEquals(System.Object,System.Object)">
            <summary>
            Test two objects for equality.
            Not all complex structured types (arrays, collections, etc) implement 
            the object Equals method to match on elements.
            </summary>
            <param name="one"></param>
            <param name="other"></param>
            <returns>
            true, if one is equal to other
            false, if one is not equal to other
            </returns>
        </member>
        <member name="T:SolaceSystems.Solclient.Utils.Logger.ISolLogger">
            <summary>
            Logger interface, must be implemented by all logger instances
            wishing to handle log events emitted from the messaging api.
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Logger.ISolLogger.IsEmergencyEnabled">
            <summary>
            Returns true if Emergency log level is in effect for this logger
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Logger.ISolLogger.IsAlertEnabled">
            <summary>
            Returns true if Alert log level is in effect for this logger
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Logger.ISolLogger.IsCriticalEnabled">
            <summary>
            Returns true if Critical log level is in effect for this logger
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Logger.ISolLogger.IsErrorEnabled">
            <summary>
            Returns true if Error log level is in effect for this logger
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Logger.ISolLogger.IsWarnEnabled">
            <summary>
            Returns true if Warning log level is in effect for this logger
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Logger.ISolLogger.IsNoticeEnabled">
            <summary>
            Returns true if Notice log level is in effect for this logger
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Logger.ISolLogger.IsInfoEnabled">
            <summary>
            Returns true if Info log level is in effect for this logger
            </summary>
        </member>
        <member name="P:SolaceSystems.Solclient.Utils.Logger.ISolLogger.IsDebugEnabled">
            <summary>
            Returns true if Debug log level is in effect for this logger
            </summary>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.Emergency(System.String)">
            <summary>
            Logs an Emergency log message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.EmergencyException(System.String,System.Exception)">
            <summary>
            Logs an Emergency log message with expection
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.Alert(System.String)">
            <summary>
            Logs an Alert log message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.AlertException(System.String,System.Exception)">
            <summary>
            Logs an Alert log message with expection
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.Critical(System.String)">
            <summary>
            Logs a Critical log message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.CriticalException(System.String,System.Exception)">
            <summary>
            Logs a Critical log message with expection
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.Error(System.String)">
            <summary>
            Logs an Error log message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.ErrorException(System.String,System.Exception)">
            <summary>
            Logs an Error log message with expection
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.Warn(System.String)">
            <summary>
            Logs a Warning log message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.WarnException(System.String,System.Exception)">
            <summary>
            Logs a Warning log message with expection
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.Notice(System.String)">
            <summary>
            Logs a Notice log message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.NoticeException(System.String,System.Exception)">
            <summary>
            Logs a Notice log message with expection
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.Info(System.String)">
            <summary>
            Logs an Info log message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.InfoException(System.String,System.Exception)">
            <summary>
            Logs an Info log message with expection
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.Debug(System.String)">
            <summary>
            Logs a Debug log message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SolaceSystems.Solclient.Utils.Logger.ISolLogger.DebugException(System.String,System.Exception)">
            <summary>
            Logs a Debug log message with expection
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:SolaceSystems.Solclient.Utils.Logger.SolLogManager">
            <summary>
            Represents
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Utils.Logger.DefaultSolLoggerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:SolaceSystems.Solclient.Utils.Logger.DefaultSolLogger">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
